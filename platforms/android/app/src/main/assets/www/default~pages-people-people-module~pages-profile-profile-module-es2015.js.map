{"version":3,"sources":["./src/pages/messages/services/messages/messages.service.ts","./src/pages/people/services/people/people.service.ts"],"names":[],"mappings":"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","file":"default~pages-people-people-module~pages-profile-profile-module-es2015.js","sourcesContent":["import { Injectable, Injector } from '@angular/core';\nimport * as firebase from 'firebase/app';\nimport { combineLatest, Observable, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport { IUser } from 'src/pages/auth/helpers/model';\nimport { AuthService } from 'src/pages/auth/services/auth/auth.service';\nimport { Extender } from 'src/shared/helpers/extender';\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\nimport { IChat, IMessage } from '../../models/message';\n\n/**\n * crud methods to interact with firebase cloud store regarding messaging\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class MessagesService extends Extender {\n  constructor(protected injector: Injector, private authService: AuthService, private firestoreService: FirestoreService) {\n    super(injector);\n  }\n\n  /** get messages that contain the users uid in participantsId property, check if message is flagged as archived\n   * for each message get messages recipient and get their details from users collection. return data\n   */\n  public getMessages(uid: string, archieved: boolean = false): Observable<IMessage[]> {\n    return this.firestoreService\n      .colWithIds$<IMessage[]>('messages', (ref: any) =>\n        ref.where('participantsId', 'array-contains', uid).where('isArchieved', '==', archieved)\n      )\n      .pipe(\n        switchMap((data: IMessage[]) => {\n          const reads$ = [];\n          if (data.length > 0) {\n            data.forEach((msg) => {\n              reads$.push(this.getMessage(msg.id));\n            });\n            return combineLatest(reads$);\n          } else {\n            return of([]);\n          }\n        }),\n        map((data: IMessage[]) => {\n          return data;\n        })\n      );\n  }\n\n  /** get message and their participants information */\n  public getMessage(id: string | number): Observable<IMessage> {\n    let data: any;\n    const reads$ = [];\n\n    return this.firestoreService.doc$<IMessage>(`messages/${id}`).pipe(\n      switchMap((msg) => {\n        data = msg;\n        msg.participantsId.forEach((i: any) => {\n          reads$.push(this.firestoreService.doc$<IUser>(`users/${i}`));\n        });\n        return combineLatest(reads$);\n      }),\n      map((joins) => {\n        return { ...data, participants: joins };\n      })\n    );\n  }\n\n  /** update message */\n  public updateMessage(message: IMessage) {\n    return this.firestoreService.update(`messages/${message.id}`, message);\n  }\n\n  /** delete message */\n  public deleteMessage(message: IMessage) {\n    return this.firestoreService.delete(`messages/${message.id}`);\n  }\n\n  /** delete collection of messages */\n  public deleteAllMessages(batch) {\n    return this.firestoreService.deleteCollection(`messages`, batch);\n  }\n\n  /** start chat with a user by first checking if a message already exists with the users id,\n   * if no message exists, create one,\n   * if message exists, navigate to chat modal\n   */\n  public startChat(user: IUser) {\n    this.firestoreService\n      .colWithIds$<IMessage>('messages', (ref: any) => ref.where('participantsId', 'array-contains', user.uid))\n      .subscribe((data) => {\n        const message = data[0];\n        if (!message) {\n          this.createMessage(user);\n        } else {\n          this.goto(`${this.routes.messages}/${message.id}`);\n        }\n      });\n  }\n\n  /** delete a message in chat */\n  public deleteChat(message: IMessage, data: IChat) {\n    return this.firestoreService.update(`messages/${message.id}`, {\n      messages: firebase.firestore.FieldValue.arrayRemove(data)\n    });\n  }\n\n  /** send a message */\n  public send(message: IMessage, data: IChat) {\n    delete message.participants;\n    return this.firestoreService.update(`messages/${message.id}`, {\n      ...message,\n      messages: firebase.firestore.FieldValue.arrayUnion(data)\n    });\n  }\n\n  /** create a message with participants and default messages property to empty array */\n  private async createMessage(user: IUser) {\n    const { uid } = await this.authService.getUser();\n    this.firestoreService.add<IMessage>('messages', {\n      participantsId: [user.uid, uid],\n      messages: [],\n      isArchieved: false\n    });\n  }\n}\n","import { Injectable, Injector } from '@angular/core';\nimport { CallNumber } from '@ionic-native/call-number/ngx';\nimport * as firebase from 'firebase/app';\nimport { combineLatest, of } from 'rxjs';\nimport { first, map, switchMap } from 'rxjs/operators';\nimport { IUser } from 'src/pages/auth/helpers/model';\nimport { AuthService } from 'src/pages/auth/services/auth/auth.service';\nimport { Extender } from 'src/shared/helpers/extender';\nimport { ITabView } from 'src/shared/helpers/models';\nimport { FirestoreService } from 'src/shared/services/firestore/firestore.service';\n\n/**\n * crud methods to interact with firebase cloud store regarding users\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class PeopleService extends Extender {\n  public friends: string[] = [];\n\n  constructor(\n    protected injector: Injector,\n    private callNumber: CallNumber,\n    private authService: AuthService,\n    private firestoreService: FirestoreService\n  ) {\n    super(injector);\n  }\n\n  /** get alphabets A to Z */\n  public get alpha(): string[] {\n    const a = [];\n    let i = 'A'.charCodeAt(0);\n    const j = 'Z'.charCodeAt(0);\n    for (; i <= j; ++i) {\n      a.push(String.fromCharCode(i));\n    }\n    return a;\n  }\n\n  /** get tabbed views detail */\n  public get views(): ITabView[] {\n    return [\n      {\n        id: 0,\n        name: 'All',\n        active: true,\n        event: () => {}\n      },\n      {\n        id: 1,\n        name: 'Friends',\n        event: () => {}\n      }\n    ];\n  }\n\n  /** sort and group people by first letter of their name and return an array of letter\n   * and then array of users with that first letter of display name\n   */\n  public groupPeople(people: IUser[]): Array<{ letter: string; people: IUser[] }> {\n    const sortedContacts = people.sort((a, b) => {\n      return a.displayName.toLowerCase() > b.displayName.toLowerCase()\n        ? 1\n        : b.displayName.toLowerCase() > a.displayName.toLowerCase()\n        ? -1\n        : 0;\n    });\n    let currentLetter: boolean | any = false;\n    let currentContacts = [];\n    const groupedPeople = [];\n\n    sortedContacts.forEach((value: IUser) => {\n      if (value.displayName.charAt(0).toString() !== currentLetter) {\n        currentLetter = value.displayName.charAt(0);\n        const newGroup = {\n          letter: currentLetter,\n          people: []\n        };\n        currentContacts = newGroup.people;\n        groupedPeople.push(newGroup);\n      }\n      currentContacts.push(value);\n    });\n\n    return groupedPeople;\n  }\n\n  /** get users from users collection, remove current user from list */\n  public getPeople(uid: string) {\n    return this.firestoreService.colWithIds$(`users`).pipe(\n      map((users) => {\n        return users.filter((user) => user.uid !== uid);\n      })\n    );\n  }\n\n  /** get a single user by id and return as promise */\n  public getPerson(uid: string) {\n    return this.firestoreService\n      .doc$<IUser>(`users/${uid}`)\n      .pipe(first())\n      .toPromise();\n  }\n\n  /** get friends ids from friends collection */\n  public getFriendIds(uid: string) {\n    return this.firestoreService.doc$<any>(`friends/${uid}`).pipe(\n      map((friends) => {\n        this.friends = friends.friendIds;\n        return friends.friendIds;\n      })\n    );\n  }\n\n  /** get friends data from friends collection. friends collection only stores id so get user object for each id using switch map */\n  public getFriends(uid: string) {\n    return this.firestoreService.doc$<any>(`friends/${uid}`).pipe(\n      switchMap((_friend: any) => {\n        const reads = [];\n        if (_friend.friendIds.length > 0) {\n          _friend.friendIds.forEach((item: any) => {\n            reads.push(this.firestoreService.doc$(`users/${item}`));\n          });\n          return combineLatest(reads);\n        } else {\n          return of([]);\n        }\n      }),\n      map((friends: IUser[]) => {\n        return friends;\n      })\n    );\n  }\n\n  /** get followers ids from friends where friendsIds array contains current users uid */\n  public getFollowersIds(uid: string) {\n    return this.firestoreService\n      .colWithIds$<any>(`friends`, (ref) => ref.where('friendIds', 'array-contains', uid))\n      .pipe(\n        map((friends) => {\n          return friends;\n        })\n      );\n  }\n\n  /** get followers data from friends where friendsIds array contains current users uid\n   * friends collection only stores id so get user object for each id using switch map\n   */\n  public getFollowers(uid: string) {\n    return this.firestoreService\n      .colWithIds$<any>(`friends`, (ref) => ref.where('friendIds', 'array-contains', uid))\n      .pipe(\n        switchMap((_friend: any) => {\n          const reads = [];\n          if (_friend.length > 0) {\n            _friend.forEach((item: any) => {\n              reads.push(this.firestoreService.doc$(`users/${item.id}`));\n            });\n            return combineLatest(reads);\n          } else {\n            return of([]);\n          }\n        }),\n        map((friends: IUser[]) => {\n          return friends;\n        })\n      );\n  }\n\n  /** follow user by creating/updating friendsIds in friends collection */\n  public async follow(fid: string) {\n    const { uid } = await this.authService.getUser();\n    return await this.firestoreService.set<IUser>(`friends/${uid}`, {\n      friendIds: firebase.firestore.FieldValue.arrayUnion(fid)\n    });\n  }\n\n  /** unfollow user by removing friendsIds in friends collection */\n  public async unfollow(fid: string) {\n    const { uid } = await this.authService.getUser();\n    return await this.firestoreService.update(`friends/${uid}`, {\n      friendIds: firebase.firestore.FieldValue.arrayRemove(fid)\n    });\n  }\n}\n"],"sourceRoot":""}