{"version":3,"sources":["webpack://libphonenumber/webpack/universalModuleDefinition","webpack://libphonenumber/webpack/bootstrap","webpack://libphonenumber/./metadata.full.json.js","webpack://libphonenumber/../source/constants.js","webpack://libphonenumber/../source/util.js","webpack://libphonenumber/../source/ParseError.js","webpack://libphonenumber/../../source/tools/semver-compare.js","webpack://libphonenumber/../source/metadata.js","webpack://libphonenumber/../source/extension.js","webpack://libphonenumber/../source/isViablePhoneNumber.js","webpack://libphonenumber/../source/parseDigits.js","webpack://libphonenumber/../source/parseIncompletePhoneNumber.js","webpack://libphonenumber/../source/getNumberType_.js","webpack://libphonenumber/../source/isPossibleNumber_.js","webpack://libphonenumber/../source/IDD.js","webpack://libphonenumber/../source/RFC3966.js","webpack://libphonenumber/../source/validate_.js","webpack://libphonenumber/../source/format_.js","webpack://libphonenumber/../source/PhoneNumber.js","webpack://libphonenumber/../source/parse_.js","webpack://libphonenumber/../source/parsePhoneNumber_.js","webpack://libphonenumber/../source/parsePhoneNumber.js","webpack://libphonenumber/../source/parsePhoneNumberFromString_.js","webpack://libphonenumber/../source/parsePhoneNumberFromString.js","webpack://libphonenumber/../../source/findNumbers/LRUCache.js","webpack://libphonenumber/../../source/findNumbers/RegExpCache.js","webpack://libphonenumber/../../source/findNumbers/util.js","webpack://libphonenumber/../../source/findNumbers/utf-8.js","webpack://libphonenumber/../../source/findNumbers/Leniency.js","webpack://libphonenumber/../../source/findNumbers/parsePreCandidate.js","webpack://libphonenumber/../../source/findNumbers/isValidPreCandidate.js","webpack://libphonenumber/../../source/findNumbers/isValidCandidate.js","webpack://libphonenumber/../source/PhoneNumberMatcher.js","webpack://libphonenumber/../source/findNumbers.js","webpack://libphonenumber/../source/findNumbers_.js","webpack://libphonenumber/../source/searchNumbers.js","webpack://libphonenumber/../source/findPhoneNumbersInText.js","webpack://libphonenumber/../source/searchPhoneNumbersInText.js","webpack://libphonenumber/../source/AsYouType.js","webpack://libphonenumber/../source/getCountries.js","webpack://libphonenumber/../source/getExampleNumber.js","webpack://libphonenumber/../source/formatIncompletePhoneNumber.js","webpack://libphonenumber/./max/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","metadata_full_json","version","country_calling_codes","1","7","20","27","30","31","32","33","34","36","39","40","41","43","44","45","46","47","48","49","51","52","53","54","55","56","57","58","60","61","62","63","64","65","66","81","82","84","86","90","91","92","93","94","95","98","211","212","213","216","218","220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","260","261","262","263","264","265","266","267","268","269","290","291","297","298","299","350","351","352","353","354","355","356","357","358","359","370","371","372","373","374","375","376","377","378","380","381","382","383","385","386","387","389","420","421","423","500","501","502","503","504","505","506","507","508","509","590","591","592","593","594","595","596","597","598","599","670","672","673","674","675","676","677","678","679","680","681","682","683","685","686","687","688","689","690","691","692","850","852","853","855","856","880","886","960","961","962","963","964","965","966","967","968","970","971","972","973","974","975","976","977","992","993","994","995","996","998","countries","AC","AD","AE","AF","AG","AI","AL","AM","AO","AR","AS","AT","AU","AW","AX","AZ","BA","BB","BD","BE","BF","BG","BH","BI","BJ","BL","BM","BN","BO","BQ","BR","BS","BT","BW","BY","BZ","CA","CC","CD","CF","CG","CH","CI","CK","CL","CM","CN","CO","CR","CU","CV","CW","CX","CY","CZ","DE","DJ","DK","DM","DO","DZ","EC","EE","EG","EH","ER","ES","ET","FI","FJ","FK","FM","FO","FR","GA","GB","GD","GE","GF","GG","GH","GI","GL","GM","GN","GP","GQ","GR","GT","GU","GW","GY","HK","HN","HR","HT","HU","ID","IE","IL","IM","IN","IO","IQ","IR","IS","IT","JE","JM","JO","JP","KE","KG","KH","KI","KM","KN","KP","KR","KW","KY","KZ","LA","LB","LC","LI","LK","LR","LS","LT","LU","LV","LY","MA","MC","MD","ME","MF","MG","MH","MK","ML","MM","MN","MO","MP","MQ","MR","MS","MT","MU","MV","MW","MX","MY","MZ","NA","NC","NE","NF","NG","NI","NL","NO","NP","NR","NU","NZ","OM","PA","PE","PF","PG","PH","PK","PL","PM","PR","PS","PT","PW","PY","QA","RE","RO","RS","RU","RW","SA","SB","SC","SD","SE","SG","SH","SI","SJ","SK","SL","SM","SN","SO","SR","SS","ST","SV","SX","SY","SZ","TA","TC","TD","TG","TH","TJ","TK","TL","TM","TN","TO","TR","TT","TV","TW","TZ","UA","UG","US","UY","UZ","VA","VC","VE","VG","VI","VN","VU","WF","WS","XK","YE","YT","ZA","ZM","ZW","nonGeographic","800","808","870","878","881","882","883","888","979","MIN_LENGTH_FOR_NSN","MAX_LENGTH_FOR_NSN","MAX_LENGTH_COUNTRY_CODE","VALID_DIGITS","VALID_PUNCTUATION","concat","matchesEntirely","text","regular_expression","RegExp","test","ParseError","code","ParseError_classCallCheck","this","constructor","message","stack","Error","cmp","a","b","pa","pb","na","Number","nb","isNaN","metadata_V3","metadata_V4","metadata_DEFAULT_EXT_PREFIX","metadata_Metadata","Metadata","metadata","metadata_classCallCheck","metadata_is_object","is_object","metadata_type_of","metadata_validateMetadata","validateMetadata","metadata_setVersion","setVersion","keys","filter","_","countryCode","v1","v2","v3","nonGeographical","country","undefined","getCountryMetadata","callingCode","getCountryCodesForCallingCode","countryCodes","countryCallingCodes","selectNumberingPlan","hasCountry","numberingPlan","metadata_NumberingPlan","hasCallingCode","getNumberingPlanMetadata","getCountryCodeForCallingCode","IDDPrefix","defaultIDDPrefix","nationalNumberPattern","possibleLengths","formats","nationalPrefixForParsing","nationalPrefixTransformRule","leadingDigits","hasTypes","type","_type","ext","country_phone_code_to_countries","NumberingPlan","globalMetadataObject","_this","_getFormats","getDefaultCountryMetadataForRegion","map","metadata_Format","_getNationalPrefixFormattingRule","_nationalPrefixForParsing","nationalPrefix","_getNationalPrefixIsOptionalWhenFormatting","types","length","metadata_getType","_type2","metadata_Type","Format","format","_format","nationalPrefixFormattingRule","nationalPrefixIsOptionalWhenFormattingInNationalFormat","usesNationalPrefix","metadata_FIRST_GROUP_ONLY_PREFIX_PATTERN","FIRST_GROUP_ONLY_PREFIX_PATTERN","Type","metadata_typeof","metadata_getExtPrefix","metadata_getCountryCallingCode","countryCallingCode","metadata_isSupportedCountry","v4","extension_RFC3966_EXTN_PREFIX","extension_CAPTURING_EXTN_DIGITS","extension_create_extension_pattern","purpose","single_extension_characters","RFC3966_EXTN_PREFIX","extension_EXTN_PATTERNS_FOR_PARSING","extension_EXTN_PATTERNS_FOR_MATCHING","extension_EXTN_PATTERN","isViablePhoneNumber_VALID_PHONE_NUMBER_PATTERN","isViablePhoneNumber_isViablePhoneNumber","number","VALID_PHONE_NUMBER_PATTERN","DIGITS","0","2","3","4","5","6","8","9","０","１","２","３","４","５","６","７","８","９","٠","١","٢","٣","٤","٥","٦","٧","٨","٩","۰","۱","۲","۳","۴","۵","۶","۷","۸","۹","parseDigit","character","parseDigits","string","result","_iterator","_isArray","Array","isArray","_i","Symbol","iterator","_ref","next","done","digit","parseIncompletePhoneNumber_parseIncompletePhoneNumber","parseIncompletePhoneNumber_parsePhoneNumberCharacter","parsePhoneNumberCharacter","getNumberType_NON_FIXED_LINE_PHONE_TYPES","getNumberType_getNumberType","input","options","nationalNumber","phone","getNumberType_is_of_type","_NON_FIXED_LINE_PHONE","pattern","getNumberType_checkNumberLengthForType","type_info","possible_lengths","mobile_type","merged","slice","element","sort","mergeArrays","actual_length","minimum_length","isPossibleNumber_isPossibleNumber","isInternational","IDD_CAPTURING_DIGIT_PATTERN","IDD_SINGLE_IDD_PREFIX","RFC3966_parseRFC3966","_part$split2","RFC3966_slicedToArray","part","RFC3966_formatRFC3966","_ref2","validate_isValidNumber","getNumberType","format_DEFAULT_OPTIONS","formatExtension","formattedNumber","extension","format_formatNumber","format_objectSpread","format_addExtension","format_formatNationalNumber","fromCountry","countryMetadata","SINGLE_IDD_PREFIX","IDD_getIDDPrefix","humanReadable","formattedForSameCountryCallingCode","toCountryCallingCode","toCountryMetadata","fromCountryMetadata","format_formatIDDSameCountryCallingCodeNumber","format_FIRST_GROUP_PATTERN","format_formatNationalNumberUsingFormat","useInternationalSeparator","useNationalPrefixFormattingRule","internationalFormat","format_applyInternationalSeparatorStyle","formatAs","availableFormats","nationalNnumber","lastLeadingDigitsPattern","format_chooseFormatForNumber","local","trim","PhoneNumber_USE_NON_GEOGRAPHIC_COUNTRY_CODE","PhoneNumber_PhoneNumber","PhoneNumber","PhoneNumber_classCallCheck","TypeError","_metadata","PhoneNumber_isCountryCode","isPossibleNumber_isPossiblePhoneNumber","phoneNumber","PhoneNumber_objectSpread","parse_MAX_INPUT_STRING_LENGTH","parse_PHONE_NUMBER_START_PATTERN","parse_AFTER_PHONE_NUMBER_END_PATTERN","parse_USE_NON_GEOGRAPHIC_COUNTRY_CODE","parse_parse","defaultCountry","_parseInput","parse_extractFormattedPhoneNumber","with_extension_stripped","start","number_without_extension","matches","extension_extractExtension","parse_parseInput","formattedPhoneNumber","_parsePhoneNumber","defaultCallingCode","_extractCountryCallin","parse_extractCountryCallingCode","_parseNationalPhoneNu","_stripNationalPrefixA","parse_stripNationalPrefixAndCarrierCode","carrierCode","parse_parseNationalPhoneNumber","exactCountry","parse_findCountryCode","parse_parsePhoneNumber","hasSelectedNumberingPlan","valid","extended","possible","national_number","parse_result","startsAt","replace","prefixPattern","prefixMatch","capturedGroupsCount","nationalPhoneNumber","possibleCountries","es6_parse_findCountryCode","numberWithoutIDD","IDDPrefixPattern","matchedGroups","IDD_stripIDDPrefix","parsePhoneNumber_parsePhoneNumber","parsePhoneNumber_objectSpread","es6_parsePhoneNumber_parsePhoneNumber","_normalizeArguments","parsePhoneNumber_normalizeArguments","arguments","args","_Array$prototype$slic2","parsePhoneNumber_slicedToArray","arg_1","arg_2","arg_3","arg_4","parsePhoneNumber_isObject","es6_parsePhoneNumber_objectSpread","parsePhoneNumber_typeof","parsePhoneNumberFromString_parsePhoneNumberFromString","parsePhoneNumberFromString_objectSpread","error","es6_parsePhoneNumberFromString_parsePhoneNumberFromString","Node","key","prev","LRUCache_classCallCheck","LRUCache","limit","size","head","tail","cache","ensureLimit","node","remove","put","console","RegExpCache_RegExpCache","RegExpCache","RegExpCache_classCallCheck","regExp","lower","upper","trimAfterFirstMatch","regexp","index","_pZ","pZ","PZ","pNd","_pL","pL","pL_regexp","pSc","pSc_regexp","pMn","pMn_regexp","latinLetterRegexp","isLatinLetter","letter","isInvalidPunctuationSymbol","Leniency","POSSIBLE","candidate","VALID","Leniency_containsOnlyValidXChars","toString","STRICT_GROUPING","regExpCache","candidateString","Leniency_containsMoreThanOneSlashInNationalNumber","Leniency_isNationalPrefixPresentIfRequired","Leniency_checkNumberGroupingIsValid","Leniency_allNumberGroupsRemainGrouped","EXACT_GROUPING","Leniency_allNumberGroupsAreExactlyPresent","charAtIndex","charAtNextIndex","util","MatchType","NSN_MATCH","phoneNumberRegion","getCountryCode","formatRule","getNationalPrefixOptionalWhenFormatting","PhoneNumberUtil","getNationalPrefixFormattingRule","rawInputCopy","getRawInput","firstSlashInBodyIndex","secondSlashInBodyIndex","CountryCodeSource","FROM_NUMBER_WITHOUT_PLUS_SIGN","String","checkGroups","normalizedCandidate","normalizeDigits","formattedNumberGroups","Leniency_getNationalNumberGroups","alternateFormats","MetadataManager","nationalSignificantNumber","numberFormats","alternateFormat","leadingDigitsRegExp","formattingPattern","rfc3966Format","formatNumber","endIndex","startIndex","candidateGroups","NON_DIGITS_PATTERN","candidateNumberGroupIndex","substring","formattedNumberGroupIndex","fromIndex","FROM_DEFAULT_COUNTRY","region","Character","getExtension","parsePreCandidate_SECOND_NUMBER_START_PATTERN","parsePreCandidate_parsePreCandidate","SLASH_SEPARATED_DATES","TIME_STAMPS","TIME_STAMPS_SUFFIX_LEADING","isValidPreCandidate","offset","followingText","isValidCandidate_NON_PARENS","isValidCandidate_LEAD_CLASS","isValidCandidate_LEAD_CLASS_LEADING","isValidCandidate_BRACKET_PAIR_LIMIT","isValidCandidate_MATCHING_BRACKETS_ENTIRE","isValidCandidate_PUB_PAGES","PhoneNumberMatcher_INNER_MATCHES","PhoneNumberMatcher_leadLimit","PhoneNumberMatcher_punctuationLimit","PhoneNumberMatcher_digitBlockLimit","PhoneNumberMatcher_blockLimit","PhoneNumberMatcher_punctuation","PhoneNumberMatcher_digitSequence","PhoneNumberMatcher_PATTERN","PhoneNumberMatcher_UNWANTED_END_CHAR_PATTERN","PhoneNumberMatcher_MAX_SAFE_INTEGER","Math","PhoneNumberMatcher_PhoneNumberMatcher","PhoneNumberMatcher","PhoneNumberMatcher_classCallCheck","PhoneNumberMatcher_defineProperty","PhoneNumberMatcher_objectSpread","leniency","maxTries","PATTERN","exec","match","parseAndVerify","extractInnerMatch","endsAt","_INNER_MATCHES","isFirstMatch","possibleInnerMatch","group","_group","_match","MATCHING_BRACKETS_ENTIRE","PUB_PAGES","LEAD_CLASS_LEADING","previousChar","lastCharIndex","nextChar","isValidCandidate_isValidCandidate","state","lastMatch","find","hasNext","es6_findNumbers_findNumbers","matcher","results","findNumbers_findNumbers","searchNumbers_searchNumbers","findPhoneNumbersInText_findPhoneNumbersInText","findPhoneNumbersInText_getArguments","findPhoneNumbersInText_objectSpread","findPhoneNumbersInText_is_object","findPhoneNumbersInText_typeof","searchPhoneNumbersInText_searchPhoneNumbersInText","AsYouType_LONGEST_DUMMY_PHONE_NUMBER","AsYouType_repeat","AsYouType_DIGIT_PLACEHOLDER_MATCHER","AsYouType_NATIONAL_PREFIX_SEPARATORS_PATTERN","AsYouType_CREATE_CHARACTER_CLASS_PATTERN","AsYouType_CREATE_STANDALONE_DIGIT_PATTERN","AsYouType_ELIGIBLE_FORMAT_PATTERN","AsYouType_VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","AsYouType_USE_NON_GEOGRAPHIC_COUNTRY_CODE","AsYouType_AsYouType","AsYouType","optionsOrDefaultCountry","AsYouType_classCallCheck","AsYouType_typeof","isNonGeographicCallingCode","reset","formattedOutput","international","digits","nationalNumberDigits","setCountry","resetFormat","initializePhoneNumberFormatsForCountry","matchingFormats","chosenFormat","template","populatedNationalNumberTemplate","populatedNationalNumberTemplatePosition","formattedDigits","extractFormattedDigits","VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN","getFullNumber","inputDigits","getNonFormattedNationalNumber","extractedNumber","extractFormattedPhoneNumber","startInternationalNumber","nextDigits","isCountryCallingCodeAmbiguous","determineTheCountry","extractCountryCallingCode","previousNationalPrefix","extractNationalPrefix","matchFormats","formatNationalNumberWithNextDigits","attemptToFormatCompletePhoneNumber","previouslyChosenFormat","newlyChosenFormat","chooseFormat","formatNextNationalNumberDigits","reformatNationalNumber","createFormattingTemplate","ELIGIBLE_FORMAT_PATTERN","leadingDigitsPatternIndex","nationalPrefixIsMandatoryWhenFormattingInNationalFormat","leadingDigitsPatternsCount","leadingDigitsPattern","indexOf","NATIONAL_PREFIX_SEPARATORS_PATTERN","_iterator2","_isArray2","_i2","formattedNationalNumber","formattedNationalNumberWithNationalPrefix","getSeparatorAfterNationalPrefix","chooseCountryByCountryCallingCode","getTemplateForNumberFormatPattern","DIGIT_PLACEHOLDER","LONGEST_DUMMY_PHONE_NUMBER","strictPattern","nationalNumberDummyDigits","includesNationalPrefix","numberFormat","getFormatFormat","numberFormatWithNationalPrefix","repeat","_iterator3","_isArray3","_i3","_ref3","search","AsYouType_cutAndStripNonPairedParens","getNonFormattedTemplate","cutBeforeIndex","dangling_braces","cleared_string","_i4","_dangling_braces","AsYouType_stripNonPairedParens","times","getCountries_getCountries","getCountries","getExampleNumber_getExampleNumber","examples","formatIncompletePhoneNumber_formatIncompletePhoneNumber","max_call","func","_arguments","push","apply","max_parsePhoneNumber","max_parsePhoneNumberFromString","max_findNumbers","max_searchNumbers","max_findPhoneNumbersInText","max_searchPhoneNumbersInText","max_PhoneNumberMatcher","max_AsYouType","max_isSupportedCountry","max_getCountries","max_getCountryCallingCode","max_getExtPrefix","max_getExampleNumber","max_formatIncompletePhoneNumber","__webpack_exports__","create"],"mappings":"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","file":"libphonenumber-max.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"libphonenumber\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"libphonenumber\"] = factory();\n\telse\n\t\troot[\"libphonenumber\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","// This file is a workaround for a bug in web browsers' \"native\"\n// ES6 importing system which is uncapable of importing \"*.json\" files.\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\nexport default {\"version\":\"1.7.39\",\"country_calling_codes\":{\"1\":[\"US\",\"AG\",\"AI\",\"AS\",\"BB\",\"BM\",\"BS\",\"CA\",\"DM\",\"DO\",\"GD\",\"GU\",\"JM\",\"KN\",\"KY\",\"LC\",\"MP\",\"MS\",\"PR\",\"SX\",\"TC\",\"TT\",\"VC\",\"VG\",\"VI\"],\"7\":[\"RU\",\"KZ\"],\"20\":[\"EG\"],\"27\":[\"ZA\"],\"30\":[\"GR\"],\"31\":[\"NL\"],\"32\":[\"BE\"],\"33\":[\"FR\"],\"34\":[\"ES\"],\"36\":[\"HU\"],\"39\":[\"IT\",\"VA\"],\"40\":[\"RO\"],\"41\":[\"CH\"],\"43\":[\"AT\"],\"44\":[\"GB\",\"GG\",\"IM\",\"JE\"],\"45\":[\"DK\"],\"46\":[\"SE\"],\"47\":[\"NO\",\"SJ\"],\"48\":[\"PL\"],\"49\":[\"DE\"],\"51\":[\"PE\"],\"52\":[\"MX\"],\"53\":[\"CU\"],\"54\":[\"AR\"],\"55\":[\"BR\"],\"56\":[\"CL\"],\"57\":[\"CO\"],\"58\":[\"VE\"],\"60\":[\"MY\"],\"61\":[\"AU\",\"CC\",\"CX\"],\"62\":[\"ID\"],\"63\":[\"PH\"],\"64\":[\"NZ\"],\"65\":[\"SG\"],\"66\":[\"TH\"],\"81\":[\"JP\"],\"82\":[\"KR\"],\"84\":[\"VN\"],\"86\":[\"CN\"],\"90\":[\"TR\"],\"91\":[\"IN\"],\"92\":[\"PK\"],\"93\":[\"AF\"],\"94\":[\"LK\"],\"95\":[\"MM\"],\"98\":[\"IR\"],\"211\":[\"SS\"],\"212\":[\"MA\",\"EH\"],\"213\":[\"DZ\"],\"216\":[\"TN\"],\"218\":[\"LY\"],\"220\":[\"GM\"],\"221\":[\"SN\"],\"222\":[\"MR\"],\"223\":[\"ML\"],\"224\":[\"GN\"],\"225\":[\"CI\"],\"226\":[\"BF\"],\"227\":[\"NE\"],\"228\":[\"TG\"],\"229\":[\"BJ\"],\"230\":[\"MU\"],\"231\":[\"LR\"],\"232\":[\"SL\"],\"233\":[\"GH\"],\"234\":[\"NG\"],\"235\":[\"TD\"],\"236\":[\"CF\"],\"237\":[\"CM\"],\"238\":[\"CV\"],\"239\":[\"ST\"],\"240\":[\"GQ\"],\"241\":[\"GA\"],\"242\":[\"CG\"],\"243\":[\"CD\"],\"244\":[\"AO\"],\"245\":[\"GW\"],\"246\":[\"IO\"],\"247\":[\"AC\"],\"248\":[\"SC\"],\"249\":[\"SD\"],\"250\":[\"RW\"],\"251\":[\"ET\"],\"252\":[\"SO\"],\"253\":[\"DJ\"],\"254\":[\"KE\"],\"255\":[\"TZ\"],\"256\":[\"UG\"],\"257\":[\"BI\"],\"258\":[\"MZ\"],\"260\":[\"ZM\"],\"261\":[\"MG\"],\"262\":[\"RE\",\"YT\"],\"263\":[\"ZW\"],\"264\":[\"NA\"],\"265\":[\"MW\"],\"266\":[\"LS\"],\"267\":[\"BW\"],\"268\":[\"SZ\"],\"269\":[\"KM\"],\"290\":[\"SH\",\"TA\"],\"291\":[\"ER\"],\"297\":[\"AW\"],\"298\":[\"FO\"],\"299\":[\"GL\"],\"350\":[\"GI\"],\"351\":[\"PT\"],\"352\":[\"LU\"],\"353\":[\"IE\"],\"354\":[\"IS\"],\"355\":[\"AL\"],\"356\":[\"MT\"],\"357\":[\"CY\"],\"358\":[\"FI\",\"AX\"],\"359\":[\"BG\"],\"370\":[\"LT\"],\"371\":[\"LV\"],\"372\":[\"EE\"],\"373\":[\"MD\"],\"374\":[\"AM\"],\"375\":[\"BY\"],\"376\":[\"AD\"],\"377\":[\"MC\"],\"378\":[\"SM\"],\"380\":[\"UA\"],\"381\":[\"RS\"],\"382\":[\"ME\"],\"383\":[\"XK\"],\"385\":[\"HR\"],\"386\":[\"SI\"],\"387\":[\"BA\"],\"389\":[\"MK\"],\"420\":[\"CZ\"],\"421\":[\"SK\"],\"423\":[\"LI\"],\"500\":[\"FK\"],\"501\":[\"BZ\"],\"502\":[\"GT\"],\"503\":[\"SV\"],\"504\":[\"HN\"],\"505\":[\"NI\"],\"506\":[\"CR\"],\"507\":[\"PA\"],\"508\":[\"PM\"],\"509\":[\"HT\"],\"590\":[\"GP\",\"BL\",\"MF\"],\"591\":[\"BO\"],\"592\":[\"GY\"],\"593\":[\"EC\"],\"594\":[\"GF\"],\"595\":[\"PY\"],\"596\":[\"MQ\"],\"597\":[\"SR\"],\"598\":[\"UY\"],\"599\":[\"CW\",\"BQ\"],\"670\":[\"TL\"],\"672\":[\"NF\"],\"673\":[\"BN\"],\"674\":[\"NR\"],\"675\":[\"PG\"],\"676\":[\"TO\"],\"677\":[\"SB\"],\"678\":[\"VU\"],\"679\":[\"FJ\"],\"680\":[\"PW\"],\"681\":[\"WF\"],\"682\":[\"CK\"],\"683\":[\"NU\"],\"685\":[\"WS\"],\"686\":[\"KI\"],\"687\":[\"NC\"],\"688\":[\"TV\"],\"689\":[\"PF\"],\"690\":[\"TK\"],\"691\":[\"FM\"],\"692\":[\"MH\"],\"850\":[\"KP\"],\"852\":[\"HK\"],\"853\":[\"MO\"],\"855\":[\"KH\"],\"856\":[\"LA\"],\"880\":[\"BD\"],\"886\":[\"TW\"],\"960\":[\"MV\"],\"961\":[\"LB\"],\"962\":[\"JO\"],\"963\":[\"SY\"],\"964\":[\"IQ\"],\"965\":[\"KW\"],\"966\":[\"SA\"],\"967\":[\"YE\"],\"968\":[\"OM\"],\"970\":[\"PS\"],\"971\":[\"AE\"],\"972\":[\"IL\"],\"973\":[\"BH\"],\"974\":[\"QA\"],\"975\":[\"BT\"],\"976\":[\"MN\"],\"977\":[\"NP\"],\"992\":[\"TJ\"],\"993\":[\"TM\"],\"994\":[\"AZ\"],\"995\":[\"GE\"],\"996\":[\"KG\"],\"998\":[\"UZ\"]},\"countries\":{\"AC\":[\"247\",\"00\",\"(?:[01589]\\\\d|[46])\\\\d{4}\",[5,6],0,0,0,0,0,0,0,[[\"6[2-467]\\\\d{3}\",[5]],[\"4\\\\d{4}\",[5]],0,0,0,0,[\"(?:0[1-9]|[1589]\\\\d)\\\\d{4}\",[6]]]],\"AD\":[\"376\",\"00\",\"(?:1|6\\\\d)\\\\d{7}|[136-9]\\\\d{5}\",[6,8,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"[136-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],0,0,0,0,0,0,[[\"[78]\\\\d{5}\",[6]],[\"690\\\\d{6}|[36]\\\\d{5}\",[6,9]],[\"180[02]\\\\d{4}\",[8]],[\"[19]\\\\d{5}\",[6]]]],\"AE\":[\"971\",\"00\",\"(?:[4-7]\\\\d|9[0-689])\\\\d{7}|800\\\\d{2,9}|[2-4679]\\\\d{7}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{2,9})\",\"$1 $2\",[\"60|8\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[236]|[479][2-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{5})\",\"$1 $2 $3\",[\"[479]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[2-4679][2-8]\\\\d{6}\",[8]],[\"5[024-68]\\\\d{7}\",[9]],[\"400\\\\d{6}|800\\\\d{2,9}\"],[\"900[02]\\\\d{5}\",[9]],0,0,[\"600[25]\\\\d{5}\",[9]],0,0,[\"700[05]\\\\d{5}\",[9]]]],\"AF\":[\"93\",\"00\",\"[2-7]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[25][0-8]|[34][0-4]|6[0-5])[2-9]\\\\d{6}\"],[\"7\\\\d{8}\"]]],\"AG\":[\"1\",\"011\",\"(?:268|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([457]\\\\d{6})$\",\"268$1\",0,\"268\",[[\"268(?:4(?:6[0-38]|84)|56[0-2])\\\\d{4}\"],[\"268(?:464|7(?:1[3-9]|2\\\\d|3[246]|64|[78][0-689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"26840[69]\\\\d{4}\"],[\"26848[01]\\\\d{4}\"]]],\"AI\":[\"1\",\"011\",\"(?:264|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2457]\\\\d{6})$\",\"264$1\",0,\"264\",[[\"2644(?:6[12]|9[78])\\\\d{4}\"],[\"264(?:235|476|5(?:3[6-9]|8[1-4])|7(?:29|72))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AL\":[\"355\",\"00\",\"(?:700\\\\d\\\\d|900)\\\\d{3}|8\\\\d{5,7}|(?:[2-5]|6\\\\d)\\\\d{7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,4})\",\"$1 $2\",[\"80|9\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2358][2-5]|4\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[23578]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[2358](?:[16-9]\\\\d[2-9]|[2-5][2-9]\\\\d)|4(?:[2-57-9][2-9]|6\\\\d)\\\\d)\\\\d{4}\",[8]],[\"6(?:[78][2-9]|9\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{4}\",[7]],[\"900[1-9]\\\\d\\\\d\",[6]],[\"700[2-9]\\\\d{4}\",[8]],0,0,0,0,[\"808[1-9]\\\\d\\\\d\",[6]]]],\"AM\":[\"374\",\"00\",\"(?:[1-489]\\\\d|55|60|77)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0 $1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2|3[12]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"1|47\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[3-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:1[0-25]|47)\\\\d|2(?:2[2-46]|3[1-8]|4[2-69]|5[2-7]|6[1-9]|8[1-7])|3[12]2)\\\\d{5}\"],[\"(?:33|4[1349]|55|77|88|9[13-9])\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[016]\\\\d{5}\"],0,0,0,0,[\"60(?:2[78]|3[5-9]|4[02-9]|5[0-46-9]|[6-8]\\\\d|90)\\\\d{4}\"],[\"80[1-4]\\\\d{5}\"]]],\"AO\":[\"244\",\"00\",\"[29]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[29]\"]]],0,0,0,0,0,0,[[\"2\\\\d(?:[0134][25-9]|[25-9]\\\\d)\\\\d{5}\"],[\"9[1-49]\\\\d{7}\"]]],\"AR\":[\"54\",\"00\",\"11\\\\d{8}|(?:[2368]|9\\\\d)\\\\d{9}\",[10,11],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$1 $2-$3\",[\"2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])\",\"2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"1\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[23]\"],\"0$1\",1],[\"(\\\\d)(\\\\d{4})(\\\\d{2})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9(?:2[2-469]|3[3-578])\",\"9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))\",\"9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]\",\"9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 15-$3-$4\",[\"91\"],\"0$1\",0,\"$1 $2 $3-$4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 15-$3-$4\",[\"9\"],\"0$1\",0,\"$1 $2 $3-$4\"]],\"0\",0,\"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?\",\"9$1\",0,0,[[\"(?:2954|3(?:777|865))[2-8]\\\\d{5}|3(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\\\d{5}|(?:(?:11[1-8]|670)\\\\d|2(?:2(?:1[2-6]|3[3-6])|(?:3[06]|49)4|6(?:04|1[2-7]|4[4-6])|9(?:[17][4-6]|9[3-6]))|3(?:(?:36|64)4|4(?:1[2-7]|[235][4-6]|84)|5(?:1[2-8]|[38][4-6])|8(?:1[2-6]|[58][3-6]|7[24-6])))\\\\d{6}|(?:2(?:284|657|9(?:20|66))|3(?:4(?:8[27]|92)|755|878))[2-7]\\\\d{5}|(?:2(?:[28]0|37|6[36]|9[48])|3(?:62|7[069]|8[03]))[45]\\\\d{6}|(?:2(?:2(?:2[59]|44|52)|3(?:26|4[24])|473|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|(?:2(?:(?:26|62)2|3(?:02|2[03])|477|9(?:42|83))|3(?:4(?:[47]6|62|89)|5(?:41|64)|873))[2-6]\\\\d{5}|2(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|475|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|(?:2(?:2(?:57|81)|3(?:24|46|92)|9(?:01|23|64))|3(?:329|4(?:42|71)|5(?:25|37|4[347]|71)|7(?:18|5[17])|888))[3-6]\\\\d{5}|(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|[24]5|5[25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[03-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[145]|4[13]|5[468]|7[2-5]|8[26])|8(?:2[5-7]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\",[10]],[\"9(?:2954|3(?:777|865))[2-8]\\\\d{5}|93(?:7(?:1[15]|81)|8(?:21|4[16]|69|9[12]))[46]\\\\d{5}|(?:675\\\\d|9(?:11[1-8]\\\\d|2(?:2(?:1[2-6]|3[3-6])|(?:3[06]|49)4|6(?:04|1[2-7]|4[4-6])|9(?:[17][4-6]|9[3-6]))|3(?:(?:36|64)4|4(?:1[2-7]|[235][4-6]|84)|5(?:1[2-8]|[38][4-6])|8(?:1[2-6]|[58][3-6]|7[24-6]))))\\\\d{6}|9(?:2(?:284|657|9(?:20|66))|3(?:4(?:8[27]|92)|755|878))[2-7]\\\\d{5}|9(?:2(?:[28]0|37|6[36]|9[48])|3(?:62|7[069]|8[03]))[45]\\\\d{6}|9(?:2(?:2(?:2[59]|44|52)|3(?:26|4[24])|473|9(?:[07]2|2[26]|34|46))|3327)[45]\\\\d{5}|9(?:2(?:(?:26|62)2|3(?:02|2[03])|477|9(?:42|83))|3(?:4(?:[47]6|62|89)|5(?:41|64)|873))[2-6]\\\\d{5}|92(?:2(?:21|4[23]|6[145]|7[1-4]|8[356]|9[267])|3(?:16|3[13-8]|43|5[346-8]|9[3-5])|475|6(?:2[46]|4[78]|5[1568])|9(?:03|2[1457-9]|3[1356]|4[08]|[56][23]|82))4\\\\d{5}|9(?:2(?:2(?:57|81)|3(?:24|46|92)|9(?:01|23|64))|3(?:329|4(?:42|71)|5(?:25|37|4[347]|71)|7(?:18|5[17])|888))[3-6]\\\\d{5}|9(?:2(?:2(?:02|2[3467]|4[156]|5[45]|6[6-8]|91)|3(?:1[47]|[24]5|5[25]|96)|47[48]|625|932)|3(?:38[2578]|4(?:0[0-24-9]|3[78]|4[457]|58|6[03-9]|72|83|9[136-8])|5(?:2[124]|[368][23]|4[2689]|7[2-6])|7(?:16|2[15]|3[145]|4[13]|5[468]|7[2-5]|8[26])|8(?:2[5-7]|3[278]|4[3-5]|5[78]|6[1-378]|[78]7|94)))[4-6]\\\\d{5}\"],[\"800\\\\d{7}\",[10]],[\"60[04579]\\\\d{7}\",[10]],0,0,[\"810\\\\d{7}\",[10]]]],\"AS\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|684|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([267]\\\\d{6})$\",\"684$1\",0,\"684\",[[\"6846(?:22|33|44|55|77|88|9[19])\\\\d{4}\"],[\"684(?:2(?:5[2468]|72)|7(?:3[13]|70))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"AT\":[\"43\",\"00\",\"1\\\\d{3,12}|2\\\\d{6,12}|43(?:(?:0\\\\d|5[02-9])\\\\d{3,9}|2\\\\d{4,5}|[3467]\\\\d{4}|8\\\\d{4,6}|9\\\\d{4,7})|5\\\\d{4,12}|8\\\\d{7,12}|9\\\\d{8,12}|(?:[367]\\\\d|4[0-24-9])\\\\d{4,11}\",[4,5,6,7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3,12})\",\"$1 $2\",[\"1(?:11|[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})\",\"$1 $2\",[\"517\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"5[079]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,10})\",\"$1 $2\",[\"(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,9})\",\"$1 $2\",[\"[2-467]|5[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,7})\",\"$1 $2 $3\",[\"5\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:11\\\\d|[2-9]\\\\d{3,11})|(?:316|463|(?:51|66|73)2)\\\\d{3,10}|(?:2(?:1[467]|2[13-8]|5[2357]|6[1-46-8]|7[1-8]|8[124-7]|9[1458])|3(?:1[1-578]|3[23568]|4[5-7]|5[1378]|6[1-38]|8[3-68])|4(?:2[1-8]|35|7[1368]|8[2457])|5(?:2[1-8]|3[357]|4[147]|5[12578]|6[37])|6(?:13|2[1-47]|4[135-8]|5[468])|7(?:2[1-8]|35|4[13478]|5[68]|6[16-8]|7[1-6]|9[45]))\\\\d{4,10}\"],[\"6(?:5[0-3579]|6[013-9]|[7-9]\\\\d)\\\\d{4,10}\",[7,8,9,10,11,12,13]],[\"800\\\\d{6,10}\",[9,10,11,12,13]],[\"9(?:0[01]|3[019])\\\\d{6,10}\",[9,10,11,12,13]],0,0,0,0,[\"5(?:0[1-9]|17|[79]\\\\d)\\\\d{2,10}|7[28]0\\\\d{6,10}\",[5,6,7,8,9,10,11,12,13]],[\"8(?:10|2[018])\\\\d{6,10}|828\\\\d{5}\",[8,9,10,11,12,13]]]],\"AU\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d{7,8}|8[0-24-9]\\\\d{7})|(?:[2-478]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{4,7}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"16\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"16\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"14|[45]\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[2378]\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:30|[89])\"]]],\"0\",0,\"0|(183[12])\",0,0,0,[[\"(?:[237]\\\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\\\d|4[0-4]))|(?:[6-8]\\\\d{3}|9(?:[02-9]\\\\d\\\\d|1(?:[0-57-9]\\\\d|6[0135-9])))\\\\d))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,[\"16\\\\d{3,7}\",[5,6,7,8,9]],[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"AW\":[\"297\",\"00\",\"(?:[25-79]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[25-9]\"]]],0,0,0,0,0,0,[[\"5(?:2\\\\d|8[1-9])\\\\d{4}\"],[\"(?:290|5[69]\\\\d|6(?:[03]0|22|4[0-2]|[69]\\\\d)|7(?:[34]\\\\d|7[07])|9(?:6[45]|9[4-8]))\\\\d{4}\"],[\"800\\\\d{4}\"],[\"900\\\\d{4}\"],0,0,0,0,[\"(?:28\\\\d|501)\\\\d{4}\"]]],\"AX\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"2\\\\d{4,9}|35\\\\d{4,5}|(?:60\\\\d\\\\d|800)\\\\d{4,6}|7\\\\d{5,11}|(?:[14]\\\\d|3[0-46-9]|50)\\\\d{4,8}\",[5,6,7,8,9,10,11,12],0,\"0\",0,0,0,0,\"18\",[[\"18[1-8]\\\\d{3,6}\",[6,7,8,9]],[\"(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"AZ\":[\"994\",\"00\",\"365\\\\d{6}|(?:[124579]\\\\d|60|88)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[12]|365\",\"[12]|365\",\"[12]|365(?:[0-46-9]|5[0-35-9])\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[3-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"365(?:[0-46-9]\\\\d|5[0-35-9])\\\\d{4}|(?:1[28]\\\\d|2(?:[045]2|1[24]|2[2-4]|33|6[23]))\\\\d{6}\"],[\"(?:36554|99[2-9]\\\\d\\\\d)\\\\d{4}|(?:4[04]|5[015]|60|7[07])\\\\d{7}\"],[\"88\\\\d{7}\"],[\"900200\\\\d{3}\"]]],\"BA\":[\"387\",\"00\",\"6\\\\d{8}|(?:[35689]\\\\d|49|70)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[1-3]|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2-$3\",[\"[3-5]|6[56]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[05-79][2-9]|1[4579]|[23][24-9]|4[2-4689]|8[2457-9])|49[2-579]|5(?:0[2-49]|[13][2-9]|[268][2-4679]|4[4689]|5[2-79]|7[2-69]|9[2-4689]))\\\\d{5}\",[8]],[\"6040[0-4]\\\\d{4}|6(?:03|[1-356]|44|7\\\\d)\\\\d{6}\"],[\"8[08]\\\\d{6}\",[8]],[\"9[0246]\\\\d{6}\",[8]],0,0,[\"70(?:3[0146]|[56]0)\\\\d{4}\",[8]],0,0,[\"8[12]\\\\d{6}\",[8]]]],\"BB\":[\"1\",\"011\",\"(?:246|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"246$1\",0,\"246\",[[\"246(?:2(?:2[78]|7[0-4])|4(?:1[024-6]|2\\\\d|3[2-9])|5(?:20|[34]\\\\d|54|7[1-3])|6(?:2\\\\d|38)|7[35]7|9(?:1[89]|63))\\\\d{4}\"],[\"246(?:2(?:[356]\\\\d|4[0-57-9]|8[0-79])|45\\\\d|69[5-7]|8(?:[2-5]\\\\d|83))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:246976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"246(?:292|367|4(?:1[7-9]|3[01]|44|67)|7(?:36|53))\\\\d{4}\"],0,[\"24631\\\\d{5}\"]]],\"BD\":[\"880\",\"00\",\"[13469]\\\\d{9}|8[0-79]\\\\d{7,8}|[2-7]\\\\d{8}|[2-9]\\\\d{7}|[3-689]\\\\d{6}|[57-9]\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1-$2\",[\"31[5-7]|[459]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1-$2\",[\"3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,6})\",\"$1-$2\",[\"[13-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{7,8})\",\"$1-$2\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:03[56]|224)|4(?:22[25]|653))\\\\d{3,4}|(?:4(?:31\\\\d\\\\d|[46]23)|5(?:222|32[37]))\\\\d{3}(?:\\\\d{2})?|(?:3(?:42[47]|529|823)|4(?:027|525|658)|(?:56|73)2|6257|9[35]1)\\\\d{3}|(?:3(?:02[348]|22[35]|324|422)|4(?:22[67]|32[236-9]|6(?:2[46]|5[57])|953)|5526|6(?:024|6655)|81)\\\\d{4,5}|(?:2(?:7(?:1[0-267]|2[0-289]|3[0-29]|4[01]|5[1-3]|6[013]|7[0178]|91)|8(?:0[125]|1[1-6]|2[0157-9]|3[1-69]|41|6[1-35]|7[1-5]|8[1-8]|9[0-6])|9(?:0[0-2]|1[0-4]|2[568]|3[3-6]|5[5-7]|6[01367]|7[15]|8[014-9]))|3(?:0(?:2[025-79]|3[2-4])|22[12]|32[2356]|824)|4(?:02[09]|22[348]|32[045]|523|6(?:27|54))|666(?:22|53)|8(?:4[12]|[5-7]2)|9(?:[024]2|81))\\\\d{4}|(?:2[45]\\\\d\\\\d|3(?:1(?:2[5-7]|[5-7])|425|822)|4(?:033|1\\\\d|[257]1|332|4(?:2[246]|5[25])|6(?:25|56|62)|8(?:23|54)|92[2-5])|5(?:02[03489]|22[457]|32[569]|42[46]|6(?:[18]|53)|724|826)|6(?:023|2(?:2[2-5]|5[3-5]|8)|32[3478]|42[34]|52[47]|6(?:[18]|6(?:2[34]|5[24]))|[78]2[2-5]|92[2-6])|7(?:02|21\\\\d|[3-589]1|6[12]|72[24])|8(?:0|217|3[12]|[5-7]1)|9[24]1)\\\\d{5}|(?:(?:3[2-8]|5[2-57-9]|6[03-589])1|4[4689][18])\\\\d{5}|[59]1\\\\d{5}\"],[\"(?:1[13-9]\\\\d|644)\\\\d{7}|(?:3[78]|44|66)[02-9]\\\\d{7}\",[10]],[\"80[03]\\\\d{7}\",[10]],0,0,0,0,0,[\"96(?:0[469]|1[0-47]|3[389]|6[69]|7[78])\\\\d{6}\",[10]]]],\"BE\":[\"32\",\"00\",\"4\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:80|9)0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[239]|4[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[15-8]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"4\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"80[2-8]\\\\d{5}|(?:1[0-69]|[23][2-8]|4[23]|5\\\\d|6[013-57-9]|71|8[1-79]|9[2-4])\\\\d{6}\",[8]],[\"4[5-9]\\\\d{7}\",[9]],[\"800[1-9]\\\\d{4}\",[8]],[\"(?:70(?:2[0-57]|3[0457]|44|69|7[0579])|90(?:0[0-35-8]|1[36]|2[0-3568]|3[0135689]|4[2-68]|5[1-68]|6[0-378]|7[23568]|9[34679]))\\\\d{4}\",[8]],0,0,[\"78(?:0[57]|1[0458]|2[25]|3[5-8]|48|[56]0|7[078])\\\\d{4}\",[8]],0,0,[\"7879\\\\d{4}\",[8]]]],\"BF\":[\"226\",\"00\",\"[025-7]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[025-7]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:49|5[23]|6[56]|9[016-9])|4(?:4[569]|5[4-6]|6[56]|7[0179])|5(?:[34]\\\\d|50|6[5-7]))\\\\d{4}\"],[\"(?:0[127]|5[1-8]|[67]\\\\d)\\\\d{6}\"]]],\"BG\":[\"359\",\"00\",\"[2-7]\\\\d{6,7}|[89]\\\\d{6,8}|2\\\\d{5}\",[6,7,8,9],[[\"(\\\\d)(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"43[1-6]|70[1-9]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:70|8)0\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"43[1-7]|7\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[48]|9[08]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2\\\\d{5,7}|(?:43[1-6]|70[1-9])\\\\d{4,5}|(?:[36]\\\\d|4[124-7]|[57][1-9]|8[1-6]|9[1-7])\\\\d{5,6}\",[6,7,8]],[\"43[07-9]\\\\d{5}|(?:48|8[7-9]\\\\d|9(?:8\\\\d|9[69]))\\\\d{6}\",[8,9]],[\"800\\\\d{5}\",[8]],[\"90\\\\d{6}\",[8]],0,0,0,0,0,[\"700\\\\d{5}\",[8]]]],\"BH\":[\"973\",\"00\",\"[136-9]\\\\d{7}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[13679]|8[047]\"]]],0,0,0,0,0,0,[[\"(?:1(?:3[1356]|6[0156]|7\\\\d)\\\\d|6(?:1[16]\\\\d|500|6(?:0\\\\d|3[12]|44|7[7-9]|88)|9[69][69])|7(?:1(?:11|78)|7\\\\d\\\\d))\\\\d{4}\"],[\"(?:3(?:[1-79]\\\\d|8[0-47-9])\\\\d|6(?:3(?:00|33|6[16])|6(?:3[03-9]|[69]\\\\d|7[0-6])))\\\\d{4}\"],[\"80\\\\d{6}\"],[\"(?:87|9[014578])\\\\d{6}\"],0,0,0,0,0,[\"84\\\\d{6}\"]]],\"BI\":[\"257\",\"00\",\"(?:[267]\\\\d|31)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2367]\"]]],0,0,0,0,0,0,[[\"22\\\\d{6}\"],[\"(?:29|31|6[1289]|7[125-9])\\\\d{6}\"]]],\"BJ\":[\"229\",\"00\",\"[2689]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"]]],0,0,0,0,0,0,[[\"2(?:02|1[037]|2[45]|3[68])\\\\d{5}\"],[\"(?:6\\\\d|9[013-9])\\\\d{6}\"],0,0,0,0,[\"81\\\\d{6}\"],0,[\"857[58]\\\\d{4}\"]]],\"BL\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:2[7-9]|5[12]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"BM\":[\"1\",\"011\",\"(?:441|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-8]\\\\d{6})$\",\"441$1\",0,\"441\",[[\"441(?:2(?:02|23|[3479]\\\\d|61)|[46]\\\\d\\\\d|5(?:4\\\\d|60|89)|824)\\\\d{4}\"],[\"441(?:[37]\\\\d|5[0-39])\\\\d{5}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"BN\":[\"673\",\"00\",\"[2-578]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[[\"22[0-7]\\\\d{4}|(?:2[013-9]|[34]\\\\d|5[0-25-9])\\\\d{5}\"],[\"(?:22[89]|[78]\\\\d\\\\d)\\\\d{4}\"],0,0,0,0,0,0,[\"5[34]\\\\d{5}\"]]],\"BO\":[\"591\",\"00(?:1\\\\d)?\",\"(?:[2-467]\\\\d\\\\d|8001)\\\\d{5}\",[8,9],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[23]|4[46]\"]],[\"(\\\\d{8})\",\"$1\",[\"[67]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,\"0(1\\\\d)?\",0,0,0,[[\"(?:2(?:2\\\\d\\\\d|5(?:11|[258]\\\\d|9[67])|6(?:12|2\\\\d|9[34])|8(?:2[34]|39|62))|3(?:3\\\\d\\\\d|4(?:6\\\\d|8[24])|8(?:25|42|5[257]|86|9[25])|9(?:[27]\\\\d|3[2-4]|4[248]|5[24]|6[2-6]))|4(?:4\\\\d\\\\d|6(?:11|[24689]\\\\d|72)))\\\\d{4}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"8001[07]\\\\d{4}\",[9]]]],\"BQ\":[\"599\",\"00\",\"(?:[34]1|7\\\\d)\\\\d{5}\",[7],0,0,0,0,0,0,\"[347]\",[[\"(?:318[023]|41(?:6[023]|70)|7(?:1[578]|50)\\\\d)\\\\d{3}\"],[\"(?:31(?:8[14-8]|9[14578])|416[14-9]|7(?:0[01]|7[07]|8\\\\d|9[056])\\\\d)\\\\d{3}\"]]],\"BR\":[\"55\",\"00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)\",\"(?:[1-46-9]\\\\d\\\\d|5(?:[0-46-9]\\\\d|5[0-24679]))\\\\d{8}|[1-9]\\\\d{9}|[3589]\\\\d{8}|[34]\\\\d{7}\",[8,9,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"300|4(?:0[02]|37)\",\"4(?:02|37)0|[34]00\"]],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:[358]|90)0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2-$3\",[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1 $2-$3\",[\"[16][1-9]|[2-57-9]\"],\"($1)\"]],\"0\",0,\"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\\\d{10,11}))?\",\"$2\",0,0,[[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-5]\\\\d{7}\",[10]],[\"(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])(?:7|9\\\\d)\\\\d{7}\",[10,11]],[\"800\\\\d{6,7}\",[9,10]],[\"300\\\\d{6}|[59]00\\\\d{6,7}\",[9,10]],0,0,0,0,0,[\"300\\\\d{7}|[34]00\\\\d{5}|4(?:02|37)0\\\\d{4}\",[8,10]]]],\"BS\":[\"1\",\"011\",\"(?:242|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-8]\\\\d{6})$\",\"242$1\",0,\"242\",[[\"242(?:3(?:02|[236][1-9]|4[0-24-9]|5[0-68]|7[347]|8[0-4]|9[2-467])|461|502|6(?:0[1-4]|12|2[013]|[45]0|7[67]|8[78]|9[89])|7(?:02|88))\\\\d{4}\"],[\"242(?:3(?:5[79]|7[56]|95)|4(?:[23][1-9]|4[1-35-9]|5[1-8]|6[2-8]|7\\\\d|81)|5(?:2[45]|3[35]|44|5[1-46-9]|65|77)|6[34]6|7(?:27|38)|8(?:0[1-9]|1[02-9]|2\\\\d|[89]9))\\\\d{4}\"],[\"242300\\\\d{4}|8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"242225[0-46-9]\\\\d{3}\"]]],\"BT\":[\"975\",\"00\",\"[17]\\\\d{7}|[2-8]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-68]|7[246]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[67]|7\"]]],0,0,0,0,0,0,[[\"(?:2[3-6]|[34][5-7]|5[236]|6[2-46]|7[246]|8[2-4])\\\\d{5}\",[7]],[\"(?:1[67]|77)\\\\d{6}\",[8]]]],\"BW\":[\"267\",\"00\",\"90\\\\d{5}|(?:[2-6]|7\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"90\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-6]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:2(?:4[0-48]|6[0-24]|9[0578])|3(?:1[0-35-9]|55|[69]\\\\d|7[013])|4(?:6[03]|7[1267]|9[0-5])|5(?:3[0389]|4[0489]|7[1-47]|88|9[0-49])|6(?:2[1-35]|5[149]|8[067]))\\\\d{4}\",[7]],[\"77200\\\\d{3}|7(?:[1-6]\\\\d|7[014-8])\\\\d{5}\",[8]],0,[\"90\\\\d{5}\",[7]],0,0,0,0,[\"79(?:1(?:[01]\\\\d|20)|2[0-2]\\\\d)\\\\d{3}\",[8]]]],\"BY\":[\"375\",\"810\",\"(?:[12]\\\\d|33|44|902)\\\\d{7}|8(?:0[0-79]\\\\d{5,7}|[1-7]\\\\d{9})|8(?:1[0-489]|[5-79]\\\\d)\\\\d{7}|8[1-79]\\\\d{6,7}|8[0-79]\\\\d{5}|8\\\\d{5}\",[6,7,8,9,10,11],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"800\"],\"8 $1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,4})\",\"$1 $2 $3\",[\"800\"],\"8 $1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{3})\",\"$1 $2-$3\",[\"1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])\",\"1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"1(?:[56]|7[467])|2[1-3]\"],\"8 0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-4]\"],\"8 0$1\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"8 $1\"]],\"8\",0,\"0|80?\",0,0,0,[[\"(?:1(?:5(?:1[1-5]|[24]\\\\d|6[2-4]|9[1-7])|6(?:[235]\\\\d|4[1-7])|7\\\\d\\\\d)|2(?:1(?:[246]\\\\d|3[0-35-9]|5[1-9])|2(?:[235]\\\\d|4[0-8])|3(?:[26]\\\\d|3[02-79]|4[024-7]|5[03-7])))\\\\d{5}\",[9]],[\"(?:2(?:5[5-79]|9[1-9])|(?:33|44)\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{3,7}|8(?:0[13]|20\\\\d)\\\\d{7}\"],[\"(?:810|902)\\\\d{7}\",[10]],0,0,0,0,[\"249\\\\d{6}\",[9]]],\"8~10\"],\"BZ\":[\"501\",\"00\",\"(?:0800\\\\d|[2-8])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-8]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"0\"]]],0,0,0,0,0,0,[[\"(?:236|732)\\\\d{4}|[2-578][02]\\\\d{5}\",[7]],[\"6[0-35-7]\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]]],\"CA\":[\"1\",\"011\",\"(?:[2-8]\\\\d|90)\\\\d{8}\",[10],0,\"1\",0,0,0,0,0,[[\"(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|65)|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\\\d{6}\"],0,0,0,[\"600[2-9]\\\\d{6}\"]]],\"CC\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\\\d|70[23]|959))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CD\":[\"243\",\"00\",\"[189]\\\\d{8}|[1-68]\\\\d{6}\",[7,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[1-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"12\\\\d{7}|[1-6]\\\\d{6}\"],[\"88\\\\d{5}|(?:8[0-2459]|9[017-9])\\\\d{7}\"]]],\"CF\":[\"236\",\"00\",\"(?:[27]\\\\d{3}|8776)\\\\d{4}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[278]\"]]],0,0,0,0,0,0,[[\"2[12]\\\\d{6}\"],[\"7[0257]\\\\d{6}\"],0,[\"8776\\\\d{4}\"]]],\"CG\":[\"242\",\"00\",\"222\\\\d{6}|(?:0\\\\d|80)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"801\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[02]\"]]],0,0,0,0,0,0,[[\"222[1-589]\\\\d{5}\"],[\"0[14-6]\\\\d{7}\"],0,[\"80(?:0\\\\d\\\\d|11[0-4])\\\\d{4}\"]]],\"CH\":[\"41\",\"00\",\"8\\\\d{11}|[2-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8[047]|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-79]|81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[12467]|3[1-4]|4[134]|5[256]|6[12]|[7-9]1)\\\\d{7}\"],[\"7[35-9]\\\\d{7}\"],[\"800\\\\d{6}\"],[\"90[016]\\\\d{6}\"],[\"878\\\\d{6}\"],0,[\"5[18]\\\\d{7}\"],[\"74[0248]\\\\d{6}\"],0,[\"84[0248]\\\\d{6}\"]]],\"CI\":[\"225\",\"00\",\"[02-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[02-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:0[023]|1[02357]|[23][045]|4[03-5])|3(?:0[06]|1[069]|[2-4][07]|5[09]|6[08]))\\\\d{5}\"],[\"97[0-3]\\\\d{5}|(?:0[1-9]|[457]\\\\d|6[014-9]|8[4-9]|95)\\\\d{6}\"]]],\"CK\":[\"682\",\"00\",\"[2-578]\\\\d{4}\",[5],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"[2-578]\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[13-7]|4[1-5])\\\\d{3}\"],[\"[578]\\\\d{4}\"]]],\"CL\":[\"56\",\"(?:0|1(?:1[0-69]|2[0-57]|5[13-58]|69|7[0167]|8[018]))0\",\"12300\\\\d{6}|6\\\\d{9,10}|[2-9]\\\\d{8}\",[9,10,11],[[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"21\"],\"($1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[23]\"],\"($1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"9[2-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"60|8\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"60\"]]],0,0,0,0,0,0,[[\"(?:2(?:1962|3(?:2\\\\d\\\\d|300))|80[1-9]\\\\d\\\\d)\\\\d{4}|(?:22|3[2-5]|[47][1-35]|5[1-3578]|6[13-57]|8[1-9]|9[2-9])\\\\d{7}\",[9]],[\"\",[9]],[\"(?:123|8)00\\\\d{6}\",[9,11]],0,0,0,0,0,[\"44\\\\d{7}\",[9]],[\"600\\\\d{7,8}\",[10,11]]]],\"CM\":[\"237\",\"00\",\"(?:[26]\\\\d\\\\d|88)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"88\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[26]\"]]],0,0,0,0,0,0,[[\"2(?:22|33|4[23])\\\\d{6}\",[9]],[\"6[5-9]\\\\d{7}\",[9]],[\"88\\\\d{6}\",[8]]]],\"CN\":[\"86\",\"00|1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d00\",\"1[1279]\\\\d{8,9}|2\\\\d{9}(?:\\\\d{2})?|[12]\\\\d{6,7}|86\\\\d{6}|(?:1[03-68]\\\\d|6)\\\\d{7,9}|(?:[3-579]\\\\d|8[0-57-9])\\\\d{6,9}\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5,6})\",\"$1 $2\",[\"(?:10|2[0-57-9])[19]\",\"(?:10|2[0-57-9])(?:10|9[56])\",\"(?:10|2[0-57-9])(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]\",\"(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))[19]\",\"85[23](?:10|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:10|9[56])\",\"85[23](?:100|95)|(?:3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:100|9[56])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"(?:4|80)0\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"10|2(?:[02-57-9]|1[1-9])\",\"10|2(?:[02-57-9]|1[1-9])\",\"10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-578]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"1[3-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"[12]\"],\"0$1\",1]],\"0\",0,\"0|(1(?:[12]\\\\d|79|9[0235-7])\\\\d\\\\d)\",0,0,0,[[\"(?:10(?:[02-79]\\\\d\\\\d|[18](?:0[1-9]|[1-9]\\\\d))|21(?:[18](?:0[1-9]|[1-9]\\\\d)|[2-79]\\\\d\\\\d))\\\\d{5}|(?:43[35]|754)\\\\d{7,8}|8(?:078\\\\d{7}|51\\\\d{7,8})|(?:10|(?:2|85)1|43[35]|754)(?:100\\\\d\\\\d|95\\\\d{3,4})|(?:2[02-57-9]|3(?:11|7[179])|4(?:[15]1|3[12])|5(?:1\\\\d|2[37]|3[12]|51|7[13-79]|9[15])|7(?:[39]1|5[57]|6[09])|8(?:71|98))(?:[02-8]\\\\d{7}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{3})?|[1-9]\\\\d{5})|[1-9]\\\\d{6})|9(?:[0-46-9]\\\\d{6}|5\\\\d{3}(?:\\\\d(?:\\\\d{2})?)?))|(?:3(?:1[02-9]|35|49|5\\\\d|7[02-68]|9[1-68])|4(?:1[02-9]|2[179]|3[46-9]|5[2-9]|6[47-9]|7\\\\d|8[23])|5(?:3[03-9]|4[36]|5[02-9]|6[1-46]|7[028]|80|9[2-46-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[17]\\\\d|2[248]|3[04-9]|4[3-6]|5[0-3689]|6[2368]|9[02-9])|8(?:1[236-8]|2[5-7]|3\\\\d|5[2-9]|7[02-9]|8[36-8]|9[1-7])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))(?:[02-8]\\\\d{6}|1(?:0(?:0\\\\d\\\\d(?:\\\\d{2})?|[1-9]\\\\d{4})|[1-9]\\\\d{5})|9(?:[0-46-9]\\\\d{5}|5\\\\d{3,5}))\",[7,8,9,10,11]],[\"1740[0-5]\\\\d{6}|1(?:[38]\\\\d|4[57]|5[0-35-9]|6[25-7]|7[0-35-8]|9[189])\\\\d{8}\",[11]],[\"(?:(?:10|21)8|8)00\\\\d{7}\",[10,12]],[\"16[08]\\\\d{5}\",[8]],0,0,0,0,0,[\"400\\\\d{7}|950\\\\d{7,8}|(?:10|2[0-57-9]|3(?:[157]\\\\d|35|49|9[1-68])|4(?:[17]\\\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\\\d|4[13]|5[1-5]))96\\\\d{3,4}\",[7,8,9,10,11]]],\"00\"],\"CO\":[\"57\",\"00(?:4(?:[14]4|56)|[579])\",\"(?:1\\\\d|3)\\\\d{9}|[124-8]\\\\d{7}\",[8,10,11],[[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"[14][2-9]|[25-8]\"],\"($1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{7})\",\"$1-$2-$3\",[\"1\"],\"0$1\",0,\"$1 $2 $3\"]],\"0\",0,\"0([3579]|4(?:[14]4|56))?\",0,0,0,[[\"[124-8][2-9]\\\\d{6}\",[8]],[\"3333(?:0(?:0\\\\d|1[0-5])|[4-9]\\\\d\\\\d)\\\\d{3}|33(?:00|3[0-24-9])\\\\d{6}|3(?:0[0-5]|1\\\\d|2[0-3]|5[01]|70)\\\\d{7}\",[10]],[\"1800\\\\d{7}\",[11]],[\"19(?:0[01]|4[78])\\\\d{7}\",[11]]]],\"CR\":[\"506\",\"00\",\"(?:8\\\\d|90)\\\\d{8}|[24-8]\\\\d{7}\",[8,10],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24-7]|8[3-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[89]\"]]],0,0,\"(19(?:0[0-2468]|1[09]|20|66|77|99))\",0,0,0,[[\"210[7-9]\\\\d{4}|2(?:[024-7]\\\\d|1[1-9])\\\\d{5}\",[8]],[\"6500[01]\\\\d{3}|5(?:0[01]|7[0-3])\\\\d{5}|(?:6[0-4]|7[0-3]|8[3-9])\\\\d{6}\",[8]],[\"800\\\\d{7}\",[10]],[\"90[059]\\\\d{7}\",[10]],0,0,0,0,[\"(?:210[0-6]|4\\\\d{3}|5100)\\\\d{4}\",[8]]]],\"CU\":[\"53\",\"119\",\"[27]\\\\d{6,7}|[34]\\\\d{5,7}|(?:5|8\\\\d\\\\d)\\\\d{7}\",[6,7,8,10],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"2[1-4]|[34]\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{6,7})\",\"$1 $2\",[\"7\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[23]|48)\\\\d{4,6}|(?:31|4[36]|8(?:0[25]|78)\\\\d)\\\\d{6}|(?:2[1-4]|4[1257]|7\\\\d)\\\\d{5,6}\"],[\"5\\\\d{7}\",[8]],[\"800\\\\d{7}\",[10]],0,0,0,0,0,0,[\"807\\\\d{7}\",[10]]]],\"CV\":[\"238\",\"0\",\"(?:[2-59]\\\\d\\\\d|800)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[2-589]\"]]],0,0,0,0,0,0,[[\"2(?:2[1-7]|3[0-8]|4[12]|5[1256]|6\\\\d|7[1-3]|8[1-5])\\\\d{4}\"],[\"(?:[34][36]|5[1-389]|9\\\\d)\\\\d{5}\"],[\"800\\\\d{4}\"]]],\"CW\":[\"599\",\"00\",\"(?:[34]1|60|(?:7|9\\\\d)\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[3467]\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9[4-8]\"]]],0,0,0,0,0,\"[69]\",[[\"9(?:4(?:3[0-5]|4[14]|6\\\\d)|50\\\\d|7(?:2[014]|3[02-9]|4[4-9]|6[357]|77|8[7-9])|8(?:3[39]|[46]\\\\d|7[01]|8[57-9]))\\\\d{4}\"],[\"953[01]\\\\d{4}|9(?:5[12467]|6[5-9])\\\\d{5}\"],0,0,0,0,0,[\"955\\\\d{5}\",[8]],0,[\"60[0-2]\\\\d{4}\",[7]]]],\"CX\":[\"61\",\"001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011\",\"1(?:[0-79]\\\\d|8[0-24-9])\\\\d{7}|(?:[148]\\\\d\\\\d|550)\\\\d{6}|1\\\\d{5,7}\",[6,7,8,9,10],0,\"0\",0,\"0|([59]\\\\d{7})$\",\"8$1\",0,0,[[\"8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\\\d|7(?:0[01]|1[0-2])|958))\\\\d{3}\",[9]],[\"483[0-3]\\\\d{5}|4(?:[0-3]\\\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\\\d{6}\",[9]],[\"180(?:0\\\\d{3}|2)\\\\d{3}\",[7,10]],[\"190[0-26]\\\\d{6}\",[10]],0,0,0,0,[\"(?:14(?:5(?:1[0458]|[23][458])|71\\\\d)|550\\\\d\\\\d)\\\\d{4}\",[9]],[\"13(?:00\\\\d{3}|45[0-4])\\\\d{3}|13\\\\d{4}\",[6,8,10]]],\"0011\"],\"CY\":[\"357\",\"00\",\"(?:[279]\\\\d|[58]0)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[257-9]\"]]],0,0,0,0,0,0,[[\"2[2-6]\\\\d{6}\"],[\"9[4-79]\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[09]\\\\d{5}\"],[\"700\\\\d{5}\"],0,[\"(?:50|77)\\\\d{6}\"],0,0,[\"80[1-9]\\\\d{5}\"]]],\"CZ\":[\"420\",\"00\",\"(?:[2-578]\\\\d|60)\\\\d{7}|9\\\\d{8,11}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]|9[015-7]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[1257-9]|4[16-9]|5[13-9])\\\\d{7}\"],[\"(?:60[1-8]|7(?:0[2-5]|[2379]\\\\d))\\\\d{6}\"],[\"800\\\\d{6}\"],[\"9(?:0[05689]|76)\\\\d{6}\"],[\"70[01]\\\\d{6}\"],0,[\"9(?:5\\\\d|7[2-4])\\\\d{6}\"],0,[\"9[17]0\\\\d{6}\"],[\"8[134]\\\\d{7}\"]]],\"DE\":[\"49\",\"00\",\"[2579]\\\\d{5,14}|49(?:[05]\\\\d{10}|[46][1-8]\\\\d{4,9})|49(?:[0-25]\\\\d|3[1-689]|7[1-7])\\\\d{4,8}|49(?:[0-2579]\\\\d|[34][1-9]|6[0-8])\\\\d{3}|49\\\\d{3,4}|(?:1|[368]\\\\d|4[0-8])\\\\d{3,13}\",[4,5,6,7,8,9,10,11,12,13,14,15],[[\"(\\\\d{2})(\\\\d{3,13})\",\"$1 $2\",[\"3[02]|40|[68]9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,12})\",\"$1 $2\",[\"2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\",\"2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2,11})\",\"$1 $2\",[\"[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]\",\"[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"138\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{2,10})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,11})\",\"$1 $2\",[\"181\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{4,10})\",\"$1 $2 $3\",[\"1(?:3|80)|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,8})\",\"$1 $2\",[\"1[67]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7,12})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"185\",\"1850\",\"18500\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"18[68]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{6})\",\"$1 $2\",[\"15[0568]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{7})\",\"$1 $2\",[\"15[1279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{8})\",\"$1 $2\",[\"18\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{7,8})\",\"$1 $2 $3\",[\"1(?:6[023]|7)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{2})(\\\\d{7})\",\"$1 $2 $3\",[\"15[279]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{8})\",\"$1 $2 $3\",[\"15\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:32|49[4-6]\\\\d)\\\\d{9}|49[0-7]\\\\d{3,9}|(?:[34]0|[68]9)\\\\d{3,13}|(?:2(?:0[1-689]|[1-3569]\\\\d|4[0-8]|7[1-7]|8[0-7])|3(?:[3569]\\\\d|4[0-79]|7[1-7]|8[1-8])|4(?:1[02-9]|[2-48]\\\\d|5[0-6]|6[0-8]|7[0-79])|5(?:0[2-8]|[124-6]\\\\d|[38][0-8]|[79][0-7])|6(?:0[02-9]|[1-358]\\\\d|[47][0-8]|6[1-9])|7(?:0[2-8]|1[1-9]|[27][0-7]|3\\\\d|[4-6][0-8]|8[0-5]|9[013-7])|8(?:0[2-9]|1[0-79]|2\\\\d|3[0-46-9]|4[0-6]|5[013-9]|6[1-8]|7[0-8]|8[0-24-6])|9(?:0[6-9]|[1-4]\\\\d|[589][0-7]|6[0-8]|7[0-467]))\\\\d{3,12}\",[5,6,7,8,9,10,11,12,13,14,15]],[\"15[0-25-9]\\\\d{8}|1(?:6[023]|7\\\\d)\\\\d{7,8}\",[10,11]],[\"800\\\\d{7,12}\",[10,11,12,13,14,15]],[\"(?:137[7-9]|900(?:[135]|9\\\\d))\\\\d{6}\",[10,11]],[\"700\\\\d{8}\",[11]],0,[\"18(?:1\\\\d{5,11}|[2-9]\\\\d{8})\",[8,9,10,11,12,13,14]],[\"16(?:4\\\\d{1,10}|[89]\\\\d{1,11})\",[4,5,6,7,8,9,10,11,12,13,14]],0,[\"180\\\\d{5,11}|13(?:7[1-6]\\\\d\\\\d|8)\\\\d{4}\",[7,8,9,10,11,12,13,14]]]],\"DJ\":[\"253\",\"00\",\"(?:2\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[27]\"]]],0,0,0,0,0,0,[[\"2(?:1[2-5]|7[45])\\\\d{5}\"],[\"77\\\\d{6}\"]]],\"DK\":[\"45\",\"00\",\"[2-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:[2-7]\\\\d|8[126-9]|9[1-46-9])\\\\d{6}\"],[\"\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"]]],\"DM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|767|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"767$1\",0,\"767\",[[\"767(?:2(?:55|66)|4(?:2[01]|4[0-25-9])|50[0-4]|70[1-3])\\\\d{4}\"],[\"767(?:2(?:[2-4689]5|7[5-7])|31[5-7]|61[1-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DO\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"8[024]9\",[[\"8(?:[04]9[2-9]\\\\d\\\\d|29(?:2(?:[0-59]\\\\d|6[04-9]|7[0-27]|8[0237-9])|3(?:[0-35-9]\\\\d|4[7-9])|[45]\\\\d\\\\d|6(?:[0-27-9]\\\\d|[3-5][1-9]|6[0135-8])|7(?:0[013-9]|[1-37]\\\\d|4[1-35689]|5[1-4689]|6[1-57-9]|8[1-79]|9[1-8])|8(?:0[146-9]|1[0-48]|[248]\\\\d|3[1-79]|5[01589]|6[013-68]|7[124-8]|9[0-8])|9(?:[0-24]\\\\d|3[02-46-9]|5[0-79]|60|7[0169]|8[57-9]|9[02-9])))\\\\d{4}\"],[\"8[024]9[2-9]\\\\d{6}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"DZ\":[\"213\",\"00\",\"(?:[1-4]|[5-79]\\\\d|80)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"9619\\\\d{5}|(?:1\\\\d|2[013-79]|3[0-8]|4[0135689])\\\\d{6}\"],[\"(?:5(?:4[0-29]|5\\\\d|6[01])|6(?:[569]\\\\d|7[0-6])|7[7-9]\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"80[3-689]1\\\\d{5}\",[9]],0,0,0,0,[\"98[23]\\\\d{6}\",[9]],[\"80[12]1\\\\d{5}\",[9]]]],\"EC\":[\"593\",\"00\",\"1800\\\\d{6,7}|(?:[2-7]|9\\\\d)\\\\d{7}\",[8,9,10,11],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2-$3\",[\"[2-7]\"],\"(0$1)\",0,\"$1-$2-$3\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"[2-7][2-7]\\\\d{6}\",[8]],[\"964[0-2]\\\\d{5}|9(?:39|[57][89]|6[0-37-9]|[89]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{6,7}\",[10,11]],0,0,0,0,0,[\"[2-7]890\\\\d{4}\",[8]]]],\"EE\":[\"372\",\"00\",\"8\\\\d{9}|[4578]\\\\d{7}|(?:[3-8]\\\\d\\\\d|900)\\\\d{4}\",[7,8,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]\",\"[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]\"]],[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[45]|8(?:00|[1-4])\",\"[45]|8(?:00[1-9]|[1-4])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"80\"]]],0,0,0,0,0,0,[[\"(?:3[23589]|4[3-8]|6\\\\d|7[1-9]|88)\\\\d{5}\",[7]],[\"(?:5\\\\d|8[1-4])\\\\d{6}|5(?:(?:[02]\\\\d|5[0-478])\\\\d|1(?:[0-8]\\\\d|95)|6(?:4[0-4]|5[1-589]))\\\\d{3}\",[7,8]],[\"800(?:(?:0\\\\d\\\\d|1)\\\\d|[2-9])\\\\d{3}\"],[\"(?:40\\\\d\\\\d|900)\\\\d{4}\",[7,8]],[\"70[0-2]\\\\d{5}\",[8]]]],\"EG\":[\"20\",\"00\",\"[189]\\\\d{8,9}|[24-6]\\\\d{8}|[135]\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{7,8})\",\"$1 $2\",[\"[23]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,7})\",\"$1 $2\",[\"1[35]|[4-6]|8[2468]|9[235-7]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[189]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:15\\\\d|57[23])\\\\d{5,6}|(?:13[23]|(?:2[2-4]|3)\\\\d|4(?:0[2-5]|[578][23]|64)|5(?:0[2-7]|5\\\\d)|6[24-689]3|8(?:2[2-57]|4[26]|6[237]|8[2-4])|9(?:2[27]|3[24]|52|6[2356]|7[2-4]))\\\\d{6}\",[8,9]],[\"1[0-25]\\\\d{8}\",[10]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]]]],\"EH\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],0,\"0\",0,0,0,0,\"528[89]\",[[\"528[89]\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[016-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"ER\":[\"291\",\"00\",\"[178]\\\\d{6}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[178]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1[12568]|[24]0|55|6[146])|8\\\\d\\\\d)\\\\d{4}\"],[\"(?:17[1-3]|7\\\\d\\\\d)\\\\d{4}\"]]],\"ES\":[\"34\",\"00\",\"(?:51|[6-9]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]00\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-9]\"]]],0,0,0,0,0,0,[[\"96906(?:0[0-8]|1[1-9]|[2-9]\\\\d)\\\\d\\\\d|9(?:69(?:0[0-57-9]|[1-9]\\\\d)|73(?:[0-8]\\\\d|9[1-9]))\\\\d{4}|(?:8(?:[1356]\\\\d|[28][0-8]|[47][1-9])|9(?:[135]\\\\d|[268][0-8]|4[1-9]|7[124-9]))\\\\d{6}\"],[\"9(?:6906(?:09|10)|7390\\\\d\\\\d)\\\\d\\\\d|(?:6\\\\d|7[1-48])\\\\d{7}\"],[\"[89]00\\\\d{6}\"],[\"80[367]\\\\d{6}\"],[\"70\\\\d{7}\"],0,[\"51\\\\d{7}\"],0,0,[\"90[12]\\\\d{6}\"]]],\"ET\":[\"251\",\"00\",\"(?:11|[2-59]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-59]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:11(?:1(?:1[124]|2[2-57]|3[1-5]|5[5-8]|8[6-8])|2(?:13|3[6-8]|5[89]|7[05-9]|8[2-6])|3(?:2[01]|3[0-289]|4[1289]|7[1-4]|87)|4(?:1[69]|3[2-49]|4[0-3]|6[5-8])|5(?:1[578]|44|5[0-4])|6(?:1[78]|2[69]|39|4[5-7]|5[1-5]|6[0-59]|8[015-8]))|2(?:2(?:11[1-9]|22[0-7]|33\\\\d|44[1467]|66[1-68])|5(?:11[124-6]|33[2-8]|44[1467]|55[14]|66[1-3679]|77[124-79]|880))|3(?:3(?:11[0-46-8]|(?:22|55)[0-6]|33[0134689]|44[04]|66[01467])|4(?:44[0-8]|55[0-69]|66[0-3]|77[1-5]))|4(?:6(?:119|22[0-24-7]|33[1-5]|44[13-69]|55[14-689]|660|88[1-4])|7(?:(?:11|22)[1-9]|33[13-7]|44[13-6]|55[1-689]))|5(?:7(?:227|55[05]|(?:66|77)[14-8])|8(?:11[149]|22[013-79]|33[0-68]|44[013-8]|550|66[1-5]|77\\\\d)))\\\\d{4}\"],[\"9\\\\d{8}\"]]],\"FI\":[\"358\",\"00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))\",\"[1-35689]\\\\d{4}|7\\\\d{10,11}|(?:[124-7]\\\\d|3[0-46-9])\\\\d{8}|[1-9]\\\\d{5,8}\",[5,6,7,8,9,10,11,12],[[\"(\\\\d)(\\\\d{4,9})\",\"$1 $2\",[\"[2568][1-8]|3(?:0[1-9]|[1-9])|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"[12]00|[368]|70[07-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,8})\",\"$1 $2\",[\"[1245]|7[135]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6,10})\",\"$1 $2\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,\"1[03-79]|[2-9]\",[[\"(?:1[3-79][1-8]|[235689][1-8]\\\\d)\\\\d{2,6}\",[5,6,7,8,9]],[\"(?:4[0-8]|50)\\\\d{4,8}\",[6,7,8,9,10]],[\"800\\\\d{4,6}\",[7,8,9]],[\"[67]00\\\\d{5,6}\",[8,9]],0,0,[\"20\\\\d{4,8}|60[12]\\\\d{5,6}|7(?:099\\\\d{4,5}|5[03-9]\\\\d{3,7})|20[2-59]\\\\d\\\\d|(?:606|7(?:0[78]|1|3\\\\d))\\\\d{7}|(?:10|29|3[09]|70[1-5]\\\\d)\\\\d{4,8}\"]],\"00\"],\"FJ\":[\"679\",\"0(?:0|52)\",\"45\\\\d{5}|(?:0800\\\\d|[235-9])\\\\d{6}\",[7,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[235-9]|45\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]]],0,0,0,0,0,0,[[\"603\\\\d{4}|(?:3[0-5]|6[25-7]|8[58])\\\\d{5}\",[7]],[\"(?:[279]\\\\d|45|5[01568]|8[034679])\\\\d{5}\",[7]],[\"0800\\\\d{7}\",[11]]],\"00\"],\"FK\":[\"500\",\"00\",\"[2-7]\\\\d{4}\",[5],0,0,0,0,0,0,0,[[\"[2-47]\\\\d{4}\"],[\"[56]\\\\d{4}\"]]],\"FM\":[\"691\",\"00\",\"[39]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[39]\"]]],0,0,0,0,0,0,[[\"(?:3[2357]0[1-9]|9[2-6]\\\\d\\\\d)\\\\d{3}\"],[\"(?:3[2357]0[1-9]|9[2-7]\\\\d\\\\d)\\\\d{3}\"]]],\"FO\":[\"298\",\"00\",\"(?:[2-8]\\\\d|90)\\\\d{4}\",[6],[[\"(\\\\d{6})\",\"$1\",[\"[2-9]\"]]],0,0,\"(10(?:01|[12]0|88))\",0,0,0,[[\"(?:20|[34]\\\\d|8[19])\\\\d{4}\"],[\"(?:[27][1-9]|5\\\\d)\\\\d{4}\"],[\"80[257-9]\\\\d{3}\"],[\"90(?:[13-5][15-7]|2[125-7]|99)\\\\d\\\\d\"],0,0,0,0,[\"(?:6[0-36]|88)\\\\d{4}\"]]],\"FR\":[\"33\",\"00\",\"[1-9]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"],\"0 $1\"],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"[1-79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[1-35]\\\\d|4[1-9])\\\\d{7}\"],[\"700\\\\d{6}|(?:6\\\\d|7[3-9])\\\\d{7}\"],[\"80[0-5]\\\\d{6}\"],[\"836(?:0[0-36-9]|[1-9]\\\\d)\\\\d{4}|8(?:1[2-9]|2[2-47-9]|3[0-57-9]|[569]\\\\d|8[0-35-9])\\\\d{6}\"],0,0,[\"80[6-9]\\\\d{6}\"],0,[\"9\\\\d{8}\"],[\"8(?:1[01]|2[0156]|84)\\\\d{6}\"]]],\"GA\":[\"241\",\"00\",\"(?:[067]\\\\d|11)\\\\d{6}|[2-7]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-7]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"11|[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]]],0,0,\"0(11\\\\d{6}|6[256]\\\\d{6}|7[47]\\\\d{6})\",\"$1\",0,0,[[\"[01]1\\\\d{6}\",[8]],[\"(?:0[2-7]|6[256]|7[47])\\\\d{6}|[2-7]\\\\d{6}\"]]],\"GB\":[\"44\",\"00\",\"[1-357-9]\\\\d{9}|[18]\\\\d{8}|8\\\\d{6}\",[7,9,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"800\",\"8001\",\"80011\",\"800111\",\"8001111\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"845\",\"8454\",\"84546\",\"845464\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"1(?:38|5[23]|69|76|94)\",\"1(?:(?:38|69)7|5(?:24|39)|768|946)\",\"1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"1(?:[2-69][02-9]|[78])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[25]|7(?:0|6[02-9])\",\"[25]|7(?:0|6(?:[03-9]|2[356]))\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1389]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:1(?:3[0-58]|4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])|3(?:0\\\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\\\d\\\\d|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\\\d)\\\\d\\\\d|1(?:[0-7]\\\\d\\\\d|80[04589])))|2(?:0[01378]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\\\d{3})\\\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\\\d)|76\\\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\\\d|7[4-79])|295[5-7]|35[34]\\\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\\\d{3}\",[9,10]],[\"7(?:457[0-57-9]|700[01]|911[028])\\\\d{5}|7(?:[1-3]\\\\d\\\\d|4(?:[0-46-9]\\\\d|5[0-689])|5(?:0[0-8]|[13-9]\\\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\\\d|8[02-9]|9[0-689])|8(?:[014-9]\\\\d|[23][0-8])|9(?:[024-9]\\\\d|1[02-9]|3[0-689]))\\\\d{6}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[2-49]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]],0,\" x\"],\"GD\":[\"1\",\"011\",\"(?:473|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"473$1\",0,\"473\",[[\"473(?:2(?:3[0-2]|69)|3(?:2[89]|86)|4(?:[06]8|3[5-9]|4[0-49]|5[5-79]|73|90)|63[68]|7(?:58|84)|800|938)\\\\d{4}\"],[\"473(?:4(?:0[2-79]|1[04-9]|2[0-5]|58)|5(?:2[01]|3[3-8])|901)\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GE\":[\"995\",\"00\",\"(?:[3-57]\\\\d\\\\d|800)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"32\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[57]\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[348]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:[256]\\\\d|4[124-9]|7[0-4])|4(?:1\\\\d|2[2-7]|3[1-79]|4[2-8]|7[239]|9[1-7]))\\\\d{6}\"],[\"5(?:0555[5-9]|757(?:7[7-9]|8[01]))\\\\d{3}|5(?:000\\\\d|(?:52|75)00|8(?:58[89]|888))\\\\d{4}|5(?:0050|1111|2222|3333)[0-4]\\\\d{3}|(?:5(?:[14]4|5[0157-9]|68|7[0147-9]|9[1-35-9])|790)\\\\d{6}\"],[\"800\\\\d{6}\"],0,0,0,0,0,[\"706\\\\d{6}\"]]],\"GF\":[\"594\",\"00\",\"(?:[56]94|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"594(?:[023]\\\\d|1[01]|4[03-9]|5[6-9]|6[0-3]|80|9[014])\\\\d{4}\"],[\"694(?:[0-249]\\\\d|3[0-48])\\\\d{4}\"],0,0,0,0,0,0,[\"976\\\\d{6}\"]]],\"GG\":[\"44\",\"00\",\"(?:1481|[357-9]\\\\d{3})\\\\d{6}|8\\\\d{6}(?:\\\\d{2})?\",[7,9,10],0,\"0\",0,\"0|([25-9]\\\\d{5})$\",\"1481$1\",0,0,[[\"1481[25-9]\\\\d{5}\",[10]],[\"7(?:(?:781|839)\\\\d|911[17])\\\\d{5}\",[10]],[\"80[08]\\\\d{7}|800\\\\d{6}|8001111\"],[\"(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\\\d|8[0-3]))\\\\d{7}|845464\\\\d\",[7,10]],[\"70\\\\d{8}\",[10]],0,[\"(?:3[0347]|55)\\\\d{8}\",[10]],[\"76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\",[10]],[\"56\\\\d{8}\",[10]]]],\"GH\":[\"233\",\"00\",\"(?:[235]\\\\d{3}|800)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[235]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"3(?:[167]2[0-6]|22[0-5]|32[0-3]|4(?:2[013-9]|3[01])|52[0-7]|82[0-2])\\\\d{5}|3(?:[0-8]8|9[28])0\\\\d{5}|3(?:0[237]|[1-9]7)\\\\d{6}\",[9]],[\"(?:2[0346-8]\\\\d|5(?:[0457]\\\\d|6[01]|9[1-6]))\\\\d{6}\",[9]],[\"800\\\\d{5}\",[8]]]],\"GI\":[\"350\",\"00\",\"[256]\\\\d{7}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"2\"]]],0,0,0,0,0,0,[[\"21(?:6[24-7]\\\\d|90[0-2])\\\\d{3}|2(?:00|2[25])\\\\d{5}\"],[\"(?:5[146-8]\\\\d|6(?:06|29))\\\\d{5}\"]]],\"GL\":[\"299\",\"00\",\"(?:19|[2-689]\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"19|[2-689]\"]]],0,0,0,0,0,0,[[\"(?:19|3[1-7]|6[14689]|8[14-79]|9\\\\d)\\\\d{4}\"],[\"(?:[25][1-9]|4[2-9])\\\\d{4}\"],[\"80\\\\d{4}\"],0,0,0,0,0,[\"3[89]\\\\d{4}\"]]],\"GM\":[\"220\",\"00\",\"[2-9]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:4(?:[23]\\\\d\\\\d|4(?:1[024679]|[6-9]\\\\d))|5(?:5(?:3\\\\d|4[0-7])|6[67]\\\\d|7(?:1[04]|2[035]|3[58]|48))|8\\\\d{3})\\\\d{3}\"],[\"(?:[23679]\\\\d|5[0-389])\\\\d{5}\"]]],\"GN\":[\"224\",\"00\",\"(?:30|6\\\\d\\\\d|722)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"3\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[67]\"]]],0,0,0,0,0,0,[[\"30(?:24|3[12]|4[1-35-7]|5[13]|6[189]|[78]1|9[1478])\\\\d{4}\",[8]],[\"6[02356]\\\\d{7}\",[9]],0,0,0,0,0,0,[\"722\\\\d{6}\",[9]]]],\"GP\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\\\d)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"GQ\":[\"240\",\"00\",\"222\\\\d{6}|(?:3\\\\d|55|[89]0)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235]\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[89]\"]]],0,0,0,0,0,0,[[\"33[0-24-9]\\\\d[46]\\\\d{4}|3(?:33|5\\\\d)\\\\d[7-9]\\\\d{4}\"],[\"(?:222|55[015])\\\\d{6}\"],[\"80\\\\d[1-9]\\\\d{5}\"],[\"90\\\\d[1-9]\\\\d{5}\"]]],\"GR\":[\"30\",\"00\",\"5005000\\\\d{3}|(?:[2689]\\\\d|70)\\\\d{8}\",[10],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"21|7\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2689]\"]]],0,0,0,0,0,0,[[\"2(?:1\\\\d\\\\d|2(?:2[1-46-9]|[36][1-8]|4[1-7]|5[1-4]|7[1-5]|[89][1-9])|3(?:1\\\\d|2[1-57]|[35][1-3]|4[13]|7[1-7]|8[124-6]|9[1-79])|4(?:1\\\\d|2[1-8]|3[1-4]|4[13-5]|6[1-578]|9[1-5])|5(?:1\\\\d|[29][1-4]|3[1-5]|4[124]|5[1-6])|6(?:1\\\\d|[269][1-6]|3[1245]|4[1-7]|5[13-9]|7[14]|8[1-5])|7(?:1\\\\d|2[1-5]|3[1-6]|4[1-7]|5[1-57]|6[135]|9[125-7])|8(?:1\\\\d|2[1-5]|[34][1-4]|9[1-57]))\\\\d{6}\"],[\"68[57-9]\\\\d{7}|(?:69|94)\\\\d{8}\"],[\"800\\\\d{7}\"],[\"90[19]\\\\d{7}\"],[\"70\\\\d{8}\"],0,[\"5005000\\\\d{3}\"],0,0,[\"8(?:0[16]|12|25)\\\\d{7}\"]]],\"GT\":[\"502\",\"00\",\"(?:1\\\\d{3}|[2-7])\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"[267][2-9]\\\\d{6}\",[8]],[\"[3-5]\\\\d{7}\",[8]],[\"18[01]\\\\d{8}\",[11]],[\"19\\\\d{9}\",[11]]]],\"GU\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|671|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([3-9]\\\\d{6})$\",\"671$1\",0,\"671\",[[\"671(?:3(?:00|3[39]|4[349]|55|6[26])|4(?:00|56|7[1-9]|8[0236-9])|5(?:55|6[2-5]|88)|6(?:3[2-578]|4[24-9]|5[34]|78|8[235-9])|7(?:[0479]7|2[0167]|3[45]|8[7-9])|8(?:[2-57-9]8|6[48])|9(?:2[29]|6[79]|7[1279]|8[7-9]|9[78]))\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"GW\":[\"245\",\"00\",\"[49]\\\\d{8}|4\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"40\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"]]],0,0,0,0,0,0,[[\"443\\\\d{6}\",[9]],[\"9(?:5\\\\d|6[569]|77)\\\\d{6}\",[9]],0,0,0,0,0,0,[\"40\\\\d{5}\",[7]]]],\"GY\":[\"592\",\"001\",\"(?:862\\\\d|9008)\\\\d{3}|(?:[2-46]\\\\d|77)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:1[6-9]|2[0-35-9]|3[1-4]|5[3-9]|6\\\\d|7[0-24-79])|3(?:2[25-9]|3\\\\d)|4(?:4[0-24]|5[56])|77[1-57])\\\\d{4}\"],[\"6\\\\d{6}\"],[\"(?:289|862)\\\\d{4}\"],[\"9008\\\\d{3}\"]]],\"HK\":[\"852\",\"00(?:30|5[09]|[126-9]?)\",\"8[0-46-9]\\\\d{6,7}|9\\\\d{4}(?:\\\\d(?:\\\\d(?:\\\\d{4})?)?)?|(?:[235-79]\\\\d|46)\\\\d{6}\",[5,6,7,8,9,11],[[\"(\\\\d{3})(\\\\d{2,5})\",\"$1 $2\",[\"900\",\"9003\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]|8[1-4]|9(?:0[1-9]|[1-8])\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"9\"]]],0,0,0,0,0,0,[[\"(?:384[0-24]|58(?:0[1-8]|1[2-9]))\\\\d{4}|(?:2(?:[13-8]\\\\d|2[013-9]|9[0-24-9])|3(?:[1569][0-24-9]|4[0-246-9]|7[0-24-69]|89))\\\\d{5}\",[8]],[\"(?:46(?:0[0-6]|1[0-2]|4[0-57-9])|5730|(?:626|848)[01]|707[1-5]|929[03-9])\\\\d{4}|(?:5(?:[1-59][0-46-9]|6[0-4689]|7[0-2469])|6(?:0[1-9]|[13-59]\\\\d|[268][0-57-9]|7[0-79])|9(?:0[1-9]|1[02-9]|[2358][0-8]|[467]\\\\d))\\\\d{5}\",[8]],[\"800\\\\d{6}\",[9]],[\"900(?:[0-24-9]\\\\d{7}|3\\\\d{1,4})\",[5,6,7,8,11]],[\"8(?:1[0-4679]\\\\d|2(?:[0-36]\\\\d|7[0-4])|3(?:[034]\\\\d|2[09]|70))\\\\d{4}\",[8]],0,[\"30(?:0[1-9]|[15-7]\\\\d|2[047]|89)\\\\d{4}\",[8]],[\"7(?:1(?:0[0-38]|1[0-3679]|3[013]|69|9[136])|2(?:[02389]\\\\d|1[18]|7[27-9])|3(?:[0-38]\\\\d|7[0-369]|9[2357-9])|47\\\\d|5(?:[178]\\\\d|5[0-5])|6(?:0[0-7]|2[236-9]|[35]\\\\d)|7(?:[27]\\\\d|8[7-9])|8(?:[23689]\\\\d|7[1-9])|9(?:[025]\\\\d|6[0-246-8]|7[0-36-9]|8[238]))\\\\d{4}\",[8]]],\"00\"],\"HN\":[\"504\",\"00\",\"8\\\\d{10}|[237-9]\\\\d{7}\",[8,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"[237-9]\"]]],0,0,0,0,0,0,[[\"2(?:2(?:0[019]|1[1-36]|[23]\\\\d|4[04-6]|5[57]|6[24]|7[0135689]|8[01346-9]|9[0-2])|4(?:07|2[3-59]|3[13-689]|4[0-68]|5[1-35])|5(?:0[78]|16|4[03-5]|5\\\\d|6[014-6]|74|80)|6(?:[056]\\\\d|17|2[07]|3[04]|4[0-378]|[78][0-8]|9[01])|7(?:6[46-9]|7[02-9]|8[034]|91)|8(?:79|8[0-357-9]|9[1-57-9]))\\\\d{4}\",[8]],[\"[37-9]\\\\d{7}\",[8]],[\"8002\\\\d{7}\",[11]]]],\"HR\":[\"385\",\"00\",\"(?:[24-69]\\\\d|3[0-79])\\\\d{7}|80\\\\d{5,7}|[1-79]\\\\d{7}|6\\\\d{5,6}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"6[01]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-5]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[0-3]|3[1-5]|4[02-47-9]|5[1-3])\\\\d{6,7}\",[8,9]],[\"9(?:751\\\\d{5}|8\\\\d{6,7})|9(?:0[1-9]|[1259]\\\\d|7[0679])\\\\d{6}\",[8,9]],[\"80[01]\\\\d{4,6}\",[7,8,9]],[\"6[01459]\\\\d{6}|6[01]\\\\d{4,5}\",[6,7,8]],[\"7[45]\\\\d{6}\",[8]],0,[\"62\\\\d{6,7}|72\\\\d{6}\",[8,9]]]],\"HT\":[\"509\",\"00\",\"[2-489]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-489]\"]]],0,0,0,0,0,0,[[\"2(?:2\\\\d|5[1-5]|81|9[149])\\\\d{5}\"],[\"[34]\\\\d{7}\"],[\"8\\\\d{7}\"],0,0,0,0,0,[\"9(?:[67][0-4]|8[0-3589]|9\\\\d)\\\\d{5}\"]]],\"HU\":[\"36\",\"00\",\"[2357]\\\\d{8}|[1-9]\\\\d{7}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]\"],\"(06 $1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-57-9]\"],\"06 $1\"]],\"06\",0,0,0,0,0,[[\"(?:1\\\\d|[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6[23689]|8[2-57-9]|9[2-69])\\\\d{6}\",[8]],[\"(?:[257]0|3[01])\\\\d{7}\",[9]],[\"[48]0\\\\d{6}\",[8]],[\"9[01]\\\\d{6}\",[8]],0,0,[\"38\\\\d{7}\",[9]],0,[\"21\\\\d{7}\",[9]]]],\"ID\":[\"62\",\"00[189]\",\"(?:(?:007803|8\\\\d{4})\\\\d|[1-36])\\\\d{6}|[1-9]\\\\d{8,10}|[2-9]\\\\d{7}\",[7,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"15\"]],[\"(\\\\d{2})(\\\\d{5,9})\",\"$1 $2\",[\"2[124]|[36]1\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,7})\",\"$1 $2\",[\"800\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5,8})\",\"$1 $2\",[\"[2-79]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{3})\",\"$1-$2-$3\",[\"8[1-35-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6,8})\",\"$1 $2\",[\"1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"804\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"80\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1-$2-$3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[124]\\\\d{7,8}|619\\\\d{8}|2(?:1(?:14|500)|2\\\\d{3})\\\\d{3}|61\\\\d{5,8}|(?:2(?:[35][1-4]|6[0-8]|7[1-6]|8\\\\d|9[1-8])|3(?:1|[25][1-8]|3[1-68]|4[1-3]|6[1-3568]|7[0-469]|8\\\\d)|4(?:0[1-589]|1[01347-9]|2[0-36-8]|3[0-24-68]|43|5[1-378]|6[1-5]|7[134]|8[1245])|5(?:1[1-35-9]|2[25-8]|3[124-9]|4[1-3589]|5[1-46]|6[1-8])|6(?:[25]\\\\d|3[1-69]|4[1-6])|7(?:02|[125][1-9]|[36]\\\\d|4[1-8]|7[0-36-9])|9(?:0[12]|1[013-8]|2[0-479]|5[125-8]|6[23679]|7[159]|8[01346]))\\\\d{5,8}\",[7,8,9,10,11]],[\"8[1-35-9]\\\\d{7,10}\",[9,10,11,12]],[\"007803\\\\d{7}|(?:177\\\\d|800)\\\\d{5,7}\",[8,9,10,11,13]],[\"809\\\\d{7}\",[10]],0,0,[\"(?:1500|8071\\\\d{3})\\\\d{3}\",[7,10]],0,0,[\"804\\\\d{7}\",[10]]]],\"IE\":[\"353\",\"00\",\"(?:1\\\\d|[2569])\\\\d{6,8}|4\\\\d{6,9}|7\\\\d{8}|8\\\\d{8,9}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"2[24-9]|47|58|6[237-9]|9[35-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[45]0\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2569]|4[1-69]|7[14]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"70\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"81\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"4\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|21)\\\\d{6,7}|(?:2[24-9]|4(?:0[24]|5\\\\d|7)|5(?:0[45]|1\\\\d|8)|6(?:1\\\\d|[237-9])|9(?:1\\\\d|[35-9]))\\\\d{5}|(?:23|4(?:[1-469]|8\\\\d)|5[23679]|6[4-6]|7[14]|9[04])\\\\d{7}\"],[\"8(?:22|[35-9]\\\\d)\\\\d{6}\",[9]],[\"1800\\\\d{6}\",[10]],[\"15(?:1[2-8]|[2-8]0|9[089])\\\\d{6}\",[10]],[\"700\\\\d{6}\",[9]],0,[\"818\\\\d{6}\",[9]],0,[\"76\\\\d{7}\",[9]],[\"18[59]0\\\\d{6}\",[10]]]],\"IL\":[\"972\",\"0(?:0|1[2-9])\",\"1\\\\d{6}(?:\\\\d{3,5})?|[57]\\\\d{8}|[1-489]\\\\d{7}\",[7,8,9,10,11,12],[[\"(\\\\d{4})(\\\\d{3})\",\"$1-$2\",[\"125\"]],[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"121\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[2-489]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"12\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1-$2\",[\"159\"]],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3-$4\",[\"1[7-9]\"]],[\"(\\\\d{3})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3-$4\",[\"15\"]]],\"0\",0,0,0,0,0,[[\"153\\\\d{8,9}|[2-489]\\\\d{7}\",[8,11,12]],[\"5(?:(?:[0-389][2-9]|4[1-9]|6\\\\d)\\\\d|5(?:01|2[2-7]|3[23]|4[45]|5[05689]|6[6-8]|7[0-267]|8[7-9]|9[1-9]))\\\\d{5}\",[9]],[\"1(?:255|80[019]\\\\d{3})\\\\d{3}\",[7,10]],[\"1212\\\\d{4}|1(?:200|9(?:0[01]|19))\\\\d{6}\",[8,10]],0,0,[\"1599\\\\d{6}\",[10]],0,[\"78(?:33|55|77|81)\\\\d{5}|7(?:18|2[23]|3[237]|47|6[58]|7\\\\d|82|9[235-9])\\\\d{6}\",[9]],[\"1700\\\\d{6}\",[10]]]],\"IM\":[\"44\",\"00\",\"1624\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([5-8]\\\\d{5})$\",\"1624$1\",0,\"74576|(?:16|7[56])24\",[[\"1624[5-8]\\\\d{5}\"],[\"76245[06]\\\\d{4}|7(?:4576|[59]24\\\\d|624[0-4689])\\\\d{5}\"],[\"808162\\\\d{4}\"],[\"8(?:440[49]06|72299\\\\d)\\\\d{3}|(?:8(?:45|70)|90[0167])624\\\\d{4}\"],[\"70\\\\d{8}\"],0,[\"3440[49]06\\\\d{3}|(?:3(?:08162|3\\\\d{4}|45624|7(?:0624|2299))|55\\\\d{4})\\\\d{4}\"],0,[\"56\\\\d{8}\"]]],\"IN\":[\"91\",\"00\",\"(?:000800|[2-9]\\\\d\\\\d)\\\\d{7}|1\\\\d{7,12}\",[8,9,10,11,12,13],[[\"(\\\\d{8})\",\"$1\",[\"5(?:0|2[23]|3[03]|[67]1|88)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)\",\"5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)\"],0,1],[\"(\\\\d{4})(\\\\d{4,5})\",\"$1 $2\",[\"180\",\"1800\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"140\"],0,1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"11|2[02]|33|4[04]|79[1-7]|80[2-46]\",\"11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])\",\"11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]\",\"1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807\",\"1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]\",\"1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\\\d|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]))[2-7]\"],\"0$1\",1],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"[6-9]\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{2,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1(?:6|8[06])\",\"1(?:6|8[06]0)\"],0,1],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"18\"],0,1]],\"0\",0,0,0,0,0,[[\"2717(?:[2-7]\\\\d|95)\\\\d{4}|(?:271[0-689]|782[0-6])[2-7]\\\\d{5}|(?:170[24]|2(?:(?:[02][2-79]|90)\\\\d|80[13468])|(?:3(?:23|80)|683|79[1-7])\\\\d|4(?:20[24]|72[2-8])|552[1-7])\\\\d{6}|(?:11|33|4[04]|80)[2-7]\\\\d{7}|(?:342|674|788)(?:[0189][2-7]|[2-7]\\\\d)\\\\d{5}|(?:1(?:2[0-249]|3[0-25]|4[145]|[59][14]|6[014]|7[1257]|8[01346])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568]|9[14])|3(?:26|4[13]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[014-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|2[14]|3[134]|4[47]|5[15]|[67]1)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91))[2-7]\\\\d{6}|(?:1(?:2[35-8]|3[346-9]|4[236-9]|[59][0235-9]|6[235-9]|7[34689]|8[257-9])|2(?:1[134689]|3[24-8]|4[2-8]|5[25689]|6[2-4679]|7[3-79]|8[2-479]|9[235-9])|3(?:01|1[79]|2[1245]|4[5-8]|5[125689]|6[235-7]|7[157-9]|8[2-46-8])|4(?:1[14578]|2[5689]|3[2-467]|5[4-7]|6[35]|73|8[2689]|9[2389])|5(?:[16][146-9]|2[14-8]|3[1346]|4[14-69]|5[46]|7[2-4]|8[2-8]|9[246])|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])|7(?:1[013-9]|2[0235-9]|3[2679]|4[1-35689]|5[2-46-9]|[67][02-9]|8[013-7]|9[089])|8(?:1[1357-9]|2[235-8]|3[03-57-9]|4[0-24-9]|5\\\\d|6[2457-9]|7[1-6]|8[1256]|9[2-4]))\\\\d[2-7]\\\\d{5}\",[10]],[\"(?:61279|7(?:887[02-9]|9(?:313|79[07-9]))|8(?:079[04-9]|(?:84|91)7[02-8]))\\\\d{5}|(?:6(?:12|[2-47]1|5[17]|6[13]|80)[0189]|7(?:1(?:2[0189]|9[0-5])|2(?:[14][017-9]|8[0-59])|3(?:2[5-8]|[34][017-9]|9[016-9])|4(?:1[015-9]|[29][89]|39|8[389])|5(?:[15][017-9]|2[04-9]|9[7-9])|6(?:0[0-47]|1[0-257-9]|2[0-4]|3[19]|5[4589])|70[0289]|88[089]|97[02-8])|8(?:0(?:6[67]|7[02-8])|70[017-9]|84[01489]|91[0-289]))\\\\d{6}|(?:7(?:31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[0189]\\\\d|7[02-8])\\\\d{5}|(?:6(?:[09]\\\\d|1[04679]|2[03689]|3[05-9]|4[0489]|50|6[069]|7[07]|8[7-9])|7(?:0\\\\d|2[0235-79]|3[05-8]|40|5[0346-8]|6[6-9]|7[1-9]|8[0-79]|9[089])|8(?:0[01589]|1[0-57-9]|2[235-9]|3[03-57-9]|[45]\\\\d|6[02457-9]|7[1-69]|8[0-25-9]|9[02-9])|9\\\\d\\\\d)\\\\d{7}|(?:6(?:(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|8[124-6])\\\\d|7(?:[235689]\\\\d|4[0189]))|7(?:1(?:[013-8]\\\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-5])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\\\d|5[0-367])|70[13-7]|881))[0189]\\\\d{5}\",[10]],[\"000800\\\\d{7}|1(?:600\\\\d{6}|80(?:0\\\\d{4,9}|3\\\\d{9}))\"],[\"186[12]\\\\d{9}\",[13]],0,0,[\"140\\\\d{7}\",[10]],0,0,[\"1860\\\\d{7}\",[11]]]],\"IO\":[\"246\",\"00\",\"3\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"3\"]]],0,0,0,0,0,0,[[\"37\\\\d{5}\"],[\"38\\\\d{5}\"]]],\"IQ\":[\"964\",\"00\",\"(?:1|7\\\\d\\\\d)\\\\d{7}|[2-6]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1\\\\d{7}|(?:2[13-5]|3[02367]|4[023]|5[03]|6[026])\\\\d{6,7}\",[8,9]],[\"7[3-9]\\\\d{8}\",[10]]]],\"IR\":[\"98\",\"00\",\"[1-9]\\\\d{9}|(?:[1-8]\\\\d\\\\d|9)\\\\d{3,4}\",[4,5,6,7,10],[[\"(\\\\d{4,5})\",\"$1\",[\"96\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4,5})\",\"$1 $2\",[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])(?:[03-57]\\\\d{7}|[16]\\\\d{3}(?:\\\\d{4})?|[289]\\\\d{3}(?:\\\\d(?:\\\\d{3})?)?)|94(?:000[09]|2(?:121|[2689]0\\\\d)|30[0-2]\\\\d|4(?:111|40\\\\d))\\\\d{4}\",[6,7,10]],[\"9(?:(?:0(?:[1-35]\\\\d|44)|(?:[13]\\\\d|2[0-2])\\\\d)\\\\d|9(?:(?:[0-2]\\\\d|44)\\\\d|5[15]0|8(?:1\\\\d|88)|9(?:0[013]|1[0134]|21|77|9[6-9])))\\\\d{5}\",[10]],0,0,0,0,[\"96(?:0[12]|2[16-8]|3(?:08|[14]5|[23]|66)|4(?:0|80)|5[01]|6[89]|86|9[19])\",[4,5]],0,[\"993\\\\d{7}\",[10]]]],\"IS\":[\"354\",\"00|1(?:0(?:01|[12]0)|100)\",\"(?:38\\\\d|[4-9])\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[4-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"(?:4(?:1[0-24-69]|2[0-7]|[37][0-8]|4[0-245]|5[0-68]|6\\\\d|8[0-36-8])|5(?:05|[156]\\\\d|2[02578]|3[0-579]|4[03-7]|7[0-2578]|8[0-35-9]|9[013-689])|872)\\\\d{4}\",[7]],[\"(?:38[589]\\\\d\\\\d|6(?:1[1-8]|2[0-6]|3[027-9]|4[014679]|5[0159]|6[0-69]|70|8[06-8]|9\\\\d)|7(?:5[057]|[6-9]\\\\d)|8(?:2[0-59]|[3-69]\\\\d|8[28]))\\\\d{4}\"],[\"80[08]\\\\d{4}\",[7]],[\"90(?:0\\\\d|1[5-79]|2[015-79]|3[135-79]|4[125-7]|5[25-79]|7[1-37]|8[0-35-7])\\\\d{3}\",[7]],0,0,[\"809\\\\d{4}\",[7]],0,[\"49[0-24-79]\\\\d{4}\",[7]]],\"00\"],\"IT\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{4,6})\",\"$1 $2\",[\"0[26]\"]],[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"0[13-57-9][0159]|8(?:03|4[17]|9[245])\",\"0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))\"]],[\"(\\\\d{4})(\\\\d{2,6})\",\"$1 $2\",[\"0(?:[13-579][2-46-8]|8[236-8])\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"894\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[26]|5\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"1[4679]|[38]\"]],[\"(\\\\d{3})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"0[13-57-9][0159]\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{5})\",\"$1 $2 $3\",[\"0[26]\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"3\"]]],0,0,0,0,0,0,[[\"0669[0-79]\\\\d{1,6}|0(?:1(?:[0159]\\\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\\\d\\\\d|3(?:[0159]\\\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\\\d|6[0-8])|7(?:[0159]\\\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\\\d{2,7}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"JE\":[\"44\",\"00\",\"1534\\\\d{6}|(?:[3578]\\\\d|90)\\\\d{8}\",[10],0,\"0\",0,\"0|([0-24-8]\\\\d{5})$\",\"1534$1\",0,0,[[\"1534[0-24-8]\\\\d{5}\"],[\"7(?:(?:(?:50|82)9|937)\\\\d|7(?:00[378]|97[7-9]))\\\\d{5}\"],[\"80(?:07(?:35|81)|8901)\\\\d{4}\"],[\"(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\\\d{4}\"],[\"701511\\\\d{4}\"],0,[\"(?:3(?:0(?:07(?:35|81)|8901)|3\\\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\\\d{4})\\\\d{4}\"],[\"76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\\\d{6}\"],[\"56\\\\d{8}\"]]],\"JM\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|658|900)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"658|876\",[[\"(?:658(?:2(?:[0-8]\\\\d|9[0-46-9])|[3-9]\\\\d\\\\d)|876(?:5(?:02|1[0-468]|2[35]|63)|6(?:0[1-3579]|1[0237-9]|[23]\\\\d|40|5[06]|6[2-589]|7[05]|8[04]|9[4-9])|7(?:0[2-689]|[1-6]\\\\d|8[056]|9[45])|9(?:0[1-8]|1[02378]|[2-8]\\\\d|9[2-468])))\\\\d{4}\"],[\"(?:658295|876(?:(?:2[14-9]|[348]\\\\d)\\\\d|5(?:0[13-9]|17|[2-57-9]\\\\d|6[0-24-9])|7(?:0[07]|7\\\\d|8[1-47-9]|9[0-36-9])|9(?:[01]9|9[0579])))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"JO\":[\"962\",\"00\",\"900\\\\d{5}|(?:(?:[268]|7\\\\d)\\\\d|32|53)\\\\d{6}\",[8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2356]|87\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"70\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:6(?:2[0-35-9]|3[0-578]|4[24-7]|5[0-24-8]|[6-8][023]|9[0-3])|7(?:0[1-79]|10|2[014-7]|3[0-689]|4[019]|5[0-3578]))|32(?:0[1-69]|1[1-35-7]|2[024-7]|3\\\\d|4[0-3]|[57][023]|6[03])|53(?:0[0-3]|[13][023]|2[0-59]|49|5[0-35-9]|6[15]|7[45]|8[1-6]|9[0-36-9])|6(?:2(?:[05]0|22)|3(?:00|33)|4(?:0[0-25]|1[2-7]|2[0569]|[38][07-9]|4[025689]|6[0-589]|7\\\\d|9[0-2])|5(?:[01][056]|2[034]|3[0-57-9]|4[178]|5[0-69]|6[0-35-9]|7[1-379]|8[0-68]|9[0239]))|87(?:[029]0|7[08]))\\\\d{4}\",[8]],[\"7(?:55[0-49]|(?:7[025-9]|8[0-25-9]|9\\\\d)\\\\d)\\\\d{5}\",[9]],[\"80\\\\d{6}\",[8]],[\"900\\\\d{5}\",[8]],[\"70\\\\d{7}\",[9]],0,[\"8(?:10|8\\\\d)\\\\d{5}\",[8]],[\"74(?:66|77)\\\\d{5}\",[9]],0,[\"85\\\\d{6}\",[8]]]],\"JP\":[\"81\",\"010\",\"00[1-9]\\\\d{6,14}|[257-9]\\\\d{9}|(?:00|[1-9]\\\\d\\\\d)\\\\d{6}\",[8,9,10,11,12,13,14,15,16,17],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1-$2-$3\",[\"(?:12|57|99)0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\",\"1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[36]|4(?:2[09]|7[01])\",\"[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[279]|49|6[0-24-689]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|6(?:[0-24]|5[0-3589]|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:47[59]|59[89]|8(?:6[68]|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\",\"1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3\",[\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])\",\"[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"800\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[2579]|80\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:1[235-8]|2[3-6]|3[3-9]|4[2-6]|[58][2-8]|6[2-7]|7[2-9]|9[1-9])|(?:2[2-9]|[36][1-9])\\\\d|4(?:[2-578]\\\\d|6[02-8]|9[2-59])|5(?:[2-589]\\\\d|6[1-9]|7[2-8])|7(?:[25-9]\\\\d|3[4-9]|4[02-9])|8(?:[2679]\\\\d|3[2-9]|4[5-9]|5[1-9]|8[03-9])|9(?:[2-58]\\\\d|[679][1-9]))\\\\d{6}\",[9]],[\"[7-9]0[1-9]\\\\d{7}\",[10]],[\"00(?:(?:37|66)\\\\d{6,13}|(?:777(?:[01]|(?:5|8\\\\d)\\\\d)|882[1245]\\\\d\\\\d)\\\\d\\\\d)|(?:120|800\\\\d)\\\\d{6}\"],[\"990\\\\d{6}\",[9]],[\"60\\\\d{7}\",[9]],0,[\"570\\\\d{6}\",[9]],[\"20\\\\d{8}\",[10]],[\"50[1-9]\\\\d{7}\",[10]]]],\"KE\":[\"254\",\"000\",\"(?:[17]\\\\d\\\\d|900)\\\\d{6}|(?:2|80)0\\\\d{6,7}|[4-6]\\\\d{6,8}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"[24-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[17]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[245]|5[2-79]|6[01457-9])\\\\d{5,7}|(?:4[136]|5[08]|62)\\\\d{7}|(?:[24]0|51|66)\\\\d{6,7}\",[7,8,9]],[\"(?:1(?:0[0-2]|1[01])|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"800[24-8]\\\\d{5,6}\",[9,10]],[\"900[02-9]\\\\d{5}\",[9]]]],\"KG\":[\"996\",\"00\",\"8\\\\d{9}|(?:[235-8]\\\\d|99)\\\\d{7}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"3(?:1[346]|[24-79])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[235-79]|88\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d)(\\\\d{2,3})\",\"$1 $2 $3 $4\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"312(?:5[0-79]\\\\d|9(?:[0-689]\\\\d|7[0-24-9]))\\\\d{3}|(?:3(?:1(?:2[0-46-8]|3[1-9]|47|[56]\\\\d)|2(?:22|3[0-479]|6[0-7])|4(?:22|5[6-9]|6\\\\d)|5(?:22|3[4-7]|59|6\\\\d)|6(?:22|5[35-7]|6\\\\d)|7(?:22|3[468]|4[1-9]|59|[67]\\\\d)|9(?:22|4[1-8]|6\\\\d))|6(?:09|12|2[2-4])\\\\d)\\\\d{5}\",[9]],[\"(?:312(?:58\\\\d|973)|8801\\\\d\\\\d)\\\\d{3}|(?:2(?:0[0-35]|2\\\\d)|5[0-24-7]\\\\d|7(?:[07]\\\\d|55)|99[05-9])\\\\d{6}\",[9]],[\"800\\\\d{6,7}\"]]],\"KH\":[\"855\",\"00[14-9]\",\"1\\\\d{9}|[1-9]\\\\d{7,8}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"23(?:4(?:[2-4]|[56]\\\\d)|[568]\\\\d\\\\d)\\\\d{4}|23[236-9]\\\\d{5}|(?:2[4-6]|3[2-6]|4[2-4]|[5-7][2-5])(?:(?:[237-9]|4[56]|5\\\\d)\\\\d{5}|6\\\\d{5,6})\",[8,9]],[\"(?:(?:1[28]|3[18]|9[67])\\\\d|6[016-9]|7(?:[07-9]|[16]\\\\d)|8(?:[013-79]|8\\\\d))\\\\d{6}|(?:1\\\\d|9[0-57-9])\\\\d{6}|(?:2[3-6]|3[2-6]|4[2-4]|[5-7][2-5])48\\\\d{5}\",[8,9]],[\"1800(?:1\\\\d|2[019])\\\\d{4}\",[10]],[\"1900(?:1\\\\d|2[09])\\\\d{4}\",[10]]]],\"KI\":[\"686\",\"00\",\"(?:[37]\\\\d|6[0-79])\\\\d{6}|(?:[2-48]\\\\d|50)\\\\d{3}\",[5,8],0,\"0\",0,0,0,0,0,[[\"(?:[24]\\\\d|3[1-9]|50|65(?:02[12]|12[56]|22[89]|[3-5]00)|7(?:27\\\\d\\\\d|3100|5(?:02[12]|12[56]|22[89]|[34](?:00|81)|500))|8[0-5])\\\\d{3}\"],[\"73140\\\\d{3}|(?:630[01]|730[0-5])\\\\d{4}|[67]200[01]\\\\d{3}\",[8]],0,0,0,0,0,0,[\"30(?:0[01]\\\\d\\\\d|12(?:11|20))\\\\d\\\\d\",[8]]]],\"KM\":[\"269\",\"00\",\"[3478]\\\\d{6}\",[7],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[3478]\"]]],0,0,0,0,0,0,[[\"7[4-7]\\\\d{5}\"],[\"[34]\\\\d{6}\"],0,[\"8\\\\d{6}\"]]],\"KN\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"869$1\",0,\"869\",[[\"869(?:2(?:29|36)|302|4(?:6[015-9]|70))\\\\d{4}\"],[\"869(?:5(?:5[6-8]|6[5-7])|66\\\\d|76[02-7])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"KP\":[\"850\",\"00|99\",\"85\\\\d{6}|(?:19\\\\d|2)\\\\d{7}\",[8,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d|85)\\\\d{6}\",[8]],[\"19[1-3]\\\\d{7}\",[10]]]],\"KR\":[\"82\",\"00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))\",\"00[1-9]\\\\d{8,11}|(?:[12]|5\\\\d{3})\\\\d{7}|[13-6]\\\\d{9}|(?:[1-6]\\\\d|80)\\\\d{7}|[3-6]\\\\d{4,5}|(?:00|7)0\\\\d{8}\",[5,6,8,9,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1-$2\",[\"(?:3[1-3]|[46][1-4]|5[1-5])1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"1\"]],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1-$2-$3\",[\"60|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1-$2-$3\",[\"[1346]|5[1-5]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2-$3\",[\"[57]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})(\\\\d{4})\",\"$1-$2-$3\",[\"5\"],\"0$1\"]],\"0\",0,\"0(8(?:[1-46-8]|5\\\\d\\\\d))?\",0,0,0,[[\"(?:2|3[1-3]|[46][1-4]|5[1-5])[1-9]\\\\d{6,7}|(?:3[1-3]|[46][1-4]|5[1-5])1\\\\d{2,3}\",[5,6,8,9,10]],[\"1(?:05(?:[0-8]\\\\d|9[0-5])|22[13]\\\\d)\\\\d{4,5}|1(?:0[1-46-9]|[16-9]\\\\d|2[013-9])\\\\d{6,7}\",[9,10]],[\"00(?:308\\\\d{6,7}|798\\\\d{7,9})|(?:00368|80)\\\\d{7}\",[9,11,12,13,14]],[\"60[2-9]\\\\d{6}\",[9]],[\"50\\\\d{8,9}\",[10,11]],0,[\"1(?:5(?:22|44|66|77|88|99)|6(?:[07]0|44|6[16]|88)|8(?:00|33|55|77|99))\\\\d{4}\",[8]],[\"15\\\\d{7,8}\",[9,10]],[\"70\\\\d{8}\",[10]]]],\"KW\":[\"965\",\"00\",\"(?:18|[2569]\\\\d\\\\d)\\\\d{5}\",[7,8],[[\"(\\\\d{4})(\\\\d{3,4})\",\"$1 $2\",[\"[169]|2(?:[235]|4[1-35-9])|52\"]],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[25]\"]]],0,0,0,0,0,0,[[\"2(?:[23]\\\\d\\\\d|4(?:[1-35-9]\\\\d|44)|5(?:0[034]|[2-46]\\\\d|5[1-3]|7[1-7]))\\\\d{4}\",[8]],[\"(?:5(?:2(?:22|5[25])|88[58])|6(?:222|444|70[013-9]|888|93[039])|9(?:11[01]|333|500))\\\\d{4}|(?:5(?:[05]\\\\d|1[0-7]|6[56])|6(?:0[034679]|5[015-9]|6\\\\d|7[67]|9[069])|9(?:0[09]|22|[4679]\\\\d|55|8[057-9]))\\\\d{5}\",[8]],[\"18\\\\d{5}\",[7]]]],\"KY\":[\"1\",\"011\",\"(?:345|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"345$1\",0,\"345\",[[\"345(?:2(?:22|44)|444|6(?:23|38|40)|7(?:4[35-79]|6[6-9]|77)|8(?:00|1[45]|25|[48]8)|9(?:14|4[035-9]))\\\\d{4}\"],[\"345(?:32[1-9]|5(?:1[67]|2[5-79]|4[6-9]|50|76)|649|9(?:1[67]|2[2-9]|3[689]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"(?:345976|900[2-9]\\\\d\\\\d)\\\\d{4}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,[\"345849\\\\d{4}\"]]],\"KZ\":[\"7\",\"810\",\"33622\\\\d{5}|(?:7\\\\d|80)\\\\d{8}\",[10],0,\"8\",0,0,0,0,\"33|7\",[[\"(?:33622|7(?:1(?:0(?:[23]\\\\d|4[0-3]|59|63)|1(?:[23]\\\\d|4[0-79]|59)|2(?:[23]\\\\d|59)|3(?:2\\\\d|3[0-79]|4[0-35-9]|59)|4(?:[24]\\\\d|3[013-9]|5[1-9])|5(?:2\\\\d|3[1-9]|4[0-7]|59)|6(?:[2-4]\\\\d|5[19]|61)|72\\\\d|8(?:[27]\\\\d|3[1-46-9]|4[0-5]))|2(?:1(?:[23]\\\\d|4[46-9]|5[3469])|2(?:2\\\\d|3[0679]|46|5[12679])|3(?:[2-4]\\\\d|5[139])|4(?:2\\\\d|3[1-35-9]|59)|5(?:[23]\\\\d|4[0-246-8]|59|61)|6(?:2\\\\d|3[1-9]|4[0-4]|59)|7(?:[2379]\\\\d|40|5[279])|8(?:[23]\\\\d|4[0-3]|59)|9(?:2\\\\d|3[124578]|59))))\\\\d{5}\"],[\"7(?:0[0-25-8]|47|6[02-4]|7[15-8]|85)\\\\d{7}\"],[\"800\\\\d{7}\"],[\"809\\\\d{7}\"],[\"808\\\\d{7}\"],0,0,0,[\"751\\\\d{7}\"]],\"8~10\"],\"LA\":[\"856\",\"00\",\"(?:2\\\\d|3)\\\\d{8}|(?:[235-8]\\\\d|41)\\\\d{6}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2[13]|3[14]|[4-8]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[13]|[35-7][14]|41|8[1468])\\\\d{6}\",[8]],[\"20(?:[29]\\\\d|5[24-689]|7[6-8])\\\\d{6}\",[10]],0,0,0,0,[\"30\\\\d{7}\",[9]]]],\"LB\":[\"961\",\"00\",\"[7-9]\\\\d{7}|[13-9]\\\\d{6}\",[7,8],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"]]],\"0\",0,0,0,0,0,[[\"(?:(?:[14-69]\\\\d|8[02-9])\\\\d|7(?:[2-57]\\\\d|62|8[0-7]|9[04-9]))\\\\d{4}\",[7]],[\"793(?:[01]\\\\d|2[0-4])\\\\d{3}|(?:(?:3|81)\\\\d|7(?:[01]\\\\d|6[013-9]|8[89]|9[12]))\\\\d{5}\"],0,[\"9[01]\\\\d{6}\",[8]],0,0,0,0,0,[\"80\\\\d{6}\",[8]]]],\"LC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|758|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"758$1\",0,\"758\",[[\"758(?:4(?:30|5\\\\d|6[2-9]|8[0-2])|57[0-2]|638)\\\\d{4}\"],[\"758(?:28[4-7]|384|4(?:6[01]|8[4-9])|5(?:1[89]|20|84)|7(?:1[2-9]|2\\\\d|3[01]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"LI\":[\"423\",\"00\",\"90\\\\d{5}|(?:[2378]|6\\\\d\\\\d)\\\\d{6}\",[7,9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[237-9]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"69\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]]],\"0\",0,\"0|(1001)\",0,0,0,[[\"(?:2(?:01|1[27]|22|3\\\\d|6[02-578]|96)|3(?:33|40|7[0135-7]|8[048]|9[0269]))\\\\d{4}\",[7]],[\"(?:6(?:4(?:89|9\\\\d)|5[0-3]\\\\d|6(?:0[0-7]|10|2[06-9]|39))\\\\d|7(?:[37-9]\\\\d|42|56))\\\\d{4}\"],[\"80(?:02[28]|9\\\\d\\\\d)\\\\d\\\\d\",[7]],[\"90(?:02[258]|1(?:23|3[14])|66[136])\\\\d\\\\d\",[7]],0,0,[\"870(?:28|87)\\\\d\\\\d\",[7]]]],\"LK\":[\"94\",\"00\",\"(?:[1-7]\\\\d|[89]1)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[1-689]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[189]1|2[13-7]|3[1-8]|4[157]|5[12457]|6[35-7])[2-57]\\\\d{6}\"],[\"7[0-25-8]\\\\d{7}\"],0,0,0,0,[\"1973\\\\d{5}\"]]],\"LR\":[\"231\",\"00\",\"(?:2|33|5\\\\d|77|88)\\\\d{7}|[45]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d{3}|33333)\\\\d{4}\",[8,9]],[\"(?:(?:330|555|(?:77|88)\\\\d)\\\\d|4[67])\\\\d{5}|5\\\\d{6}\",[7,9]],0,[\"332(?:02|[34]\\\\d)\\\\d{4}\",[9]]]],\"LS\":[\"266\",\"00\",\"(?:[256]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2568]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"[56]\\\\d{7}\"],[\"800[256]\\\\d{4}\"]]],\"LT\":[\"370\",\"00\",\"(?:[3469]\\\\d|52|[78]0)\\\\d{6}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"52[0-79]\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"8 $1\",1],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"37|4(?:[15]|6[1-8])\"],\"(8-$1)\",1],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"(8-$1)\",1]],\"8\",0,\"[08]\",0,0,0,[[\"(?:3[1478]|4[124-6]|52)\\\\d{6}\"],[\"6\\\\d{7}\"],[\"800\\\\d{5}\"],[\"9(?:0[0239]|10)\\\\d{5}\"],[\"700\\\\d{5}\"],0,[\"70[67]\\\\d{5}\"],0,0,[\"808\\\\d{5}\"]]],\"LU\":[\"352\",\"00\",\"35[013-9]\\\\d{4,8}|6\\\\d{8}|35\\\\d{2,4}|(?:[2457-9]\\\\d|3[0-46-9])\\\\d{2,9}\",[4,5,6,7,8,9,10,11],[[\"(\\\\d{2})(\\\\d{3})\",\"$1 $2\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"20[2-689]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"80[01]|90[015]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"20\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,2})\",\"$1 $2 $3 $4 $5\",[\"2(?:[0367]|4[3-8])\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{1,5})\",\"$1 $2 $3 $4\",[\"[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]\"]]],0,0,\"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\\\d)\",0,0,0,[[\"(?:35[013-9]|80[2-9]|90[89])\\\\d{1,8}|(?:2[2-9]|3[0-46-9]|[457]\\\\d|8[13-9]|9[2-579])\\\\d{2,9}\"],[\"6(?:[269][18]|5[158]|7[189]|81)\\\\d{6}\",[9]],[\"800\\\\d{5}\",[8]],[\"90[015]\\\\d{5}\",[8]],0,0,0,0,[\"20(?:1\\\\d{5}|[2-689]\\\\d{1,7})\",[4,5,6,7,8,9,10]],[\"801\\\\d{5}\",[8]]]],\"LV\":[\"371\",\"00\",\"(?:[268]\\\\d|90)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[269]|8[01]\"]]],0,0,0,0,0,0,[[\"6\\\\d{7}\"],[\"2\\\\d{7}\"],[\"80\\\\d{6}\"],[\"90\\\\d{6}\"],0,0,0,0,0,[\"81\\\\d{6}\"]]],\"LY\":[\"218\",\"00\",\"[2-9]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:0[56]|[1-6]\\\\d|7[124579]|8[124])|3(?:1\\\\d|2[2356])|4(?:[17]\\\\d|2[1-357]|5[2-4]|8[124])|5(?:[1347]\\\\d|2[1-469]|5[13-5]|8[1-4])|6(?:[1-479]\\\\d|5[2-57]|8[1-5])|7(?:[13]\\\\d|2[13-79])|8(?:[124]\\\\d|5[124]|84))\\\\d{6}\"],[\"9[1-6]\\\\d{7}\"]]],\"MA\":[\"212\",\"00\",\"[5-8]\\\\d{8}\",[9],[[\"(\\\\d{5})(\\\\d{4})\",\"$1-$2\",[\"5(?:29|38)\",\"5(?:29|38)[89]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5[45]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1-$2\",[\"5(?:2[2-489]|3[5-9]|9)|892\",\"5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1-$2\",[\"8\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1-$2\",[\"[5-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"5(?:29(?:[189]0|29)|38[89]0)\\\\d{4}|5(?:2(?:[015-7]\\\\d|2[02-9]|3[0-578]|4[2-46-8]|8[0235-7]|90)|3(?:[0-47]\\\\d|5[2-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\\\d)\\\\d{5}\"],[\"(?:6(?:[0-79]\\\\d|8[0-247-9])|7(?:0[016-8]|6[1267]|7[0-27]))\\\\d{6}\"],[\"80\\\\d{7}\"],[\"89\\\\d{7}\"],0,0,0,0,[\"592(?:4[0-2]|93)\\\\d{4}\"]]],\"MC\":[\"377\",\"00\",\"870\\\\d{5}|(?:[349]|6\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"4\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[39]\"]],[\"(\\\\d)(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4 $5\",[\"6\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:870|9[2-47-9]\\\\d)\\\\d{5}\",[8]],[\"4(?:4\\\\d|5[1-9])\\\\d{5}|(?:3|6\\\\d)\\\\d{7}\"],[\"90\\\\d{6}\",[8]]]],\"MD\":[\"373\",\"00\",\"(?:[235-7]\\\\d|[89]0)\\\\d{6}\",[8],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"22|3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[25-7]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:2[1-9]|3[1-79])\\\\d|5(?:33|5[257]))\\\\d{5}\"],[\"562\\\\d{5}|(?:6\\\\d|7[16-9])\\\\d{6}\"],[\"800\\\\d{5}\"],[\"90[056]\\\\d{5}\"],0,0,[\"803\\\\d{5}\"],0,[\"3[08]\\\\d{6}\"],[\"808\\\\d{5}\"]]],\"ME\":[\"382\",\"00\",\"(?:20|[3-79]\\\\d)\\\\d{6}|80\\\\d{6,7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[2-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:20[2-8]|3(?:[0-2][2-7]|3[24-7])|4(?:0[2-467]|1[2467])|5(?:[01][2467]|2[2-467]))\\\\d{5}\",[8]],[\"6(?:00|3[024]|6[0-25]|[7-9]\\\\d)\\\\d{5}\",[8]],[\"80(?:[0-2578]|9\\\\d)\\\\d{5}\"],[\"9(?:4[1568]|5[178])\\\\d{5}\",[8]],0,0,[\"77[1-9]\\\\d{5}\",[8]],0,[\"78[1-49]\\\\d{5}\",[8]]]],\"MF\":[\"590\",\"00\",\"(?:590|69\\\\d|976)\\\\d{6}\",[9],0,\"0\",0,0,0,0,0,[[\"590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\\\d{4}\"],[\"69(?:0\\\\d\\\\d|1(?:2[29]|3[0-5]))\\\\d{4}\"],0,0,0,0,0,0,[\"976[01]\\\\d{5}\"]]],\"MG\":[\"261\",\"00\",\"[23]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[23]\"],\"0$1\"]],\"0\",0,\"0|([24-9]\\\\d{6})$\",\"20$1\",0,0,[[\"2072[29]\\\\d{4}|20(?:2\\\\d|4[47]|5[3467]|6[279]|7[35]|8[268]|9[245])\\\\d{5}\"],[\"3[2-49]\\\\d{7}\"],0,0,0,0,0,0,[\"22\\\\d{7}\"]]],\"MH\":[\"692\",\"011\",\"329\\\\d{4}|(?:[256]\\\\d|45)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[2-6]\"]]],\"1\",0,0,0,0,0,[[\"(?:247|528|625)\\\\d{4}\"],[\"(?:(?:23|54)5|329|45[56])\\\\d{4}\"],0,0,0,0,0,0,[\"635\\\\d{4}\"]]],\"MK\":[\"389\",\"00\",\"[2-578]\\\\d{7}\",[8],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[347]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[58]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:[23]\\\\d|5[0-24578]|6[01]|82)|3(?:1[3-68]|[23][2-68]|4[23568])|4(?:[23][2-68]|4[3-68]|5[2568]|6[25-8]|7[24-68]|8[4-68]))\\\\d{5}\"],[\"7(?:(?:[0-25-8]\\\\d|3[2-4]|9[23])\\\\d|4(?:21|60))\\\\d{4}\"],[\"800\\\\d{5}\"],[\"5[02-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:0[1-9]|[1-9]\\\\d)\\\\d{5}\"]]],\"ML\":[\"223\",\"00\",\"[24-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24-9]\"]]],0,0,0,0,0,0,[[\"2(?:07[0-8]|12[67])\\\\d{4}|(?:2(?:02|1[4-689])|4(?:0[0-4]|4[1-39]))\\\\d{5}\"],[\"2(?:079|17\\\\d)\\\\d{4}|(?:5[01]|[679]\\\\d|8[239])\\\\d{6}\"],[\"80\\\\d{6}\"]]],\"MM\":[\"95\",\"00\",\"1\\\\d{5,7}|95\\\\d{6}|(?:[4-7]|9[0-46-9])\\\\d{6,8}|(?:2|8\\\\d)\\\\d{5,8}\",[6,7,8,9,10],[[\"(\\\\d)(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"16|2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[4-7]|8[1-35]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4,6})\",\"$1 $2 $3\",[\"9(?:2[0-4]|[35-9]|4[137-9])\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"92\"],\"0$1\"],[\"(\\\\d)(\\\\d{5})(\\\\d{4})\",\"$1 $2 $3\",[\"9\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:2\\\\d|3[56]|[89][0-6])\\\\d|4(?:2[2-469]|39|46|6[25]|7[0-3]|83)|6)|2(?:2(?:00|8[34])|4(?:0\\\\d|2[246]|39|46|62|7[0-3]|83)|51\\\\d\\\\d)|4(?:2(?:2\\\\d\\\\d|48[0-3])|3(?:20\\\\d|4(?:70|83)|56)|420\\\\d|5470)|6(?:0(?:[23]|88\\\\d)|(?:124|[56]2\\\\d)\\\\d|247[23]|3(?:20\\\\d|470)|4(?:2[04]\\\\d|47[23])|7(?:(?:3\\\\d|8[01459])\\\\d|4(?:39|60|7[013]))))\\\\d{4}|5(?:2(?:2\\\\d{5,6}|47[023]\\\\d{4})|(?:347[23]|4(?:2(?:1|86)|470)|522\\\\d|6(?:20\\\\d|483)|7(?:20\\\\d|48[0-2])|8(?:20\\\\d|47[02])|9(?:20\\\\d|47[01]))\\\\d{4})|7(?:(?:0470|4(?:25\\\\d|470)|5(?:202|470|96\\\\d))\\\\d{4}|1(?:20\\\\d{4,5}|4(?:70|83)\\\\d{4}))|8(?:1(?:2\\\\d{5,6}|4(?:10|7[01]\\\\d)\\\\d{3})|2(?:2\\\\d{5,6}|(?:320|490\\\\d)\\\\d{3})|(?:3(?:2\\\\d\\\\d|470)|4[24-7]|5(?:2\\\\d|4[1-9]|51)\\\\d|6[23])\\\\d{4})|(?:1[2-6]\\\\d|4(?:2[24-8]|3[2-7]|[46][2-6]|5[3-5])|5(?:[27][2-8]|3[2-68]|4[24-8]|5[23]|6[2-4]|8[24-7]|9[2-7])|6(?:[19]20|42[03-6]|(?:52|7[45])\\\\d)|7(?:[04][24-8]|[15][2-7]|22|3[2-4])|8(?:1[2-689]|2[2-8]|[35]2\\\\d))\\\\d{4}|25\\\\d{5,6}|(?:2[2-9]|6(?:1[2356]|[24][2-6]|3[24-6]|5[2-4]|6[2-8]|7[235-7]|8[245]|9[24])|8(?:3[24]|5[245]))\\\\d{4}\",[6,7,8,9]],[\"(?:17[01]|9(?:2(?:[0-4]|[56]\\\\d\\\\d)|(?:3(?:[0-36]|4\\\\d)|6(?:6[0-2]|[7-9]\\\\d)|7(?:3|[5-9]\\\\d)|(?:8[89]|9[5-8])\\\\d)\\\\d|4(?:(?:[0245]\\\\d|[1379])\\\\d|88)|5[0-6])\\\\d)\\\\d{4}|9[69]1\\\\d{6}|9(?:[68]\\\\d|9[089])\\\\d{5}\",[7,8,9,10]],[\"80080(?:[01][1-9]|2\\\\d)\\\\d{3}\",[10]],0,0,0,0,0,[\"1333\\\\d{4}|[12]468\\\\d{4}\",[8]]]],\"MN\":[\"976\",\"001\",\"[12]\\\\d{7,9}|[57-9]\\\\d{7}\",[8,9,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[12]1\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[57-9]\"]],[\"(\\\\d{3})(\\\\d{5,6})\",\"$1 $2\",[\"[12]2[1-3]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5,6})\",\"$1 $2\",[\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])\",\"[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]\"],\"0$1\"],[\"(\\\\d{5})(\\\\d{4,5})\",\"$1 $2\",[\"[12]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[12](?:3[2-8]|4[2-68]|5[1-4689])\\\\d{6,7}|(?:11(?:3\\\\d|4[568])|(?:(?:21|5[0568])\\\\d|70[0-5])\\\\d)\\\\d{4}|[12]2(?:[1-3]\\\\d{5,6}|7\\\\d{6})\"],[\"(?:8(?:[05689]\\\\d|3[01])|9(?:[014-9]\\\\d|20|3[0-4]))\\\\d{5}\",[8]],0,0,0,0,0,0,[\"7(?:100|5(?:0[0579]|1[015]|[389]5|[57][57])|(?:6[0167]|7\\\\d|8[01])\\\\d)\\\\d{4}\",[8]]]],\"MO\":[\"853\",\"00\",\"(?:28|[68]\\\\d)\\\\d{6}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[268]\"]]],0,0,0,0,0,0,[[\"(?:28[2-57-9]|8(?:11|[2-57-9]\\\\d))\\\\d{5}\"],[\"6(?:[2356]\\\\d\\\\d|8(?:[02][5-9]|[1478]\\\\d|[356][0-4]))\\\\d{4}\"]]],\"MP\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:67|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"670$1\",0,\"670\",[[\"670(?:2(?:3[3-7]|56|8[5-8])|32[1-38]|4(?:33|8[348])|5(?:32|55|88)|6(?:64|70|82)|78[3589]|8[3-9]8|989)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MQ\":[\"596\",\"00\",\"69\\\\d{7}|(?:59|97)6\\\\d{6}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[569]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"596(?:0[0-7]|10|2[7-9]|3[05-9]|4[0-46-8]|[5-7]\\\\d|8[09]|9[4-8])\\\\d{4}\"],[\"69(?:6(?:[0-47-9]\\\\d|5[0-6]|6[0-4])|727)\\\\d{4}\"],0,0,0,0,0,0,[\"976(?:6[1-9]|7[0-367])\\\\d{4}\"]]],\"MR\":[\"222\",\"00\",\"(?:[2-4]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2-48]\"]]],0,0,0,0,0,0,[[\"(?:25[08]|35\\\\d|45[1-7])\\\\d{5}\"],[\"[2-4][0-46-9]\\\\d{6}\"],[\"800\\\\d{5}\"]]],\"MS\":[\"1\",\"011\",\"66449\\\\d{5}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(4\\\\d{6})$\",\"664$1\",0,\"664\",[[\"664491\\\\d{4}\"],[\"66449[2-6]\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"MT\":[\"356\",\"00\",\"3550\\\\d{4}|(?:[2579]\\\\d\\\\d|800)\\\\d{5}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2357-9]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:[19]\\\\d|3[1-4]|6[059])|[1-357]\\\\d\\\\d)\\\\d{4}\"],[\"(?:7(?:210|[79]\\\\d\\\\d)|9(?:2(?:1[01]|31)|69[67]|8(?:1[1-3]|89|97)|9\\\\d\\\\d))\\\\d{4}\"],[\"800[3467]\\\\d{4}\"],[\"5(?:0(?:0(?:37|43)|(?:6\\\\d|70|9[0168])\\\\d)|[12]\\\\d0[1-5])\\\\d{3}\"],0,0,[\"501\\\\d{5}\"],[\"7117\\\\d{4}\"],[\"3550\\\\d{4}\"]]],\"MU\":[\"230\",\"0(?:0|[24-7]0|3[03])\",\"(?:[2-468]|5\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-46]|8[013]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"5\"]]],0,0,0,0,0,0,[[\"(?:2(?:[0346-8]\\\\d|1[0-7])|4(?:[013568]\\\\d|2[4-7])|54(?:[34]\\\\d|71)|6\\\\d\\\\d|8(?:14|3[129]))\\\\d{4}\"],[\"5(?:4(?:2[1-389]|7[1-9])|87[15-8])\\\\d{4}|5(?:2[589]|4[3489]|7\\\\d|8[0-689]|9[0-8])\\\\d{5}\",[8]],[\"80[0-2]\\\\d{4}\",[7]],[\"30\\\\d{5}\",[7]],0,0,0,0,[\"3(?:20|9\\\\d)\\\\d{4}\",[7]]],\"020\"],\"MV\":[\"960\",\"0(?:0|19)\",\"(?:800|9[0-57-9]\\\\d)\\\\d{7}|[34679]\\\\d{6}\",[7,10],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[3467]|9[13-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"(?:3(?:0[0-3]|3[0-59])|6(?:[57][02468]|6[024-68]|8[024689]))\\\\d{4}\",[7]],[\"46[46]\\\\d{4}|(?:7[2-9]|9[13-9])\\\\d{5}\",[7]],[\"800\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]],0,0,[\"4[05]0\\\\d{4}\",[7]]],\"00\"],\"MW\":[\"265\",\"00\",\"1\\\\d{6}(?:\\\\d{2})?|(?:[23]1|77|88|99)\\\\d{7}\",[7,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[17-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[2-9]|21\\\\d\\\\d)\\\\d{5}\"],[\"111\\\\d{6}|(?:77|88|99)\\\\d{7}\",[9]],0,0,0,0,0,0,[\"31\\\\d{7}\",[9]]]],\"MX\":[\"52\",\"0[09]\",\"(?:1(?:[01467]\\\\d|[2359][1-9]|8[1-79])|[2-9]\\\\d)\\\\d{8}\",[10,11],[[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"33|5[56]|81\"],0,1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2-9]\"],0,1],[\"(\\\\d)(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$2 $3 $4\",[\"1(?:33|5[56]|81)\"],0,1],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$2 $3 $4\",[\"1\"],0,1]],\"01\",0,\"0(?:[12]|4[45])|1\",0,0,0,[[\"(?:2(?:0[01]|2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))\\\\d{7}\",[10]],[\"(?:1(?:2(?:2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))|2(?:2[1-9]|3[1-35-8]|4[13-9]|7[1-689]|8[1-578]|9[467])|3(?:1[1-79]|[2458][1-9]|3\\\\d|7[1-8]|9[1-5])|4(?:1[1-57-9]|[24-7][1-9]|3[1-8]|8[1-35-9]|9[2-689])|5(?:[56]\\\\d|88|9[1-79])|6(?:1[2-68]|[2-4][1-9]|5[1-3689]|6[1-57-9]|7[1-7]|8[67]|9[4-8])|7(?:[1-467][1-9]|5[13-9]|8[1-69]|9[17])|8(?:1\\\\d|2[13-689]|3[1-6]|4[124-6]|6[1246-9]|7[1-378]|9[12479])|9(?:1[346-9]|2[1-4]|3[2-46-8]|5[1348]|[69][1-9]|7[12]|8[1-8]))\\\\d{7}\"],[\"8(?:00|88)\\\\d{7}\",[10]],[\"900\\\\d{7}\",[10]],[\"500\\\\d{7}\",[10]],0,0,0,0,[\"300\\\\d{7}\",[10]]],\"00\"],\"MY\":[\"60\",\"00\",\"1\\\\d{8,9}|(?:3\\\\d|[4-9])\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"[4-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1-$2 $3\",[\"1(?:[02469]|[37][2-9]|8[1-9])|8\"],\"0$1\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"3\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1-$2-$3-$4\",[\"1[36-8]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"15\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1-$2 $3\",[\"1\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3(?:2[0-36-9]|3[0-368]|4[0-278]|5[0-24-8]|6[0-467]|7[1246-9]|8\\\\d|9[0-57])\\\\d|4(?:2[0-689]|[3-79]\\\\d|8[1-35689])|5(?:2[0-589]|[3468]\\\\d|5[0-489]|7[1-9]|9[23])|6(?:2[2-9]|3[1357-9]|[46]\\\\d|5[0-6]|7[0-35-9]|85|9[015-8])|7(?:[2579]\\\\d|3[03-68]|4[0-8]|6[5-9]|8[0-35-9])|8(?:[24][2-8]|3[2-5]|5[2-7]|6[2-589]|7[2-578]|[89][2-9])|9(?:0[57]|13|[25-7]\\\\d|[3489][0-8]))\\\\d{5}\",[8,9]],[\"1(?:4400|8(?:47|8[27])[0-4])\\\\d{4}|1(?:0(?:[23568]\\\\d|4[0-6]|7[016-9]|9[0-8])|1(?:[1-5]\\\\d\\\\d|6(?:0[5-9]|[1-9]\\\\d)|7(?:0[3-9]|1[01]))|(?:[2379][2-9]|4[235-9]|(?:59|6)\\\\d)\\\\d|8(?:1[23]|[236]\\\\d|4[06]|5[7-9]|7[016-9]|8[01]|9[0-8]))\\\\d{5}\",[9,10]],[\"1[378]00\\\\d{6}\",[10]],[\"1600\\\\d{6}\",[10]],0,0,0,0,[\"154(?:6(?:0\\\\d|1[0-3])|8(?:[25]1|4[0189]|7[0-4679]))\\\\d{4}\",[10]]]],\"MZ\":[\"258\",\"00\",\"(?:2|8\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2|8[2-7]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"8\"]]],0,0,0,0,0,0,[[\"2(?:[1346]\\\\d|5[0-2]|[78][12]|93)\\\\d{5}\",[8]],[\"8[2-7]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]]]],\"NA\":[\"264\",\"00\",\"[68]\\\\d{7,8}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"88\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"87\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"6(?:1(?:[02-4]\\\\d\\\\d|17)|2(?:17|54\\\\d|69|70)|3(?:17|2[0237]\\\\d|34|6[289]|7[01]|81)|4(?:17|(?:27|41|5[25])\\\\d|69|7[01])|5(?:17|2[236-8]\\\\d|69|7[01])|6(?:17|26\\\\d|38|42|69|7[01])|7(?:17|(?:2[2-4]|30)\\\\d|6[89]|7[01]))\\\\d{4}|6(?:1(?:2[2-7]|3[01378]|4[0-4]|69|7[014])|25[0-46-8]|32\\\\d|4(?:2[0-27]|4[016]|5[0-357])|52[02-9]|62[56]|7(?:2[2-69]|3[013]))\\\\d{4}\"],[\"(?:60|8[1245])\\\\d{7}\",[9]],[\"80\\\\d{7}\",[9]],[\"8701\\\\d{5}\",[9]],0,0,0,0,[\"8(?:3\\\\d\\\\d|86)\\\\d{5}\"]]],\"NC\":[\"687\",\"00\",\"[2-57-9]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1.$2.$3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[[\"(?:2[03-9]|3[0-5]|4[1-7]|88)\\\\d{4}\"],[\"(?:5[0-4]|[79]\\\\d|8[0-79])\\\\d{4}\"],0,[\"36\\\\d{4}\"]]],\"NE\":[\"227\",\"00\",\"[0289]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"08\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[089]|2[01]\"]]],0,0,0,0,0,0,[[\"2(?:0(?:20|3[1-8]|4[13-5]|5[14]|6[14578]|7[1-578])|1(?:4[145]|5[14]|6[14-68]|7[169]|88))\\\\d{4}\"],[\"(?:8[014589]|9\\\\d)\\\\d{6}\"],[\"08\\\\d{6}\"],[\"09\\\\d{6}\"]]],\"NF\":[\"672\",\"00\",\"[13]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"1\"]],[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"3\"]]],0,0,\"([0-258]\\\\d{4})$\",\"3$1\",0,0,[[\"(?:1(?:06|17|28|39)|3[0-2]\\\\d)\\\\d{3}\"],[\"3[58]\\\\d{4}\"]]],\"NG\":[\"234\",\"009\",\"(?:[124-7]|9\\\\d{3})\\\\d{6}|[1-9]\\\\d{7}|[78]\\\\d{9,13}\",[7,8,10,11,12,13,14],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"78\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[12]|9(?:0[3-9]|[1-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-7]|8[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})(\\\\d{5,6})\",\"$1 $2 $3\",[\"[78]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:(?:[1-356]\\\\d|4[02-8]|7[0-79]|8[2-9])\\\\d|9(?:0[3-9]|[1-9]\\\\d))\\\\d{5}|(?:[12]\\\\d|4[147]|5[14579]|6[1578]|7[0-3578])\\\\d{5}\",[7,8]],[\"(?:707[0-3]|8(?:01|19)[01])\\\\d{6}|(?:70[1-689]|8(?:0[2-9]|1[0-8])|90[1-9])\\\\d{7}\",[10]],[\"800\\\\d{7,11}\",[10,11,12,13,14]],0,0,0,[\"700\\\\d{7,11}\",[10,11,12,13,14]]]],\"NI\":[\"505\",\"00\",\"(?:1800|[25-8]\\\\d{3})\\\\d{4}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[125-8]\"]]],0,0,0,0,0,0,[[\"2\\\\d{7}\"],[\"(?:5(?:5[0-7]|[78]\\\\d)|6(?:20|3[035]|4[045]|5[05]|77|8[1-9]|9[059])|(?:7[5-8]|8\\\\d)\\\\d)\\\\d{5}\"],[\"1800\\\\d{4}\"]]],\"NL\":[\"31\",\"00\",\"(?:[124-7]\\\\d\\\\d|3(?:[02-9]\\\\d|1[0-8]))\\\\d{6}|[89]\\\\d{6,9}|1\\\\d{4,5}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{4,7})\",\"$1 $2\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"66\"],\"0$1\"],[\"(\\\\d)(\\\\d{8})\",\"$1 $2\",[\"6\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1[16-8]|2[259]|3[124]|4[17-9]|5[124679]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-57-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:[035]\\\\d|1[13-578]|6[124-8]|7[24]|8[0-467])|2(?:[0346]\\\\d|2[2-46-9]|5[125]|9[479])|3(?:[03568]\\\\d|1[3-8]|2[01]|4[1-8])|4(?:[0356]\\\\d|1[1-368]|7[58]|8[15-8]|9[23579])|5(?:[0358]\\\\d|[19][1-9]|2[1-57-9]|4[13-8]|6[126]|7[0-3578])|7\\\\d\\\\d)\\\\d{6}\",[9]],[\"6[1-58]\\\\d{7}\",[9]],[\"800\\\\d{4,7}\",[7,8,9,10]],[\"90[069]\\\\d{4,7}\",[7,8,9,10]],0,0,[\"140(?:1[035]|2[0346]|3[03568]|4[0356]|5[0358]|8[458])|(?:140(?:1[16-8]|2[259]|3[124]|4[17-9]|5[124679]|7)|8[478]\\\\d{6})\\\\d\",[5,6,9]],[\"66\\\\d{7}\",[9]],[\"(?:85|91)\\\\d{7}\",[9]]]],\"NO\":[\"47\",\"00\",\"(?:0|[2-9]\\\\d{3})\\\\d{4}\",[5,8],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[489]|5[89]\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[235-7]\"]]],0,0,0,0,0,\"[02-689]|7[0-8]\",[[\"(?:2[1-4]|3[1-3578]|5[1-35-7]|6[1-4679]|7[0-8])\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],0,[\"(?:0[2-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"NP\":[\"977\",\"00\",\"9\\\\d{9}|[1-9]\\\\d{7}\",[8,10],[[\"(\\\\d)(\\\\d{7})\",\"$1-$2\",[\"1[2-6]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1-$2\",[\"[1-8]|9(?:[1-579]|6[2-6])\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"1[0-6]\\\\d{6}|(?:2[13-79]|3[135-8]|4[146-9]|5[135-7]|6[13-9]|7[15-9]|8[1-46-9]|9[1-79])[2-6]\\\\d{5}\",[8]],[\"9(?:6[0-3]|7[245]|8[0-24-68])\\\\d{7}\",[10]]]],\"NR\":[\"674\",\"00\",\"(?:444|55\\\\d|888)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[458]\"]]],0,0,0,0,0,0,[[\"(?:444|888)\\\\d{4}\"],[\"55[4-9]\\\\d{4}\"]]],\"NU\":[\"683\",\"00\",\"(?:[47]|888\\\\d)\\\\d{3}\",[4,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8\"]]],0,0,0,0,0,0,[[\"[47]\\\\d{3}\",[4]],[\"888[4-9]\\\\d{3}\",[7]]]],\"NZ\":[\"64\",\"0(?:0|161)\",\"2\\\\d{7,9}|(?:[34]\\\\d|6[0-35-9])\\\\d{6}|(?:508|[79]\\\\d)\\\\d{6,7}|8\\\\d{4,9}\",[5,6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{3,8})\",\"$1 $2\",[\"83\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1-$2 $3\",[\"24|[346]|7[2-57-9]|9[2-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:10|74)|[59]|80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[028]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,5})\",\"$1 $2 $3\",[\"2(?:[169]|7[0-35-9])|7|86\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"24099\\\\d{3}|(?:3[2-79]|[49][2-9]|6[235-9]|7[2-57-9])\\\\d{6}\",[8]],[\"2[0-28]\\\\d{8}|2[0-27-9]\\\\d{7}|21\\\\d{6}\",[8,9,10]],[\"508\\\\d{6,7}|80\\\\d{6,8}\",[8,9,10]],[\"90\\\\d{6,7}\",[8,9]],[\"70\\\\d{7}\",[9]],0,[\"83\\\\d{3,8}\"],[\"[28]6\\\\d{6,7}\",[8,9]]],\"00\"],\"OM\":[\"968\",\"00\",\"(?:[279]\\\\d{3}|500)\\\\d{4}|8007\\\\d{4,5}\",[7,8,9],[[\"(\\\\d{3})(\\\\d{4,6})\",\"$1 $2\",[\"[58]\"]],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"2\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[79]\"]]],0,0,0,0,0,0,[[\"2[2-6]\\\\d{6}\",[8]],[\"90[1-9]\\\\d{5}|(?:7[1289]|9[1-9])\\\\d{6}\",[8]],[\"500\\\\d{4}|8007\\\\d{4,5}\"],[\"900\\\\d{5}\",[8]]]],\"PA\":[\"507\",\"00\",\"(?:[1-57-9]|6\\\\d)\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[1-57-9]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1-$2\",[\"6\"]]],0,0,0,0,0,0,[[\"(?:1(?:0\\\\d|1[479]|2[37]|3[0137]|4[17]|5[05]|[68][58]|7[0167]|9[39])|2(?:[0235-79]\\\\d|1[0-7]|4[013-9]|8[026-9])|3(?:[089]\\\\d|1[014-7]|2[0-35]|33|4[0-579]|55|6[068]|7[06-8])|4(?:00|3[0-579]|4\\\\d|7[0-57-9])|5(?:[01]\\\\d|2[0-7]|[56]0|79)|7(?:0[09]|2[0-26-8]|3[03]|4[04]|5[05-9]|6[05]|7[0-24-9]|8[7-9]|90)|8(?:09|2[89]|3\\\\d|4[0-24-689]|5[014]|8[02])|9(?:0[5-9]|1[0135-8]|2[036-9]|3[35-79]|40|5[0457-9]|6[05-9]|7[04-9]|8[35-8]|9\\\\d))\\\\d{4}\",[7]],[\"(?:1[16]1|21[89]|6(?:[02-9]\\\\d|1[0-6])\\\\d|8(?:1[01]|7[23]))\\\\d{4}\"],[\"800\\\\d{4}\",[7]],[\"(?:8(?:22|55|60|7[78]|86)|9(?:00|81))\\\\d{4}\",[7]]]],\"PE\":[\"51\",\"19(?:1[124]|77|90)00\",\"(?:[14-8]|9\\\\d)\\\\d{7}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"1\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[4-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"]]],\"0\",0,0,0,0,0,[[\"19(?:[02-68]\\\\d|1[035-9]|7[0-689]|9[1-9])\\\\d{4}|(?:1[0-8]|4[1-4]|5[1-46]|6[1-7]|7[2-46]|8[2-4])\\\\d{6}\",[8]],[\"9\\\\d{8}\",[9]],[\"800\\\\d{5}\",[8]],[\"805\\\\d{5}\",[8]],[\"80[24]\\\\d{5}\",[8]],0,0,0,0,[\"801\\\\d{5}\",[8]]],0,\" Anexo \"],\"PF\":[\"689\",\"00\",\"[48]\\\\d{7}|4\\\\d{5}\",[6,8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"44\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[48]\"]]],0,0,0,0,0,0,[[\"4(?:[09][4-689]\\\\d|4)\\\\d{4}\"],[\"8[7-9]\\\\d{6}\",[8]]]],\"PG\":[\"675\",\"00|140[1-3]\",\"(?:180|[78]\\\\d{3})\\\\d{4}|(?:[2-589]\\\\d|64)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"18|[2-69]|85\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[78]\"]]],0,0,0,0,0,0,[[\"(?:64[1-9]|7730|85[02-46-9])\\\\d{4}|(?:3[0-2]|4[257]|5[34]|77[0-24]|9[78])\\\\d{5}\"],[\"775\\\\d{5}|(?:7[0-689]|81)\\\\d{6}\",[8]],[\"180\\\\d{4}\",[7]],0,0,0,0,0,[\"2(?:0[0-47]|7[568])\\\\d{4}\",[7]]],\"00\"],\"PH\":[\"63\",\"00\",\"1800\\\\d{7,9}|(?:2|[89]\\\\d{4})\\\\d{5}|[2-8]\\\\d{8}|[28]\\\\d{7}\",[6,8,9,10,11,12,13],[[\"(\\\\d)(\\\\d{5})\",\"$1 $2\",[\"2\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2\",\"3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"346|4(?:27|9[35])|883\",\"3469|4(?:279|9(?:30|56))|8834\"],\"(0$1)\"],[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[3-7]|8[2-8]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{4})(\\\\d{1,2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3 $4\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:(?:2[3-8]|3[2-68]|4[2-9]|5[2-6]|6[2-58]|7[24578])\\\\d{3}|88(?:22\\\\d\\\\d|42))\\\\d{4}|2\\\\d{5}(?:\\\\d{2})?|8[2-8]\\\\d{7}\",[6,8,9,10]],[\"(?:81[37]|9(?:0[5-9]|1[0-24-9]|2[0-35-9]|[35]\\\\d|4[235-9]|6[0-25-8]|7[1-9]|8[19]|9[4-9]))\\\\d{7}\",[10]],[\"1800\\\\d{7,9}\",[11,12,13]]]],\"PK\":[\"92\",\"00\",\"122\\\\d{6}|[24-8]\\\\d{10,11}|9(?:[013-9]\\\\d{8,10}|2(?:[01]\\\\d\\\\d|2(?:[025-8]\\\\d|1[01]))\\\\d{7})|(?:[2-8]\\\\d{3}|92(?:[0-7]\\\\d|8[1-9]))\\\\d{6}|[24-9]\\\\d{8}|[89]\\\\d{7}\",[8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1 $2 $3\",[\"[89]0\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"1\"]],[\"(\\\\d{2})(\\\\d{7,8})\",\"$1 $2\",[\"(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{6,7})\",\"$1 $2\",[\"2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])\",\"9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]\"],\"(0$1)\"],[\"(\\\\d{5})(\\\\d{5})\",\"$1 $2\",[\"58\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{7})\",\"$1 $2\",[\"3\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"[24-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:(?:21|42)[2-9]|58[126])\\\\d{7}|(?:2[25]|4[0146-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]\\\\d{6}|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8]))[2-9]\\\\d{5,6}\",[9,10]],[\"3(?:[014]\\\\d|2[0-5]|3[0-7]|55|64)\\\\d{7}\",[10]],[\"800\\\\d{5}\",[8]],[\"900\\\\d{5}\",[8]],[\"122\\\\d{6}\",[9]],0,[\"(?:2(?:[125]|3[2358]|4[2-4]|9[2-8])|4(?:[0-246-9]|5[3479])|5(?:[1-35-7]|4[2-467])|6(?:0[468]|[1-8])|7(?:[14]|2[236])|8(?:[16]|2[2-689]|3[23578]|4[3478]|5[2356])|9(?:1|22|3[27-9]|4[2-6]|6[3569]|9[2-7]))111\\\\d{6}\",[11,12]]]],\"PL\":[\"48\",\"00\",\"[1-57-9]\\\\d{6}(?:\\\\d{2})?|6\\\\d{5,8}\",[6,7,8,9],[[\"(\\\\d{5})\",\"$1\",[\"19\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"11|64\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1 $2 $3\",[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1\",\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19\"]],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"64\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"39|45|5[0137]|6[0469]|7[02389]|8[08]\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"1[2-8]|[2-8]|9[145]\"]]],0,0,0,0,0,0,[[\"(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])(?:[02-9]\\\\d{6}|1(?:[0-8]\\\\d{5}|9\\\\d{3}(?:\\\\d{2})?))\",[7,9]],[\"(?:45|5[0137]|6[069]|7[2389]|88)\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"70[01346-8]\\\\d{6}\",[9]],0,0,[\"804\\\\d{6}\",[9]],[\"64\\\\d{4,7}\"],[\"39\\\\d{7}\",[9]],[\"801\\\\d{6}\",[9]]]],\"PM\":[\"508\",\"00\",\"[45]\\\\d{5}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[45]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:4[1-3]|50)\\\\d{4}\"],[\"(?:4[02-4]|5[05])\\\\d{4}\"]]],\"PR\":[\"1\",\"011\",\"(?:[589]\\\\d\\\\d|787)\\\\d{7}\",[10],0,\"1\",0,0,0,0,\"787|939\",[[\"(?:787|939)[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"PS\":[\"970\",\"00\",\"[2489]2\\\\d{6}|(?:1\\\\d|5)\\\\d{8}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[2489]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:22[2-47-9]|42[45]|82[01458]|92[369])\\\\d{5}\",[8]],[\"5[69]\\\\d{7}\",[9]],[\"1800\\\\d{6}\",[10]],0,0,0,0,0,0,[\"1700\\\\d{6}\",[10]]]],\"PT\":[\"351\",\"00\",\"(?:[26-9]\\\\d|30)\\\\d{7}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2[12]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[236-9]\"]]],0,0,0,0,0,0,[[\"2(?:[12]\\\\d|[35][1-689]|4[1-59]|6[1-35689]|7[1-9]|8[1-69]|9[1256])\\\\d{6}\"],[\"6[356]9230\\\\d{3}|(?:6[036]93|9(?:[1-36]\\\\d\\\\d|480))\\\\d{5}\"],[\"80[02]\\\\d{6}\"],[\"(?:6(?:0[178]|4[68])\\\\d|76(?:0[1-57]|1[2-47]|2[237]))\\\\d{5}\"],[\"884[0-4689]\\\\d{5}\"],0,[\"70(?:7\\\\d|8[17])\\\\d{5}\"],0,[\"30\\\\d{7}\"],[\"80(?:8\\\\d|9[1579])\\\\d{5}\"]]],\"PW\":[\"680\",\"01[12]\",\"(?:[25-8]\\\\d\\\\d|345|488|900)\\\\d{4}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-9]\"]]],0,0,0,0,0,0,[[\"(?:2(?:55|77)|345|488|5(?:35|44|87)|6(?:22|54|79)|7(?:33|47)|8(?:24|55|76)|900)\\\\d{4}\"],[\"(?:6[2-4689]0|77\\\\d|88[0-4])\\\\d{4}\"]]],\"PY\":[\"595\",\"00\",\"59\\\\d{4,6}|(?:[2-46-9]\\\\d|5[0-8])\\\\d{4,7}\",[6,7,8,9],[[\"(\\\\d{3})(\\\\d{3,6})\",\"$1 $2\",[\"[2-9]0\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{3})(\\\\d{4,5})\",\"$1 $2\",[\"2[279]|3[13-5]|4[359]|5|6[347]|7[46-8]|85\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"87\"]],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-8]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36])\\\\d{5,7}|(?:2(?:2[4-68]|7[15]|9[1-5])|3(?:18|3[167]|4[2357]|51)|4(?:3[12]|5[13]|9[1-47])|5(?:[1-4]\\\\d|5[02-4])|6(?:3[1-3]|44|7[1-46-8])|7(?:4[0-4]|6[1-578]|75|8[0-8])|858)\\\\d{5,6}\",[7,8,9]],[\"9(?:51|6[129]|[78][1-6]|9[1-5])\\\\d{6}\",[9]],0,0,0,0,[\"[2-9]0\\\\d{4,7}\"],0,[\"8700[0-4]\\\\d{4}\",[9]]]],\"QA\":[\"974\",\"00\",\"[2-7]\\\\d{7}|(?:2\\\\d\\\\d|800)\\\\d{4}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"2[126]|8\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[2-7]\"]]],0,0,0,0,0,0,[[\"4[04]\\\\d{6}\",[8]],[\"(?:28|[35-7]\\\\d)\\\\d{6}\",[8]],[\"800\\\\d{4}\",[7]],0,0,0,0,[\"2(?:[12]\\\\d|61)\\\\d{4}\",[7]]]],\"RE\":[\"262\",\"00\",\"9769\\\\d{5}|(?:26|[68]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2689]\"],\"0$1\"]],\"0\",0,0,0,0,\"26[23]|69|[89]\",[[\"26(?:2\\\\d\\\\d|30[01])\\\\d{4}\"],[\"(?:69(?:2\\\\d\\\\d|3(?:0[0-46]|1[013]|2[0-2]|3[0-39]|4\\\\d|5[05]|6[0-26]|7[0-27]|8[03-8]|9[0-479]))|9769\\\\d)\\\\d{4}\"],[\"80\\\\d{7}\"],[\"89[1-37-9]\\\\d{6}\"],0,0,0,0,0,[\"8(?:1[019]|2[0156]|84|90)\\\\d{6}\"]]],\"RO\":[\"40\",\"00\",\"(?:[237]\\\\d|[89]0)\\\\d{7}|[23]\\\\d{5}\",[6,9],[[\"(\\\\d{3})(\\\\d{3})\",\"$1 $2\",[\"2[3-6]\",\"2[3-6]\\\\d9\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"219|31\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[23]1\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[237-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"[23][13-6]\\\\d{7}|(?:2(?:19\\\\d|[3-6]\\\\d9)|31\\\\d\\\\d)\\\\d\\\\d\"],[\"7120\\\\d{5}|7(?:[02-7]\\\\d|1[01]|8[03-8]|9[09])\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"90[036]\\\\d{6}\",[9]],0,0,[\"37\\\\d{7}\",[9]],0,0,[\"801\\\\d{6}\",[9]]],0,\" int \"],\"RS\":[\"381\",\"00\",\"38[02-9]\\\\d{6,9}|6\\\\d{7,9}|90\\\\d{4,8}|38\\\\d{5,6}|(?:7\\\\d\\\\d|800)\\\\d{3,9}|(?:[12]\\\\d|3[0-79])\\\\d{5,10}\",[6,7,8,9,10,11,12],[[\"(\\\\d{3})(\\\\d{3,9})\",\"$1 $2\",[\"(?:2[389]|39)0|[7-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{5,10})\",\"$1 $2\",[\"[1-36]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:11[1-9]\\\\d|(?:2[389]|39)(?:0[2-9]|[2-9]\\\\d))\\\\d{3,8}|(?:1[02-9]|2[0-24-7]|3[0-8])[2-9]\\\\d{4,9}\",[7,8,9,10,11,12]],[\"6(?:[0-689]|7\\\\d)\\\\d{6,7}\",[8,9,10]],[\"800\\\\d{3,9}\"],[\"(?:78\\\\d|90[0169])\\\\d{3,7}\",[6,7,8,9,10]],0,0,[\"7[06]\\\\d{4,10}\"]]],\"RU\":[\"7\",\"810\",\"[347-9]\\\\d{9}\",[10],[[\"(\\\\d{4})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-8]|2[1-9])\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))\",\"7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2\"],\"8 ($1)\",1],[\"(\\\\d{5})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"7(?:1[0-68]|2[1-9])\",\"7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))\",\"7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"8 ($1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[3489]\"],\"8 ($1)\",1]],\"8\",0,0,0,0,\"3[04-689]|[489]\",[[\"(?:3(?:0[12]|4[1-35-79]|5[1-3]|65|8[1-58]|9[0145])|4(?:01|1[1356]|2[13467]|7[1-5]|8[1-7]|9[1-689])|8(?:1[1-8]|2[01]|3[13-6]|4[0-8]|5[15]|6[1-35-79]|7[1-37-9]))\\\\d{7}\"],[\"9\\\\d{9}\"],[\"80[04]\\\\d{7}\"],[\"80[39]\\\\d{7}\"],[\"808\\\\d{7}\"]],\"8~10\"],\"RW\":[\"250\",\"00\",\"(?:06|[27]\\\\d\\\\d|[89]00)\\\\d{6}\",[8,9],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"0\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[7-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:06|2[258]\\\\d)\\\\d{6}\"],[\"7[238]\\\\d{7}\",[9]],[\"800\\\\d{6}\",[9]],[\"900\\\\d{6}\",[9]]]],\"SA\":[\"966\",\"00\",\"92\\\\d{7}|(?:[15]|8\\\\d)\\\\d{8}\",[9,10],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"9\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"81\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]]],\"0\",0,0,0,0,0,[[\"1(?:1\\\\d|2[24-8]|3[35-8]|4[3-68]|6[2-5]|7[235-7])\\\\d{6}\",[9]],[\"5(?:[013-689]\\\\d|7[0-36-8])\\\\d{6}\",[9]],[\"800\\\\d{7}\",[10]],[\"925\\\\d{6}\",[9]],0,0,[\"811\\\\d{7}\",[10]],0,0,[\"920\\\\d{6}\",[9]]]],\"SB\":[\"677\",\"0[01]\",\"(?:[1-6]|[7-9]\\\\d\\\\d)\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7|8[4-9]|9(?:[1-8]|9[0-8])\"]]],0,0,0,0,0,0,[[\"(?:1[4-79]|[23]\\\\d|4[0-2]|5[03]|6[0-37])\\\\d{3}\",[5]],[\"48\\\\d{3}|(?:(?:7[1-9]|8[4-9])\\\\d|9(?:1[2-9]|2[013-9]|3[0-2]|[46]\\\\d|5[0-46-9]|7[0-689]|8[0-79]|9[0-8]))\\\\d{4}\"],[\"1[38]\\\\d{3}\",[5]],0,0,0,0,0,[\"5[12]\\\\d{3}\",[5]]]],\"SC\":[\"248\",\"010|0[0-2]\",\"8000\\\\d{3}|(?:[249]\\\\d|64)\\\\d{5}\",[7],[[\"(\\\\d)(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[246]\"]]],0,0,0,0,0,0,[[\"4[2-46]\\\\d{5}\"],[\"2[5-8]\\\\d{5}\"],[\"8000\\\\d{3}\"],0,0,0,0,0,[\"971\\\\d{4}|(?:64|95)\\\\d{5}\"]],\"00\"],\"SD\":[\"249\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"1(?:5[3-7]|8[35-7])\\\\d{6}\"],[\"(?:1[0-2]|9[0-3569])\\\\d{7}\"]]],\"SE\":[\"46\",\"00\",\"(?:[26]\\\\d\\\\d|9)\\\\d{9}|[1-9]\\\\d{8}|[1-689]\\\\d{7}|[1-4689]\\\\d{6}|2\\\\d{5}\",[6,7,8,9,10],[[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"20\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3\",[\"[12][136]|3[356]|4[0246]|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d)(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{2})\",\"$1-$2 $3\",[\"1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{3})(\\\\d{2,3})(\\\\d{3})\",\"$1-$2 $3\",[\"9(?:00|39|44)\"],\"0$1\",0,\"$1 $2 $3\"],[\"(\\\\d{2})(\\\\d{2,3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"10|7\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"8\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4\",[\"[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{3})\",\"$1-$2 $3 $4\",[\"9\"],\"0$1\",0,\"$1 $2 $3 $4\"],[\"(\\\\d{3})(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1-$2 $3 $4 $5\",[\"[26]\"],\"0$1\",0,\"$1 $2 $3 $4 $5\"]],\"0\",0,0,0,0,0,[[\"(?:(?:[12][136]|3[356]|4[0246]|6[03]|8\\\\d)\\\\d|90[1-9])\\\\d{4,6}|(?:1(?:2[0-35]|4[0-4]|5[0-25-9]|7[13-6]|[89]\\\\d)|2(?:2[0-7]|4[0136-8]|5[0138]|7[018]|8[01]|9[0-57])|3(?:0[0-4]|1\\\\d|2[0-25]|4[056]|7[0-2]|8[0-3]|9[023])|4(?:1[013-8]|3[0135]|5[14-79]|7[0-246-9]|8[0156]|9[0-689])|5(?:0[0-6]|[15][0-5]|2[0-68]|3[0-4]|4\\\\d|6[03-5]|7[013]|8[0-79]|9[01])|6(?:1[1-3]|2[0-4]|4[02-57]|5[0-37]|6[0-3]|7[0-2]|8[0247]|9[0-356])|9(?:1[0-68]|2\\\\d|3[02-5]|4[0-3]|5[0-4]|[68][01]|7[0135-8]))\\\\d{5,6}\",[7,8,9]],[\"7[02369]\\\\d{7}\",[9]],[\"20\\\\d{4,7}\",[6,7,8,9]],[\"649\\\\d{6}|9(?:00|39|44)[1-8]\\\\d{3,6}\",[7,8,9,10]],[\"75[1-8]\\\\d{6}\",[9]],0,[\"10[1-8]\\\\d{6}\",[9]],[\"74[02-9]\\\\d{6}\",[9]],0,[\"77[0-7]\\\\d{6}\",[9]]]],\"SG\":[\"65\",\"0[0-3]\\\\d\",\"(?:(?:1\\\\d|8)\\\\d\\\\d|7000)\\\\d{7}|[3689]\\\\d{7}\",[8,10,11],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[369]|8[1-9]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"8\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"]],[\"(\\\\d{4})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[[\"662[0-24-9]\\\\d{4}|6(?:[1-578]\\\\d|6[013-57-9]|9[0-35-9])\\\\d{5}\",[8]],[\"(?:8(?:[1-8]\\\\d\\\\d|9(?:[01]\\\\d|2[1-8]|3[0-4]))|9[0-8]\\\\d\\\\d)\\\\d{4}\",[8]],[\"(?:18|8)00\\\\d{7}\",[10,11]],[\"1900\\\\d{7}\",[11]],0,0,[\"7000\\\\d{7}\",[11]],0,[\"(?:3[12]\\\\d\\\\d|6666)\\\\d{4}\",[8]]]],\"SH\":[\"290\",\"00\",\"(?:[256]\\\\d|8)\\\\d{3}\",[4,5],0,0,0,0,0,0,\"[256]\",[[\"2(?:[0-57-9]\\\\d|6[4-9])\\\\d\\\\d\"],[\"[56]\\\\d{4}\",[5]],0,0,0,0,0,0,[\"262\\\\d\\\\d\",[5]]]],\"SI\":[\"386\",\"00|10(?:22|66|88|99)\",\"[1-7]\\\\d{7}|8\\\\d{4,7}|90\\\\d{4,6}\",[5,6,7,8],[[\"(\\\\d{2})(\\\\d{3,6})\",\"$1 $2\",[\"8[09]|9\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"59|8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[37][01]|4[0139]|51|6\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[1-57]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"(?:[1-357][2-8]|4[24-8])\\\\d{6}\",[8]],[\"65(?:1\\\\d|55|[67]0)\\\\d{4}|(?:[37][01]|4[0139]|51|6[489])\\\\d{6}\",[8]],[\"80\\\\d{4,6}\",[6,7,8]],[\"89[1-3]\\\\d{2,5}|90\\\\d{4,6}\"],0,0,0,0,[\"(?:59\\\\d\\\\d|8(?:1(?:[67]\\\\d|8[01389])|2(?:0\\\\d|2[0378]|8[0-2489])|3[389]\\\\d))\\\\d{4}\",[8]]],\"00\"],\"SJ\":[\"47\",\"00\",\"0\\\\d{4}|(?:[4589]\\\\d|79)\\\\d{6}\",[5,8],0,0,0,0,0,0,\"79\",[[\"79\\\\d{6}\",[8]],[\"(?:4[015-8]|5[89]|9\\\\d)\\\\d{6}\",[8]],[\"80[01]\\\\d{5}\",[8]],[\"82[09]\\\\d{5}\",[8]],[\"880\\\\d{5}\",[8]],0,[\"(?:0[2-9]|81(?:0(?:0[7-9]|1\\\\d)|5\\\\d\\\\d))\\\\d{3}\"],0,[\"85[0-5]\\\\d{5}\",[8]],[\"810(?:0[0-6]|[2-8]\\\\d)\\\\d{3}\",[8]]]],\"SK\":[\"421\",\"00\",\"[2-689]\\\\d{8}|[2-59]\\\\d{6}|[2-5]\\\\d{5}\",[6,7,9],[[\"(\\\\d)(\\\\d{2})(\\\\d{3,4})\",\"$1 $2 $3\",[\"21\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{2})(\\\\d{2,3})\",\"$1 $2 $3\",[\"[3-5][1-8]1\",\"[3-5][1-8]1[67]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{3})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"2\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[689]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1/$2 $3 $4\",[\"[3-5]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:16|[2-9]\\\\d{3})|[3-5][1-8]\\\\d{3})\\\\d{4}|(?:2|[3-5][1-8])1[67]\\\\d{3}|[3-5][1-8]16\\\\d\\\\d\"],[\"909[1-9]\\\\d{5}|9(?:0[1-8]|1[0-24-9]|[45]\\\\d)\\\\d{6}\",[9]],[\"800\\\\d{6}\",[9]],[\"9(?:00|[78]\\\\d)\\\\d{6}\",[9]],0,0,[\"96\\\\d{7}\",[9]],[\"9090\\\\d{3}\",[7]],[\"6(?:02|5[0-4]|9[0-6])\\\\d{6}\",[9]],[\"8[5-9]\\\\d{7}\",[9]]]],\"SL\":[\"232\",\"00\",\"(?:[2378]\\\\d|99)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"[237-9]\"],\"(0$1)\"]],\"0\",0,0,0,0,0,[[\"22\\\\d{6}\"],[\"(?:25|3[0134]|7[5-9]|8[08]|99)\\\\d{6}\"]]],\"SM\":[\"378\",\"00\",\"(?:0549|[5-7]\\\\d)\\\\d{6}\",[8,10],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[5-7]\"]],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"0\"]]],0,0,\"([89]\\\\d{5})$\",\"0549$1\",0,0,[[\"0549(?:8[0157-9]|9\\\\d)\\\\d{4}\",[10]],[\"6[16]\\\\d{6}\",[8]],0,[\"7[178]\\\\d{6}\",[8]],0,0,0,0,[\"5[158]\\\\d{6}\",[8]]]],\"SN\":[\"221\",\"00\",\"(?:[378]\\\\d{4}|93330)\\\\d{4}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"8\"]],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[379]\"]]],0,0,0,0,0,0,[[\"3(?:0(?:1[0-2]|80)|282|3(?:8[1-9]|9[3-9])|611)\\\\d{5}\"],[\"7(?:[06-8]\\\\d|21|90)\\\\d{6}\"],[\"800\\\\d{6}\"],[\"88[4689]\\\\d{6}\"],0,0,0,0,[\"93330\\\\d{4}|3(?:392|9[01]\\\\d)\\\\d{5}\"],[\"81[02468]\\\\d{6}\"]]],\"SO\":[\"252\",\"00\",\"[346-9]\\\\d{8}|[12679]\\\\d{7}|(?:[1-4]\\\\d|59)\\\\d{5}|[1348]\\\\d{5}\",[6,7,8,9],[[\"(\\\\d{2})(\\\\d{4})\",\"$1 $2\",[\"8[125]\"]],[\"(\\\\d{6})\",\"$1\",[\"[134]\"]],[\"(\\\\d)(\\\\d{6})\",\"$1 $2\",[\"1|2[0-79]|3[0-46-8]|4[0-7]|59\"]],[\"(\\\\d)(\\\\d{7})\",\"$1 $2\",[\"24|[67]\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[348]|64|79[0-8]|90\"]],[\"(\\\\d{2})(\\\\d{5,7})\",\"$1 $2\",[\"1|28|6[1-35-9]|799|9[2-9]\"]]],\"0\",0,0,0,0,0,[[\"(?:1\\\\d|2[0-79]|3[0-46-8]|4[0-7]|59)\\\\d{5}|(?:[134]\\\\d|8[125])\\\\d{4}\",[6,7]],[\"28\\\\d{5}|(?:6[1-9]|79)\\\\d{6,7}|(?:15|24|(?:3[59]|4[89]|8[08])\\\\d|60|7[1-8]|9(?:0[67]|[2-9]))\\\\d{6}\",[7,8,9]]]],\"SR\":[\"597\",\"00\",\"(?:[2-5]|68|[78]\\\\d)\\\\d{5}\",[6,7],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1-$2-$3\",[\"56\"]],[\"(\\\\d{3})(\\\\d{3})\",\"$1-$2\",[\"[2-5]\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1-$2\",[\"[6-8]\"]]],0,0,0,0,0,0,[[\"(?:2[1-3]|3[0-7]|(?:4|68)\\\\d|5[2-58])\\\\d{4}\"],[\"(?:7[124-7]|8[125-9])\\\\d{5}\",[7]],0,0,0,0,0,0,[\"56\\\\d{4}\",[6]]]],\"SS\":[\"211\",\"00\",\"[19]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[19]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"18\\\\d{7}\"],[\"(?:12|9[1257])\\\\d{7}\"]]],\"ST\":[\"239\",\"00\",\"(?:22|9\\\\d)\\\\d{5}\",[7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[29]\"]]],0,0,0,0,0,0,[[\"22\\\\d{5}\"],[\"900[5-9]\\\\d{3}|9(?:0[1-9]|[89]\\\\d)\\\\d{4}\"]]],\"SV\":[\"503\",\"00\",\"[267]\\\\d{7}|[89]00\\\\d{4}(?:\\\\d{4})?\",[7,8,11],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[89]\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[267]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"]]],0,0,0,0,0,0,[[\"2[1-6]\\\\d{6}\",[8]],[\"[67]\\\\d{7}\",[8]],[\"800\\\\d{4}(?:\\\\d{4})?\",[7,11]],[\"900\\\\d{4}(?:\\\\d{4})?\",[7,11]]]],\"SX\":[\"1\",\"011\",\"7215\\\\d{6}|(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|(5\\\\d{6})$\",\"721$1\",0,\"721\",[[\"7215(?:4[2-8]|8[239]|9[056])\\\\d{4}\"],[\"7215(?:1[02]|2\\\\d|5[034679]|8[014-8])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"SY\":[\"963\",\"00\",\"[1-39]\\\\d{8}|[1-5]\\\\d{7}\",[8,9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-5]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"[12]1\\\\d{6,7}|(?:1(?:[2356]|4\\\\d)|2[235]|3(?:[13]\\\\d|4)|4[13]|5[1-3])\\\\d{6}\"],[\"9(?:22|[3-589]\\\\d|6[024-9])\\\\d{6}\",[9]]]],\"SZ\":[\"268\",\"00\",\"0800\\\\d{4}|(?:[237]\\\\d|900)\\\\d{6}\",[8,9],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[0237]\"]],[\"(\\\\d{5})(\\\\d{4})\",\"$1 $2\",[\"9\"]]],0,0,0,0,0,0,[[\"[23][2-5]\\\\d{6}\",[8]],[\"7[6-9]\\\\d{6}\",[8]],[\"0800\\\\d{4}\",[8]],[\"900\\\\d{6}\",[9]],0,0,0,0,[\"70\\\\d{6}\",[8]]]],\"TA\":[\"290\",\"00\",\"8\\\\d{3}\",[4],0,0,0,0,0,0,\"8\",[[\"8\\\\d{3}\"]]],\"TC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|649|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-479]\\\\d{6})$\",\"649$1\",0,\"649\",[[\"649(?:712|9(?:4\\\\d|50))\\\\d{4}\"],[\"649(?:2(?:3[129]|4[1-7])|3(?:3[1-389]|4[1-8])|4[34][1-3])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,0,0,[\"64971[01]\\\\d{4}\"]]],\"TD\":[\"235\",\"00|16\",\"(?:22|[69]\\\\d|77)\\\\d{6}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[2679]\"]]],0,0,0,0,0,0,[[\"22(?:[37-9]0|5[0-5]|6[89])\\\\d{4}\"],[\"(?:6[023568]|77|9\\\\d)\\\\d{6}\"]],\"00\"],\"TG\":[\"228\",\"00\",\"[279]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[279]\"]]],0,0,0,0,0,0,[[\"2(?:2[2-7]|3[23]|4[45]|55|6[67]|77)\\\\d{5}\"],[\"(?:7[09]|9[0-36-9])\\\\d{6}\"]]],\"TH\":[\"66\",\"00[1-9]\",\"1\\\\d{8,9}|(?:[2-57]|[689]\\\\d)\\\\d{7}\",[8,9,10],[[\"(\\\\d)(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"2\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"14|[3-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"1\"]]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d|3[2-9]|4[2-5]|5[2-6]|7[3-7])\\\\d{6}\",[8]],[\"(?:14|6[1-6]|[89]\\\\d)\\\\d{7}\",[9]],[\"1800\\\\d{6}\",[10]],[\"1900\\\\d{6}\",[10]],0,0,0,0,[\"6[08]\\\\d{7}\",[9]]]],\"TJ\":[\"992\",\"810\",\"(?:00|11|[3-579]\\\\d|88)\\\\d{7}\",[9],[[\"(\\\\d{6})(\\\\d)(\\\\d{2})\",\"$1 $2 $3\",[\"331\",\"3317\"],0,1],[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[34]7|91[78]\"],0,1],[\"(\\\\d{4})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"3\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[0457-9]|11\"],0,1]],\"8\",0,0,0,0,0,[[\"(?:3(?:1[3-5]|2[245]|3[12]|4[24-7]|5[25]|72)|4(?:46|74|87))\\\\d{6}\"],[\"41[18]\\\\d{6}|(?:00|11|5[05]|7[07]|88|9\\\\d)\\\\d{7}\"]],\"8~10\"],\"TK\":[\"690\",\"00\",\"[2-47]\\\\d{3,6}\",[4,5,6,7],0,0,0,0,0,0,0,[[\"(?:2[2-4]|[34]\\\\d)\\\\d{2,5}\"],[\"7[2-4]\\\\d{2,5}\"]]],\"TL\":[\"670\",\"00\",\"7\\\\d{7}|(?:[2-47]\\\\d|[89]0)\\\\d{5}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[2-489]|70\"]],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:2[1-5]|3[1-9]|4[1-4])\\\\d{5}\",[7]],[\"7[3-8]\\\\d{6}\",[8]],[\"80\\\\d{5}\",[7]],[\"90\\\\d{5}\",[7]],[\"70\\\\d{5}\",[7]]]],\"TM\":[\"993\",\"810\",\"[1-6]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"12\"],\"(8 $1)\"],[\"(\\\\d{3})(\\\\d)(\\\\d{2})(\\\\d{2})\",\"$1 $2-$3-$4\",[\"[1-5]\"],\"(8 $1)\"],[\"(\\\\d{2})(\\\\d{6})\",\"$1 $2\",[\"6\"],\"8 $1\"]],\"8\",0,0,0,0,0,[[\"(?:1(?:2\\\\d|3[1-9])|2(?:22|4[0-35-8])|3(?:22|4[03-9])|4(?:22|3[128]|4\\\\d|6[15])|5(?:22|5[7-9]|6[014-689]))\\\\d{5}\"],[\"6[1-9]\\\\d{6}\"]],\"8~10\"],\"TN\":[\"216\",\"00\",\"[2-57-9]\\\\d{7}\",[8],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-57-9]\"]]],0,0,0,0,0,0,[[\"81200\\\\d{3}|(?:3[0-2]|7\\\\d)\\\\d{6}\"],[\"3(?:001|[12]40)\\\\d{4}|(?:(?:[259]\\\\d|4[0-6])\\\\d|3(?:1[1-35]|6[0-4]|91))\\\\d{5}\"],[\"8010\\\\d{4}\"],[\"88\\\\d{6}\"],0,0,0,0,0,[\"8[12]10\\\\d{4}\"]]],\"TO\":[\"676\",\"00\",\"(?:0800|[5-8]\\\\d{3})\\\\d{3}|[2-8]\\\\d{4}\",[5,7],[[\"(\\\\d{2})(\\\\d{3})\",\"$1-$2\",[\"[2-4]|50|6[09]|7[0-24-69]|8[05]\"]],[\"(\\\\d{4})(\\\\d{3})\",\"$1 $2\",[\"0\"]],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[5-8]\"]]],0,0,0,0,0,0,[[\"(?:2\\\\d|3[0-8]|4[0-4]|50|6[09]|7[0-24-69]|8[05])\\\\d{3}\",[5]],[\"(?:6(?:3[02]|85|90)|7(?:[2-46]0|[578]\\\\d)|8[46-9]\\\\d)\\\\d{4}\",[7]],[\"0800\\\\d{3}\",[7]],[\"55[04]\\\\d{4}\",[7]]]],\"TR\":[\"90\",\"00\",\"(?:4|8\\\\d{5})\\\\d{6}|(?:[2-58]\\\\d\\\\d|900)\\\\d{7}\",[7,10,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"512|8[0589]|90\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"5(?:[0-59]|61)\",\"5(?:[0-59]|616)\",\"5(?:[0-59]|6161)\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[24][1-8]|3[1-9]\"],\"(0$1)\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{6})\",\"$1 $2 $3\",[\"80\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"(?:2(?:[13][26]|[28][2468]|[45][268]|[67][246])|3(?:[13][28]|[24-6][2468]|[78][02468]|92)|4(?:[16][246]|[23578][2468]|4[26]))\\\\d{7}\",[10]],[\"56161\\\\d{5}|5(?:0[15-7]|1[06]|24|[34]\\\\d|5[1-59]|9[46])\\\\d{7}\",[10]],[\"800\\\\d{7}(?:\\\\d{2})?\",[10,12]],[\"(?:8[89]8|900)\\\\d{7}\",[10]],[\"592(?:21[12]|461)\\\\d{4}\",[10]],0,[\"(?:444|850\\\\d{3})\\\\d{4}\",[7,10]],[\"512\\\\d{7}\",[10]]]],\"TT\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-46-8]\\\\d{6})$\",\"868$1\",0,\"868\",[[\"868(?:2(?:01|1[89]|[23]\\\\d|4[0-2])|6(?:0[7-9]|1[02-8]|2[1-9]|[3-69]\\\\d|7[0-79])|82[124])\\\\d{4}\"],[\"868(?:2(?:6[346-9]|[7-9]\\\\d)|[37](?:0[1-9]|1[02-9]|[2-9]\\\\d)|4[6-9]\\\\d|6(?:20|78|8\\\\d))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"TV\":[\"688\",\"00\",\"(?:2|7\\\\d\\\\d|90)\\\\d{4}\",[5,6,7],0,0,0,0,0,0,0,[[\"2[02-9]\\\\d{3}\",[5]],[\"(?:7[01]\\\\d|90)\\\\d{4}\",[6,7]]]],\"TW\":[\"886\",\"0(?:0[25-79]|19)\",\"[2-689]\\\\d{8}|7\\\\d{9,10}|[2-8]\\\\d{7}|2\\\\d{6}\",[7,8,9,10,11],[[\"(\\\\d{2})(\\\\d)(\\\\d{4})\",\"$1 $2 $3\",[\"202\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[258]0\"],\"0$1\"],[\"(\\\\d)(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]\",\"[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4,5})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[2-8]\\\\d|370|55[01]|7[1-9])\\\\d{6}|4(?:(?:0(?:0[1-9]|[2-48]\\\\d)|1[023]\\\\d)\\\\d{4,5}|(?:[239]\\\\d\\\\d|4(?:0[56]|12|49))\\\\d{5})|6(?:[01]\\\\d{7}|4(?:0[56]|12|24|4[09])\\\\d{4,5})|8(?:(?:2(?:3\\\\d|4[0-269]|[578]0|66)|36[24-9]|90\\\\d\\\\d)\\\\d{4}|4(?:0[56]|12|24|4[09])\\\\d{4,5})|(?:2(?:2(?:0\\\\d\\\\d|4(?:0[68]|[249]0|3[0-467]|5[0-25-9]|6[0235689]))|(?:3(?:[09]\\\\d|1[0-4])|(?:4\\\\d|5[0-49]|6[0-29]|7[0-5])\\\\d)\\\\d)|(?:(?:3[2-9]|5[2-8]|6[0-35-79]|8[7-9])\\\\d\\\\d|4(?:2(?:[089]\\\\d|7[1-9])|(?:3[0-4]|[78]\\\\d|9[01])\\\\d))\\\\d)\\\\d{3}\",[8,9]],[\"(?:40001[0-2]|9[0-8]\\\\d{4})\\\\d{3}\",[9]],[\"80[0-79]\\\\d{6}|800\\\\d{5}\",[8,9]],[\"20(?:[013-9]\\\\d\\\\d|2)\\\\d{4}\",[7,9]],[\"99\\\\d{7}\",[9]],0,[\"50[0-46-9]\\\\d{6}\",[9]],0,[\"7010(?:[0-2679]\\\\d|3[0-7]|8[0-5])\\\\d{5}|70\\\\d{8}\",[10,11]]],0,\"#\"],\"TZ\":[\"255\",\"00[056]\",\"(?:[26-8]\\\\d|41|90)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[24]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[67]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"2[2-8]\\\\d{7}\"],[\"(?:6[2-9]|7[13-9])\\\\d{7}\"],[\"80[08]\\\\d{6}\"],[\"90\\\\d{7}\"],0,0,0,0,[\"41\\\\d{7}\"],[\"8(?:40|6[01])\\\\d{6}\"]]],\"UA\":[\"380\",\"00\",\"[89]\\\\d{9}|[3-9]\\\\d{8}\",[9,10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]\",\"6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\",\"4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"[3-6]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[89]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:3[1-8]|4[13-8]|5[1-7]|6[12459])\\\\d{7}\",[9]],[\"(?:50|6[36-8]|7[1-3]|9[1-9])\\\\d{7}\",[9]],[\"800[1-8]\\\\d{5,6}\"],[\"900[239]\\\\d{5,6}\"],0,0,0,0,[\"89[1-579]\\\\d{6}\",[9]]],\"0~0\"],\"UG\":[\"256\",\"00[057]\",\"800\\\\d{6}|(?:[29]0|[347]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{4})(\\\\d{5})\",\"$1 $2\",[\"202\",\"2024\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{6})\",\"$1 $2\",[\"[27-9]|4(?:6[45]|[7-9])\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[34]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:20(?:(?:(?:[0147]\\\\d|5[0-4])\\\\d|2(?:40|[5-9]\\\\d)|3(?:0[67]|2[0-4])|810)\\\\d|6(?:00[0-2]|[15-9]\\\\d\\\\d|30[0-4]))|[34]\\\\d{5})\\\\d{3}\"],[\"7260\\\\d{5}|7(?:[0157-9]\\\\d|20|4[0-4])\\\\d{6}\"],[\"800[1-3]\\\\d{5}\"],[\"90[1-3]\\\\d{6}\"]]],\"US\":[\"1\",\"011\",\"[2-9]\\\\d{9}\",[10],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{4})\",\"($1) $2-$3\",[\"[2-9]\"],0,1,\"$1-$2-$3\"]],\"1\",0,0,0,0,0,[[\"(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\\\d{6}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"],0,[\"710[2-9]\\\\d{6}\"]]],\"UY\":[\"598\",\"0(?:0|1[3-9]\\\\d)\",\"(?:[249]\\\\d\\\\d|80)\\\\d{5}|9\\\\d{6}\",[7,8],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"8|90\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"9\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\",[\"[24]\"]]],\"0\",0,0,0,0,0,[[\"(?:2\\\\d|4[2-7])\\\\d{6}\",[8]],[\"9[1-9]\\\\d{6}\",[8]],[\"80[05]\\\\d{4}\",[7]],[\"90[0-8]\\\\d{4}\",[7]]],\"00\",\" int. \"],\"UZ\":[\"998\",\"810\",\"[679]\\\\d{8}\",[9],[[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[679]\"],\"8 $1\"]],\"8\",0,0,0,0,0,[[\"78(?:1(?:13|2[02]|50)|2(?:10|2[139]|98)|77[01])\\\\d{4}|(?:6(?:1(?:22|3[124]|4[1-4]|5[1-3578]|64)|2(?:22|3[0-57-9]|41)|5(?:22|3[3-7]|5[024-8])|6\\\\d\\\\d|7(?:[23]\\\\d|7[69])|9(?:22|4[1-8]|6[135]))|7(?:0(?:5[4-9]|6[0146]|7[124-6]|9[135-8])|1[12]\\\\d|2(?:22|3[13-57-9]|4[1-3579]|5[14])|3(?:2\\\\d|3[1578]|4[1-35-7]|5[1-57]|61)|4(?:2\\\\d|3[1-579]|7[1-79])|5(?:22|5[1-9]|6[1457])|6(?:22|3[12457]|4[13-8])|9(?:22|5[1-9])))\\\\d{5}\"],[\"(?:6(?:1(?:2(?:2[01]|98)|35[0-4]|50\\\\d|61[23]|7(?:[01][017]|4\\\\d|55|9[5-9]))|2(?:(?:11|7\\\\d)\\\\d|2(?:[12]1|9[01379])|5(?:[126]\\\\d|3[0-4]))|5(?:19[01]|2(?:27|9[26])|(?:30|59|7\\\\d)\\\\d)|6(?:2(?:1[5-9]|2[0367]|38|41|52|60)|(?:3[79]|9[0-3])\\\\d|4(?:56|83)|7(?:[07]\\\\d|1[017]|3[07]|4[047]|5[057]|67|8[0178]|9[79]))|7(?:2(?:24|3[237]|4[5-9]|7[15-8])|5(?:7[12]|8[0589])|7(?:0\\\\d|[39][07])|9(?:0\\\\d|7[079]))|9(?:2(?:1[1267]|3[01]|5\\\\d|7[0-4])|(?:5[67]|7\\\\d)\\\\d|6(?:2[0-26]|8\\\\d)))|7(?:0\\\\d{3}|1(?:13[01]|6(?:0[47]|1[67]|66)|71[3-69]|98\\\\d)|2(?:2(?:2[79]|95)|3(?:2[5-9]|6[0-6])|57\\\\d|7(?:0\\\\d|1[17]|2[27]|3[37]|44|5[057]|66|88))|3(?:2(?:1[0-6]|21|3[469]|7[159])|(?:33|9[4-6])\\\\d|5(?:0[0-4]|5[579]|9\\\\d)|7(?:[0-3579]\\\\d|4[0467]|6[67]|8[078]))|4(?:2(?:29|5[0257]|6[0-7]|7[1-57])|5(?:1[0-4]|8\\\\d|9[5-9])|7(?:0\\\\d|1[024589]|2[0-27]|3[0137]|[46][07]|5[01]|7[5-9]|9[079])|9(?:7[015-9]|[89]\\\\d))|5(?:112|2(?:0\\\\d|2[29]|[49]4)|3[1568]\\\\d|52[6-9]|7(?:0[01578]|1[017]|[23]7|4[047]|[5-7]\\\\d|8[78]|9[079]))|6(?:2(?:2[1245]|4[2-4])|39\\\\d|41[179]|5(?:[349]\\\\d|5[0-2])|7(?:0[017]|[13]\\\\d|22|44|55|67|88))|9(?:22[128]|3(?:2[0-4]|7\\\\d)|57[02569]|7(?:2[05-9]|3[37]|4\\\\d|60|7[2579]|87|9[07])))|9[0-57-9]\\\\d{3})\\\\d{4}\"]],\"8~10\"],\"VA\":[\"39\",\"00\",\"0\\\\d{5,10}|3[0-8]\\\\d{7,10}|55\\\\d{8}|8\\\\d{5}(?:\\\\d{2,4})?|(?:1\\\\d|39)\\\\d{7,8}\",[6,7,8,9,10,11],0,0,0,0,0,0,\"06698\",[[\"06698\\\\d{1,6}\"],[\"3[1-9]\\\\d{8}|3[2-9]\\\\d{7}\",[9,10]],[\"80(?:0\\\\d{3}|3)\\\\d{3}\",[6,9]],[\"(?:0878\\\\d\\\\d|89(?:2|4[5-9]\\\\d))\\\\d{3}|89[45][0-4]\\\\d\\\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\\\d{6}\",[6,8,9,10]],[\"1(?:78\\\\d|99)\\\\d{6}\",[9,10]],0,0,0,[\"55\\\\d{8}\",[10]],[\"84(?:[08]\\\\d{3}|[17])\\\\d{3}\",[6,9]]]],\"VC\":[\"1\",\"011\",\"(?:[58]\\\\d\\\\d|784|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-7]\\\\d{6})$\",\"784$1\",0,\"784\",[[\"784(?:266|3(?:6[6-9]|7\\\\d|8[0-24-6])|4(?:38|5[0-36-8]|8[0-8])|5(?:55|7[0-2]|93)|638|784)\\\\d{4}\"],[\"784(?:4(?:3[0-5]|5[45]|89|9[0-8])|5(?:2[6-9]|3[0-4]))\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VE\":[\"58\",\"00\",\"[89]00\\\\d{7}|(?:[24]\\\\d|50)\\\\d{8}\",[10],[[\"(\\\\d{3})(\\\\d{7})\",\"$1-$2\",[\"[24589]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2(?:12|3[457-9]|[467]\\\\d|[58][1-9]|9[1-6])|50[01])\\\\d{7}\"],[\"4(?:1[24-8]|2[46])\\\\d{7}\"],[\"800\\\\d{7}\"],[\"900\\\\d{7}\"]]],\"VG\":[\"1\",\"011\",\"(?:284|[58]\\\\d\\\\d|900)\\\\d{7}\",[10],0,\"1\",0,\"1|([2-578]\\\\d{6})$\",\"284$1\",0,\"284\",[[\"284496[0-5]\\\\d{3}|284(?:229|4(?:22|9[45])|774|8(?:52|6[459]))\\\\d{4}\"],[\"284496[6-9]\\\\d{3}|284(?:3(?:0[0-3]|4[0-7]|68|9[34])|4(?:4[0-6]|68|99)|54[0-57])\\\\d{4}\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VI\":[\"1\",\"011\",\"[58]\\\\d{9}|(?:34|90)0\\\\d{7}\",[10],0,\"1\",0,\"1|([2-9]\\\\d{6})$\",\"340$1\",0,\"340\",[[\"340(?:2(?:0[12]|2[06-8]|4[49]|77)|3(?:32|44)|4(?:22|7[34]|89)|5(?:1[34]|55)|6(?:2[56]|4[23]|77|9[023])|7(?:1[2-57-9]|27|7\\\\d)|884|998)\\\\d{4}\"],[\"\"],[\"8(?:00|33|44|55|66|77|88)[2-9]\\\\d{6}\"],[\"900[2-9]\\\\d{6}\"],[\"5(?:00|2[12]|33|44|66|77|88)[2-9]\\\\d{6}\"]]],\"VN\":[\"84\",\"00\",\"[12]\\\\d{9}|[135-9]\\\\d{8}|[16]\\\\d{7}|[16-8]\\\\d{6}\",[7,8,9,10],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"80\"],\"0$1\",1],[\"(\\\\d{4})(\\\\d{4,6})\",\"$1 $2\",[\"1\"],0,1],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3 $4\",[\"[69]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[3578]\"],\"0$1\",1],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"2[48]\"],\"0$1\",1],[\"(\\\\d{3})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"2\"],\"0$1\",1]],\"0\",0,0,0,0,0,[[\"2(?:0[3-9]|1[0-689]|2[0-25-9]|3[2-9]|4[2-8]|5[124-9]|6[0-39]|7[0-7]|8[2-79]|9[0-4679])\\\\d{7}\",[10]],[\"(?:52[238]|8(?:79|9[689])|99[013-9])\\\\d{6}|(?:3\\\\d|5[689]|7[06-9]|8[1-68]|9[0-8])\\\\d{7}\",[9]],[\"1800\\\\d{4,6}|12(?:03|28)\\\\d{4}\",[8,9,10]],[\"1900\\\\d{4,6}\",[8,9,10]],0,0,[\"(?:[17]99|80\\\\d)\\\\d{4}|69\\\\d{5,6}\",[7,8]],0,[\"672\\\\d{6}\",[9]]]],\"VU\":[\"678\",\"00\",\"(?:[23]\\\\d|[48]8)\\\\d{3}|(?:[57]\\\\d|90)\\\\d{5}\",[5,7],[[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"[579]\"]]],0,0,0,0,0,0,[[\"(?:38[0-8]|48[4-9])\\\\d\\\\d|(?:2[02-9]|3[4-7]|88)\\\\d{3}\",[5]],[\"57[2-5]\\\\d{4}|(?:5[0-689]|7[013-7])\\\\d{5}\",[7]],0,0,0,0,[\"(?:3[03]|900\\\\d)\\\\d{3}\"],0,[\"90[1-9]\\\\d{4}\",[7]]]],\"WF\":[\"681\",\"00\",\"(?:[45]0|68|72|8\\\\d)\\\\d{4}\",[6],[[\"(\\\\d{2})(\\\\d{2})(\\\\d{2})\",\"$1 $2 $3\",[\"[4-8]\"]]],0,0,0,0,0,0,[[\"(?:50|68|72)\\\\d{4}\"],[\"(?:50|68|72|8[23])\\\\d{4}\"]]],\"WS\":[\"685\",\"0\",\"[2-6]\\\\d{4}|8\\\\d{5}(?:\\\\d{4})?|[78]\\\\d{6}\",[5,6,7,10],[[\"(\\\\d{5})\",\"$1\",[\"[2-6]\"]],[\"(\\\\d{3})(\\\\d{3,7})\",\"$1 $2\",[\"8\"]],[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"7\"]]],0,0,0,0,0,0,[[\"(?:[2-5]\\\\d|6[1-9])\\\\d{3}\",[5]],[\"(?:7[25-7]|8(?:[3-7]|9\\\\d{3}))\\\\d{5}\",[7,10]],[\"800\\\\d{3}\",[6]]]],\"XK\":[\"383\",\"00\",\"[23]\\\\d{7,8}|(?:4\\\\d\\\\d|[89]00)\\\\d{5}\",[8,9],[[\"(\\\\d{3})(\\\\d{5})\",\"$1 $2\",[\"[89]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[2-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[23]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:2[89]|39)0\\\\d{6}|[23][89]\\\\d{6}\"],[\"4[3-9]\\\\d{6}\",[8]],[\"800\\\\d{5}\",[8]],[\"900\\\\d{5}\",[8]]]],\"YE\":[\"967\",\"00\",\"(?:1|7\\\\d)\\\\d{7}|[1-7]\\\\d{6}\",[7,8,9],[[\"(\\\\d)(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"[1-6]|7[24-68]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"7\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"17\\\\d{6}|(?:[12][2-68]|3[2358]|4[2-58]|5[2-6]|6[3-58]|7[24-68])\\\\d{5}\",[7,8]],[\"7[0137]\\\\d{7}\",[9]]]],\"YT\":[\"262\",\"00\",\"80\\\\d{7}|(?:26|63)9\\\\d{6}\",[9],0,\"0\",0,0,0,0,\"269|63\",[[\"269(?:0[67]|5[0-2]|6\\\\d|[78]0)\\\\d{4}\"],[\"639(?:0[0-79]|1[019]|[267]\\\\d|3[09]|[45]0|9[04-79])\\\\d{4}\"],[\"80\\\\d{7}\"]]],\"ZA\":[\"27\",\"00\",\"[1-9]\\\\d{8}|8\\\\d{4,7}\",[5,6,7,8,9],[[\"(\\\\d{2})(\\\\d{3,4})\",\"$1 $2\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{2,3})\",\"$1 $2 $3\",[\"8[1-4]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"860\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"[1-9]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1[0-8]|2[1-378]|3[1-69]|4\\\\d|5[1346-8])\\\\d{7}\",[9]],[\"(?:1(?:3492[0-25]|4495[0235]|549(?:20|5[01]))|4[34]492[01])\\\\d{3}|8[1-4]\\\\d{3,7}|(?:2[27]|47|54)4950\\\\d{3}|(?:1(?:049[2-4]|9[12]\\\\d\\\\d)|(?:6\\\\d|7[0-46-9])\\\\d{3}|8(?:5\\\\d{3}|7(?:08[67]|158|28[5-9]|310)))\\\\d{4}|(?:1[6-8]|28|3[2-69]|4[025689]|5[36-8])4920\\\\d{3}|(?:12|[2-5]1)492\\\\d{4}\"],[\"80\\\\d{7}\",[9]],[\"(?:86[2-9]|9[0-2]\\\\d)\\\\d{6}\",[9]],0,0,[\"861\\\\d{6}\",[9]],0,[\"87(?:08[0-589]|15[0-79]|28[0-4]|31[1-9])\\\\d{4}|87(?:[02][0-79]|1[0-46-9]|3[02-9]|[4-9]\\\\d)\\\\d{5}\",[9]],[\"860\\\\d{6}\",[9]]]],\"ZM\":[\"260\",\"00\",\"(?:63|80)0\\\\d{6}|(?:21|[79]\\\\d)\\\\d{7}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[28]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"[79]\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"21[1-8]\\\\d{6}\"],[\"(?:7[67]|9[5-8])\\\\d{7}\"],[\"800\\\\d{6}\"],0,0,0,0,0,[\"630\\\\d{6}\"]]],\"ZW\":[\"263\",\"00\",\"2(?:[0-57-9]\\\\d{6,8}|6[0-24-9]\\\\d{6,7})|[38]\\\\d{9}|[35-8]\\\\d{8}|[3-6]\\\\d{7}|[1-689]\\\\d{6}|[1-3569]\\\\d{5}|[1356]\\\\d{4}\",[5,6,7,8,9,10],[[\"(\\\\d{3})(\\\\d{3,5})\",\"$1 $2\",[\"2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]\"],\"0$1\"],[\"(\\\\d)(\\\\d{3})(\\\\d{2,4})\",\"$1 $2 $3\",[\"[49]\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{4})\",\"$1 $2\",[\"80\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{7})\",\"$1 $2\",[\"24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2\",\"2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]\"],\"(0$1)\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{4})\",\"$1 $2 $3\",[\"7\"],\"0$1\"],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)\",\"2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{6})\",\"$1 $2\",[\"8\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3,5})\",\"$1 $2\",[\"1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]\"],\"0$1\"],[\"(\\\\d{2})(\\\\d{3})(\\\\d{3,4})\",\"$1 $2 $3\",[\"29[013-9]|39|54\"],\"0$1\"],[\"(\\\\d{4})(\\\\d{3,5})\",\"$1 $2\",[\"(?:25|54)8\",\"258|5483\"],\"0$1\"]],\"0\",0,0,0,0,0,[[\"(?:1(?:(?:3\\\\d|9)\\\\d|[4-8])|2(?:(?:(?:0(?:2[014]|5)|(?:2[0157]|31|84|9)\\\\d\\\\d|[56](?:[14]\\\\d\\\\d|20)|7(?:[089]|2[03]|[35]\\\\d\\\\d))\\\\d|4(?:2\\\\d\\\\d|8))\\\\d|1(?:2|[39]\\\\d{4}))|3(?:(?:123|(?:29\\\\d|92)\\\\d)\\\\d\\\\d|7(?:[19]|[56]\\\\d))|5(?:0|1[2-478]|26|[37]2|4(?:2\\\\d{3}|83)|5(?:25\\\\d\\\\d|[78])|[689]\\\\d)|6(?:(?:[16-8]21|28|52[013])\\\\d\\\\d|[39])|8(?:[1349]28|523)\\\\d\\\\d)\\\\d{3}|(?:4\\\\d\\\\d|9[2-9])\\\\d{4,5}|(?:(?:2(?:(?:(?:0|8[146])\\\\d|7[1-7])\\\\d|2(?:[278]\\\\d|92)|58(?:2\\\\d|3))|3(?:[26]|9\\\\d{3})|5(?:4\\\\d|5)\\\\d\\\\d)\\\\d|6(?:(?:(?:[0-246]|[78]\\\\d)\\\\d|37)\\\\d|5[2-8]))\\\\d\\\\d|(?:2(?:[569]\\\\d|8[2-57-9])|3(?:[013-59]\\\\d|8[37])|6[89]8)\\\\d{3}\"],[\"7(?:[17]\\\\d|[38][1-9])\\\\d{6}\",[9]],[\"80(?:[01]\\\\d|20|8[0-8])\\\\d{3}\",[7]],0,0,0,0,0,[\"86(?:1[12]|22|30|44|55|77|8[368])\\\\d{6}\",[10]]]]},\"nonGeographic\":{\"800\":[\"800\",0,\"\\\\d{8}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]],0,0,0,0,0,0,[0,0,[\"\\\\d{8}\"]]],\"808\":[\"808\",0,\"\\\\d{8}\",[8],[[\"(\\\\d{4})(\\\\d{4})\",\"$1 $2\"]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,[\"\\\\d{8}\"]]],\"870\":[\"870\",0,\"[35-7]\\\\d{8}\",[9],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"[35-7]\"]]],0,0,0,0,0,0,[0,[\"(?:[356]\\\\d|7[6-8])\\\\d{7}\"]]],\"878\":[\"878\",0,\"10\\\\d{10}\",[12],[[\"(\\\\d{2})(\\\\d{5})(\\\\d{5})\",\"$1 $2 $3\",[\"1\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"10\\\\d{10}\"]]],\"881\":[\"881\",0,\"[67]\\\\d{8}\",[9],[[\"(\\\\d)(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\",[\"[67]\"]]],0,0,0,0,0,0,[0,[\"[67]\\\\d{8}\"]]],\"882\":[\"882\",0,\"1\\\\d{6,11}|3\\\\d{6}(?:\\\\d{2,5})?\",[7,8,9,10,11,12],[[\"(\\\\d{2})(\\\\d{5})\",\"$1 $2\",[\"16|342\"]],[\"(\\\\d{2})(\\\\d{2})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{3})\",\"$1 $2 $3\",[\"3[23]\"]],[\"(\\\\d{2})(\\\\d{3,4})(\\\\d{4})\",\"$1 $2 $3\",[\"1\"]],[\"(\\\\d{2})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34[57]\"]],[\"(\\\\d{3})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"34\"]],[\"(\\\\d{2})(\\\\d{4,5})(\\\\d{5})\",\"$1 $2 $3\",[\"[13]\"]]],0,0,0,0,0,0,[0,[\"3(?:37\\\\d\\\\d|42)\\\\d{4}|3(?:2|47|7\\\\d{3})\\\\d{7}\",[7,9,10,12]],0,0,0,0,0,0,[\"1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\\\d{4}|6\\\\d{5,10})|3(?:45|9\\\\d{3})\\\\d{7}\"]]],\"883\":[\"883\",0,\"51\\\\d{7}(?:\\\\d{3})?\",[9,12],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3\",[\"510\"]],[\"(\\\\d{3})(\\\\d{3})(\\\\d{3})(\\\\d{3})\",\"$1 $2 $3 $4\",[\"510\"]],[\"(\\\\d{4})(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\",[\"5\"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,[\"51[013]0\\\\d{8}|5100\\\\d{5}\"]]],\"888\":[\"888\",0,\"\\\\d{11}\",[11],[[\"(\\\\d{3})(\\\\d{3})(\\\\d{5})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,0,0,0,[\"\\\\d{11}\"]]],\"979\":[\"979\",0,\"\\\\d{9}\",[9],[[\"(\\\\d)(\\\\d{4})(\\\\d{4})\",\"$1 $2 $3\"]],0,0,0,0,0,0,[0,0,0,[\"\\\\d{9}\"]]]}}","// The minimum length of the national significant number.\r\nexport const MIN_LENGTH_FOR_NSN = 2\r\n\r\n// The ITU says the maximum length should be 15,\r\n// but one can find longer numbers in Germany.\r\nexport const MAX_LENGTH_FOR_NSN = 17\r\n\r\n// The maximum length of the country calling code.\r\nexport const MAX_LENGTH_COUNTRY_CODE = 3\r\n\r\n// Digits accepted in phone numbers\r\n// (ascii, fullwidth, arabic-indic, and eastern arabic digits).\r\nexport const VALID_DIGITS = '0-9\\uFF10-\\uFF19\\u0660-\\u0669\\u06F0-\\u06F9'\r\n\r\n// `DASHES` will be right after the opening square bracket of the \"character class\"\r\nconst DASHES = '-\\u2010-\\u2015\\u2212\\u30FC\\uFF0D'\r\nconst SLASHES = '\\uFF0F/'\r\nconst DOTS = '\\uFF0E.'\r\nexport const WHITESPACE = ' \\u00A0\\u00AD\\u200B\\u2060\\u3000'\r\nconst BRACKETS = '()\\uFF08\\uFF09\\uFF3B\\uFF3D\\\\[\\\\]'\r\n// export const OPENING_BRACKETS = '(\\uFF08\\uFF3B\\\\\\['\r\nconst TILDES = '~\\u2053\\u223C\\uFF5E'\r\n\r\n// Regular expression of acceptable punctuation found in phone numbers. This\r\n// excludes punctuation found as a leading character only. This consists of dash\r\n// characters, white space characters, full stops, slashes, square brackets,\r\n// parentheses and tildes. Full-width variants are also present.\r\nexport const VALID_PUNCTUATION = `${DASHES}${SLASHES}${DOTS}${WHITESPACE}${BRACKETS}${TILDES}`\r\n\r\nexport const PLUS_CHARS = '+\\uFF0B'\r\n// const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')","/**\r\n * Checks whether the entire input sequence can be matched\r\n * against the regular expression.\r\n * @return {boolean}\r\n */\r\nexport function matchesEntirely(text, regular_expression) {\r\n\t// If assigning the `''` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\ttext = text || ''\r\n\treturn new RegExp('^(?:' + regular_expression + ')$').test(text)\r\n}\r\n\r\n/**\r\n * Merges two arrays.\r\n * @param  {*} a\r\n * @param  {*} b\r\n * @return {*}\r\n */\r\nexport function mergeArrays(a, b) {\r\n\tconst merged = a.slice()\r\n\r\n\tfor (const element of b) {\r\n\t\tif (a.indexOf(element) < 0) {\r\n\t\t\tmerged.push(element)\r\n\t\t}\r\n\t}\r\n\r\n\treturn merged.sort((a, b) => a - b)\r\n\r\n\t// ES6 version, requires Set polyfill.\r\n\t// let merged = new Set(a)\r\n\t// for (const element of b)\r\n\t// {\r\n\t// \tmerged.add(i)\r\n\t// }\r\n\t// return Array.from(merged).sort((a, b) => a - b)\r\n}","// https://stackoverflow.com/a/46971044/970769\r\nexport default class ParseError {\r\n  constructor(code) {\r\n    this.name = this.constructor.name\r\n    this.message = code\r\n    this.stack = (new Error(code)).stack\r\n  }\r\n}\r\n\r\nParseError.prototype = Object.create(Error.prototype)\r\nParseError.prototype.constructor = ParseError","// Copy-pasted from:\r\n// https://github.com/substack/semver-compare/blob/master/index.js\r\n//\r\n// Inlining this function because some users reported issues with\r\n// importing from `semver-compare` in a browser with ES6 \"native\" modules.\r\nexport default function cmp (a, b) {\r\n    var pa = a.split('.');\r\n    var pb = b.split('.');\r\n    for (var i = 0; i < 3; i++) {\r\n        var na = Number(pa[i]);\r\n        var nb = Number(pb[i]);\r\n        if (na > nb) return 1;\r\n        if (nb > na) return -1;\r\n        if (!isNaN(na) && isNaN(nb)) return 1;\r\n        if (isNaN(na) && !isNaN(nb)) return -1;\r\n    }\r\n    return 0;\r\n};","import compare from './tools/semver-compare'\r\n\r\n// Added \"possibleLengths\" and renamed\r\n// \"country_phone_code_to_countries\" to \"country_calling_codes\".\r\nconst V2 = '1.0.18'\r\n\r\n// Added \"idd_prefix\" and \"default_idd_prefix\".\r\nconst V3 = '1.2.0'\r\n\r\n// Moved `001` country code to \"nonGeographic\" section of metadata.\r\nconst V4 = '1.7.35'\r\n\r\nconst DEFAULT_EXT_PREFIX = ' ext. '\r\n\r\n/**\r\n * See: https://github.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md\r\n */\r\nexport default class Metadata {\r\n\tconstructor(metadata) {\r\n\t\tvalidateMetadata(metadata)\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, metadata)\r\n\t}\r\n\r\n\tgetCountries() {\r\n\t\treturn Object.keys(this.metadata.countries).filter(_ => _ !== '001')\r\n\t}\r\n\r\n\tgetCountryMetadata(countryCode) {\r\n\t\treturn this.metadata.countries[countryCode]\r\n\t}\r\n\r\n\tnonGeographic() {\r\n\t\tif (this.v1 || this.v2 || this.v3) return\r\n\t\t// `nonGeographical` was a typo.\r\n\t\t// It's present in metadata generated from `1.7.35` to `1.7.37`.\r\n\t\treturn this.metadata.nonGeographic || this.metadata.nonGeographical\r\n\t}\r\n\r\n\thasCountry(country) {\r\n\t\treturn this.getCountryMetadata(country) !== undefined\r\n\t}\r\n\r\n\thasCallingCode(callingCode) {\r\n\t\tif (this.getCountryCodesForCallingCode(callingCode)) {\r\n\t\t\treturn true\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tif (this.nonGeographic()[callingCode]) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tisNonGeographicCallingCode(callingCode) {\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\treturn this.nonGeographic()[callingCode] ? true : false\r\n\t\t} else {\r\n\t\t\treturn this.getCountryCodesForCallingCode(callingCode) ? false : true\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountry(countryCode) {\r\n\t\treturn this.selectNumberingPlan(countryCode)\r\n\t}\r\n\r\n\tselectNumberingPlan(countryCode, callingCode) {\r\n\t\tif (countryCode && countryCode !== '001') {\r\n\t\t\tif (!this.hasCountry(countryCode)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${countryCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this)\r\n\t\t} else if (callingCode) {\r\n\t\t\tif (!this.hasCallingCode(callingCode)) {\r\n\t\t\t\tthrow new Error(`Unknown calling code: ${callingCode}`)\r\n\t\t\t}\r\n\t\t\tthis.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this)\r\n\t\t} else {\r\n\t\t\tthis.numberingPlan = undefined\r\n\t\t}\r\n\t\treturn this\r\n\t}\r\n\r\n\tgetCountryCodesForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\tif (countryCodes) {\r\n\t\t\t// Metadata before V4 included \"non-geographic entity\" calling codes\r\n\t\t\t// inside `country_calling_codes` (for example, `\"881\":[\"001\"]`).\r\n\t\t\t// Now the semantics of `country_calling_codes` has changed:\r\n\t\t\t// it's specifically for \"countries\" now.\r\n\t\t\t// Older versions of custom metadata will simply skip parsing\r\n\t\t\t// \"non-geographic entity\" phone numbers with new versions\r\n\t\t\t// of this library: it's not considered a bug,\r\n\t\t\t// because such numbers are extremely rare,\r\n\t\t\t// and developers extremely rarely use custom metadata.\r\n\t\t\tif (countryCodes.length === 1 && countryCodes[0].length === 3) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\treturn countryCodes\r\n\t\t}\r\n\t}\r\n\r\n\tgetCountryCodeForCallingCode(callingCode) {\r\n\t\tconst countryCodes = this.getCountryCodesForCallingCode(callingCode)\r\n\t\tif (countryCodes) {\r\n\t\t\treturn countryCodes[0]\r\n\t\t}\r\n\t}\r\n\r\n\tgetNumberingPlanMetadata(callingCode) {\r\n\t\tconst countryCode = this.getCountryCodeForCallingCode(callingCode)\r\n\t\tif (countryCode) {\r\n\t\t\treturn this.getCountryMetadata(countryCode)\r\n\t\t}\r\n\t\tif (this.nonGeographic()) {\r\n\t\t\tconst metadata = this.nonGeographic()[callingCode]\r\n\t\t\tif (metadata) {\r\n\t\t\t\treturn metadata\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// A hacky workaround for old custom metadata (generated before V4).\r\n\t\t\tconst countryCodes = this.countryCallingCodes()[callingCode]\r\n\t\t\tif (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {\r\n\t\t\t\treturn this.metadata.countries['001']\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tcountryCallingCode() {\r\n\t\treturn this.numberingPlan.callingCode()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tIDDPrefix() {\r\n\t\treturn this.numberingPlan.IDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tdefaultIDDPrefix() {\r\n\t\treturn this.numberingPlan.defaultIDDPrefix()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalNumberPattern() {\r\n\t\treturn this.numberingPlan.nationalNumberPattern()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tpossibleLengths() {\r\n\t\treturn this.numberingPlan.possibleLengths()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tformats() {\r\n\t\treturn this.numberingPlan.formats()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixForParsing() {\r\n\t\treturn this.numberingPlan.nationalPrefixForParsing()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.numberingPlan.nationalPrefixTransformRule()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tleadingDigits() {\r\n\t\treturn this.numberingPlan.leadingDigits()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\thasTypes() {\r\n\t\treturn this.numberingPlan.hasTypes()\r\n\t}\r\n\r\n\t// Deprecated.\r\n\ttype(type) {\r\n\t\treturn this.numberingPlan.type(type)\r\n\t}\r\n\r\n\t// Deprecated.\r\n\text() {\r\n\t\treturn this.numberingPlan.ext()\r\n\t}\r\n\r\n\tcountryCallingCodes() {\r\n\t\tif (this.v1) return this.metadata.country_phone_code_to_countries\r\n\t\treturn this.metadata.country_calling_codes\r\n\t}\r\n\r\n\t// Deprecated.\r\n\tchooseCountryByCountryCallingCode(callingCode) {\r\n\t\tthis.selectNumberingPlan(null, callingCode)\r\n\t}\r\n\r\n\thasSelectedNumberingPlan() {\r\n\t\treturn this.numberingPlan !== undefined\r\n\t}\r\n}\r\n\r\nclass NumberingPlan {\r\n\tconstructor(metadata, globalMetadataObject) {\r\n\t\tthis.globalMetadataObject = globalMetadataObject\r\n\t\tthis.metadata = metadata\r\n\t\tsetVersion.call(this, globalMetadataObject.metadata)\r\n\t}\r\n\r\n\tcallingCode() {\r\n\t\treturn this.metadata[0]\r\n\t}\r\n\r\n\t// Formatting information for regions which share\r\n\t// a country calling code is contained by only one region\r\n\t// for performance reasons. For example, for NANPA region\r\n\t// (\"North American Numbering Plan Administration\",\r\n\t//  which includes USA, Canada, Cayman Islands, Bahamas, etc)\r\n\t// it will be contained in the metadata for `US`.\r\n\tgetDefaultCountryMetadataForRegion() {\r\n\t\treturn this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode())\r\n\t}\r\n\r\n\tIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[1]\r\n\t}\r\n\r\n\tdefaultIDDPrefix() {\r\n\t\tif (this.v1 || this.v2) return\r\n\t\treturn this.metadata[12]\r\n\t}\r\n\r\n\tnationalNumberPattern() {\r\n\t\tif (this.v1 || this.v2) return this.metadata[1]\r\n\t\treturn this.metadata[2]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.v1) return\r\n\t\treturn this.metadata[this.v2 ? 2 : 3]\r\n\t}\r\n\r\n\t_getFormats(metadata) {\r\n\t\treturn metadata[this.v1 ? 2 : this.v2 ? 3 : 4]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// formats are all stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tformats() {\r\n\t\tconst formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || []\r\n\t\treturn formats.map(_ => new Format(_, this))\r\n\t}\r\n\r\n\tnationalPrefix() {\r\n\t\treturn this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5]\r\n\t}\r\n\r\n\t_getNationalPrefixFormattingRule(metadata) {\r\n\t\treturn metadata[this.v1 ? 4 : this.v2 ? 5 : 6]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// national prefix formatting rule is stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\t_nationalPrefixForParsing() {\r\n\t\treturn this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7]\r\n\t}\r\n\r\n\tnationalPrefixForParsing() {\r\n\t\t// If `national_prefix_for_parsing` is not set explicitly,\r\n\t\t// then infer it from `national_prefix` (if any)\r\n\t\treturn this._nationalPrefixForParsing() || this.nationalPrefix()\r\n\t}\r\n\r\n\tnationalPrefixTransformRule() {\r\n\t\treturn this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8]\r\n\t}\r\n\r\n\t_getNationalPrefixIsOptionalWhenFormatting() {\r\n\t\treturn !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9]\r\n\t}\r\n\r\n\t// For countries of the same region (e.g. NANPA)\r\n\t// \"national prefix is optional when formatting\" flag is\r\n\t// stored in the \"main\" country for that region.\r\n\t// E.g. \"RU\" and \"KZ\", \"US\" and \"CA\".\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) ||\r\n\t\t\tthis._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion())\r\n\t}\r\n\r\n\tleadingDigits() {\r\n\t\treturn this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10]\r\n\t}\r\n\r\n\ttypes() {\r\n\t\treturn this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11]\r\n\t}\r\n\r\n\thasTypes() {\r\n\t\t// Versions 1.2.0 - 1.2.4: can be `[]`.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (this.types() && this.types().length === 0) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\t// Versions <= 1.2.4: can be `undefined`.\r\n\t\t// Version >= 1.2.5: can be `0`.\r\n\t\treturn !!this.types()\r\n\t}\r\n\r\n\ttype(type) {\r\n\t\tif (this.hasTypes() && getType(this.types(), type)) {\r\n\t\t\treturn new Type(getType(this.types(), type), this)\r\n\t\t}\r\n\t}\r\n\r\n\text() {\r\n\t\tif (this.v1 || this.v2) return DEFAULT_EXT_PREFIX\r\n\t\treturn this.metadata[13] || DEFAULT_EXT_PREFIX\r\n\t}\r\n}\r\n\r\nclass Format {\r\n\tconstructor(format, metadata) {\r\n\t\tthis._format = format\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\treturn this._format[0]\r\n\t}\r\n\r\n\tformat() {\r\n\t\treturn this._format[1]\r\n\t}\r\n\r\n\tleadingDigitsPatterns() {\r\n\t\treturn this._format[2] || []\r\n\t}\r\n\r\n\tnationalPrefixFormattingRule() {\r\n\t\treturn this._format[3] || this.metadata.nationalPrefixFormattingRule()\r\n\t}\r\n\r\n\tnationalPrefixIsOptionalWhenFormattingInNationalFormat() {\r\n\t\treturn !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\tnationalPrefixIsMandatoryWhenFormattingInNationalFormat() {\r\n\t\t// National prefix is omitted if there's no national prefix formatting rule\r\n\t\t// set for this country, or when the national prefix formatting rule\r\n\t\t// contains no national prefix itself, or when this rule is set but\r\n\t\t// national prefix is optional for this phone number format\r\n\t\t// (and it is not enforced explicitly)\r\n\t\treturn this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat()\r\n\t}\r\n\r\n\t// Checks whether national prefix formatting rule contains national prefix.\r\n\tusesNationalPrefix() {\r\n\t\treturn this.nationalPrefixFormattingRule() &&\r\n\t\t\t// Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t!FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule())\r\n\t\t\t// Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:\r\n\t\t\t// // Check that national prefix formatting rule is not a \"dummy\" one.\r\n\t\t\t// this.nationalPrefixFormattingRule() !== '$1' &&\r\n\t\t\t// // Check that national prefix formatting rule actually has national prefix digit(s).\r\n\t\t\t// // Filters out cases like \"($1)\".\r\n\t\t\t// // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.\r\n\t\t\t// /\\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))\r\n\t}\r\n\r\n\tinternationalFormat() {\r\n\t\treturn this._format[5] || this.format()\r\n\t}\r\n}\r\n\r\n/**\r\n * A pattern that is used to determine if the national prefix formatting rule\r\n * has the first group only, i.e., does not start with the national prefix.\r\n * Note that the pattern explicitly allows for unbalanced parentheses.\r\n */\r\nconst FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\\(?\\$1\\)?$/\r\n\r\nclass Type {\r\n\tconstructor(type, metadata) {\r\n\t\tthis.type = type\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tpattern() {\r\n\t\tif (this.metadata.v1) return this.type\r\n\t\treturn this.type[0]\r\n\t}\r\n\r\n\tpossibleLengths() {\r\n\t\tif (this.metadata.v1) return\r\n\t\treturn this.type[1] || this.metadata.possibleLengths()\r\n\t}\r\n}\r\n\r\nfunction getType(types, type) {\r\n\tswitch (type) {\r\n\t\tcase 'FIXED_LINE':\r\n\t\t\treturn types[0]\r\n\t\tcase 'MOBILE':\r\n\t\t\treturn types[1]\r\n\t\tcase 'TOLL_FREE':\r\n\t\t\treturn types[2]\r\n\t\tcase 'PREMIUM_RATE':\r\n\t\t\treturn types[3]\r\n\t\tcase 'PERSONAL_NUMBER':\r\n\t\t\treturn types[4]\r\n\t\tcase 'VOICEMAIL':\r\n\t\t\treturn types[5]\r\n\t\tcase 'UAN':\r\n\t\t\treturn types[6]\r\n\t\tcase 'PAGER':\r\n\t\t\treturn types[7]\r\n\t\tcase 'VOIP':\r\n\t\t\treturn types[8]\r\n\t\tcase 'SHARED_COST':\r\n\t\t\treturn types[9]\r\n\t}\r\n}\r\n\r\nexport function validateMetadata(metadata) {\r\n\tif (!metadata) {\r\n\t\tthrow new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.')\r\n\t}\r\n\r\n\t// `country_phone_code_to_countries` was renamed to\r\n\t// `country_calling_codes` in `1.0.18`.\r\n\tif (!is_object(metadata) || !is_object(metadata.countries)) {\r\n\t\tthrow new Error(`[libphonenumber-js] \\`metadata\\` argument was passed but it's not a valid metadata. Must be an object having \\`.countries\\` child object property. Got ${is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata}.`)\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst type_of = _ => typeof _\r\n\r\n/**\r\n * Returns extension prefix for a country.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string?}\r\n * @example\r\n * // Returns \" ext. \"\r\n * getExtPrefix(\"US\")\r\n */\r\nexport function getExtPrefix(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).ext()\r\n\t}\r\n\treturn DEFAULT_EXT_PREFIX\r\n}\r\n\r\n/**\r\n * Returns \"country calling code\" for a country.\r\n * Throws an error if the country doesn't exist or isn't supported by this library.\r\n * @param  {string} country\r\n * @param  {object} metadata\r\n * @return {string}\r\n * @example\r\n * // Returns \"44\"\r\n * getCountryCallingCode(\"GB\")\r\n */\r\nexport function getCountryCallingCode(country, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tif (metadata.hasCountry(country)) {\r\n\t\treturn metadata.country(country).countryCallingCode()\r\n\t}\r\n\tthrow new Error(`Unknown country: ${country}`)\r\n}\r\n\r\nexport function isSupportedCountry(country, metadata) {\r\n\t// metadata = new Metadata(metadata)\r\n\t// return metadata.hasCountry(country)\r\n\treturn metadata.countries[country] !== undefined\r\n}\r\n\r\nfunction setVersion(metadata) {\r\n\tthis.v1 = !metadata.version\r\n\tthis.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1\r\n\tthis.v3 = metadata.version !== undefined && compare(metadata.version, V4) === -1\r\n\tthis.v4 = metadata.version !== undefined // && compare(metadata.version, V5) === -1\r\n}\r\n\r\n// const ISO_COUNTRY_CODE = /^[A-Z]{2}$/\r\n// function isCountryCode(countryCode) {\r\n// \treturn ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)\r\n// }","import { VALID_DIGITS } from './constants'\r\n\r\n// The RFC 3966 format for extensions.\r\nconst RFC3966_EXTN_PREFIX = ';ext='\r\n\r\n// Pattern to capture digits used in an extension.\r\n// Places a maximum length of '7' for an extension.\r\nconst CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})'\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nfunction create_extension_pattern(purpose)\r\n{\r\n\t// One-character symbols that can be used to indicate an extension.\r\n\tlet single_extension_characters = 'x\\uFF58#\\uFF03~\\uFF5E'\r\n\r\n\tswitch (purpose)\r\n\t{\r\n\t\t// For parsing, we are slightly more lenient in our interpretation than for matching. Here we\r\n\t\t// allow \"comma\" and \"semicolon\" as possible extension indicators. When matching, these are\r\n\t\tcase 'parsing':\r\n\t\t\tsingle_extension_characters = ',;' + single_extension_characters\r\n\t}\r\n\r\n\treturn RFC3966_EXTN_PREFIX +\r\n\t\tCAPTURING_EXTN_DIGITS + '|' +\r\n\t\t'[ \\u00A0\\\\t,]*' +\r\n\t\t'(?:e?xt(?:ensi(?:o\\u0301?|\\u00F3))?n?|\\uFF45?\\uFF58\\uFF54\\uFF4E?|' +\r\n\t\t// \"доб.\"\r\n\t\t'\\u0434\\u043E\\u0431|' +\r\n\t\t'[' + single_extension_characters + ']|int|anexo|\\uFF49\\uFF4E\\uFF54)' +\r\n\t\t'[:\\\\.\\uFF0E]?[ \\u00A0\\\\t,-]*' +\r\n\t\tCAPTURING_EXTN_DIGITS + '#?|' +\r\n\t\t'[- ]+([' + VALID_DIGITS + ']{1,5})#'\r\n}\r\n\r\n/**\r\n * Regexp of all possible ways to write extensions, for use when parsing. This\r\n * will be run as a case-insensitive regexp match. Wide character versions are\r\n * also provided after each ASCII version. There are three regular expressions\r\n * here. The first covers RFC 3966 format, where the extension is added using\r\n * ';ext='. The second more generic one starts with optional white space and\r\n * ends with an optional full stop (.), followed by zero or more spaces/tabs\r\n * /commas and then the numbers themselves. The other one covers the special\r\n * case of American numbers where the extension is written with a hash at the\r\n * end, such as '- 503#'. Note that the only capturing groups should be around\r\n * the digits that you want to capture as part of the extension, or else parsing\r\n * will fail! We allow two options for representing the accented o - the\r\n * character itself, and one in the unicode decomposed form with the combining\r\n * acute accent.\r\n */\r\nexport const EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing')\r\n\r\nexport const EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching')\r\n\r\n// Regexp of all known extension prefixes used by different regions followed by\r\n// 1 or more valid digits, for use when parsing.\r\nconst EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i')\r\n\r\n// Strips any extension (as in, the part of the number dialled after the call is\r\n// connected, usually indicated with extn, ext, x or similar) from the end of\r\n// the number, and returns it.\r\nexport function extractExtension(number)\r\n{\r\n\tconst start = number.search(EXTN_PATTERN)\r\n\tif (start < 0) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If we find a potential extension, and the number preceding this is a viable\r\n\t// number, we assume it is an extension.\r\n\tconst number_without_extension = number.slice(0, start)\r\n\r\n\tconst matches = number.match(EXTN_PATTERN)\r\n\tlet i = 1\r\n\twhile (i < matches.length)\r\n\t{\r\n\t\tif (matches[i] != null && matches[i].length > 0)\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tnumber : number_without_extension,\r\n\t\t\t\text    : matches[i]\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n}","import {\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_PARSING } from './extension'\r\n\r\n//  Regular expression of viable phone numbers. This is location independent.\r\n//  Checks we have at least three leading digits, and only valid punctuation,\r\n//  alpha characters and digits in the phone number. Does not include extension\r\n//  data. The symbol 'x' is allowed here as valid punctuation since it is often\r\n//  used as a placeholder for carrier codes, for example in Brazilian phone\r\n//  numbers. We also allow multiple '+' characters at the start.\r\n//\r\n//  Corresponds to the following:\r\n//  [digits]{minLengthNsn}|\r\n//  plus_sign*\r\n//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*\r\n//\r\n//  The first reg-ex is to allow short numbers (two digits long) to be parsed if\r\n//  they are entered as \"15\" etc, but only if there is no punctuation in them.\r\n//  The second expression restricts the number of digits to three or more, but\r\n//  then allows them to be in international form, and to have alpha-characters\r\n//  and punctuation. We split up the two reg-exes here and combine them when\r\n//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it\r\n//  with ^ and append $ to each branch.\r\n//\r\n//  \"Note VALID_PUNCTUATION starts with a -,\r\n//   so must be the first in the range\" (c) Google devs.\r\n//  (wtf did they mean by saying that; probably nothing)\r\n//\r\nconst MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'\r\n//\r\n// And this is the second reg-exp:\r\n// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)\r\n//\r\nconst VALID_PHONE_NUMBER =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'(?:' +\r\n\t\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t\t'[' + VALID_DIGITS + ']' +\r\n\t'){3,}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\n// The combined regular expression for valid phone numbers:\r\n//\r\nconst VALID_PHONE_NUMBER_PATTERN = new RegExp\r\n(\r\n\t// Either a short two-digit-only phone number\r\n\t'^' +\r\n\t\tMIN_LENGTH_PHONE_NUMBER_PATTERN +\r\n\t'$' +\r\n\t'|' +\r\n\t// Or a longer fully parsed phone number (min 3 characters)\r\n\t'^' +\r\n\t\tVALID_PHONE_NUMBER +\r\n\t\t// Phone number extensions\r\n\t\t'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' +\r\n\t'$'\r\n,\r\n'i')\r\n\r\n// Checks to see if the string of characters could possibly be a phone number at\r\n// all. At the moment, checks to see that the string begins with at least 2\r\n// digits, ignoring any punctuation commonly found in phone numbers. This method\r\n// does not require the number to be normalized in advance - but does assume\r\n// that leading non-number symbols have been removed, such as by the method\r\n// `extract_possible_number`.\r\n//\r\nexport default function isViablePhoneNumber(number)\r\n{\r\n\treturn number.length >= MIN_LENGTH_FOR_NSN &&\r\n\t\tVALID_PHONE_NUMBER_PATTERN.test(number)\r\n}","// These mappings map a character (key) to a specific digit that should\r\n// replace it for normalization purposes. Non-European digits that\r\n// may be used in phone numbers are mapped to a European equivalent.\r\n//\r\n// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n//\r\nexport const DIGITS =\r\n{\r\n\t'0': '0',\r\n\t'1': '1',\r\n\t'2': '2',\r\n\t'3': '3',\r\n\t'4': '4',\r\n\t'5': '5',\r\n\t'6': '6',\r\n\t'7': '7',\r\n\t'8': '8',\r\n\t'9': '9',\r\n\t'\\uFF10': '0', // Fullwidth digit 0\r\n\t'\\uFF11': '1', // Fullwidth digit 1\r\n\t'\\uFF12': '2', // Fullwidth digit 2\r\n\t'\\uFF13': '3', // Fullwidth digit 3\r\n\t'\\uFF14': '4', // Fullwidth digit 4\r\n\t'\\uFF15': '5', // Fullwidth digit 5\r\n\t'\\uFF16': '6', // Fullwidth digit 6\r\n\t'\\uFF17': '7', // Fullwidth digit 7\r\n\t'\\uFF18': '8', // Fullwidth digit 8\r\n\t'\\uFF19': '9', // Fullwidth digit 9\r\n\t'\\u0660': '0', // Arabic-indic digit 0\r\n\t'\\u0661': '1', // Arabic-indic digit 1\r\n\t'\\u0662': '2', // Arabic-indic digit 2\r\n\t'\\u0663': '3', // Arabic-indic digit 3\r\n\t'\\u0664': '4', // Arabic-indic digit 4\r\n\t'\\u0665': '5', // Arabic-indic digit 5\r\n\t'\\u0666': '6', // Arabic-indic digit 6\r\n\t'\\u0667': '7', // Arabic-indic digit 7\r\n\t'\\u0668': '8', // Arabic-indic digit 8\r\n\t'\\u0669': '9', // Arabic-indic digit 9\r\n\t'\\u06F0': '0', // Eastern-Arabic digit 0\r\n\t'\\u06F1': '1', // Eastern-Arabic digit 1\r\n\t'\\u06F2': '2', // Eastern-Arabic digit 2\r\n\t'\\u06F3': '3', // Eastern-Arabic digit 3\r\n\t'\\u06F4': '4', // Eastern-Arabic digit 4\r\n\t'\\u06F5': '5', // Eastern-Arabic digit 5\r\n\t'\\u06F6': '6', // Eastern-Arabic digit 6\r\n\t'\\u06F7': '7', // Eastern-Arabic digit 7\r\n\t'\\u06F8': '8', // Eastern-Arabic digit 8\r\n\t'\\u06F9': '9'  // Eastern-Arabic digit 9\r\n}\r\n\r\nexport function parseDigit(character)\r\n{\r\n\treturn DIGITS[character]\r\n}\r\n\r\n/**\r\n * Parses phone number digits from a string.\r\n * Drops all punctuation leaving only digits.\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseDigits('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * ```\r\n */\r\nexport default function parseDigits(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tconst digit = parseDigit(character)\r\n\t\tif (digit) {\r\n\t\t\tresult += digit\r\n\t\t}\r\n\t}\r\n\treturn result\r\n}","import { parseDigit } from './parseDigits'\r\n\r\n/**\r\n * Parses phone number characters from a string.\r\n * Drops all punctuation leaving only digits and the leading `+` sign (if any).\r\n * Also converts wide-ascii and arabic-indic numerals to conventional numerals.\r\n * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.\r\n * @param  {string} string\r\n * @return {string}\r\n * @example\r\n * ```js\r\n * parseIncompletePhoneNumber('8 (800) 555')\r\n * // Outputs '8800555'.\r\n * parseIncompletePhoneNumber('+7 800 555')\r\n * // Outputs '+7800555'.\r\n * ```\r\n */\r\nexport default function parseIncompletePhoneNumber(string) {\r\n\tlet result = ''\r\n\t// Using `.split('')` here instead of normal `for ... of`\r\n\t// because the importing application doesn't neccessarily include an ES6 polyfill.\r\n\t// The `.split('')` approach discards \"exotic\" UTF-8 characters\r\n\t// (the ones consisting of four bytes) but digits\r\n\t// (including non-European ones) don't fall into that range\r\n\t// so such \"exotic\" characters would be discarded anyway.\r\n\tfor (const character of string.split('')) {\r\n\t\tresult += parsePhoneNumberCharacter(character, result) || ''\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * `input-format` `parse()` function.\r\n * https://github.com/catamphetamine/input-format\r\n * @param  {string} character - Yet another character from raw input string.\r\n * @param  {string} value - The value parsed so far.\r\n * @param  {object} meta - Optional custom use-case-specific metadata.\r\n * @return {string?} The parsed character.\r\n */\r\nexport function parsePhoneNumberCharacter(character, value) {\r\n\t// Only allow a leading `+`.\r\n\tif (character === '+') {\r\n\t\t// If this `+` is not the first parsed character\r\n\t\t// then discard it.\r\n\t\tif (value) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\treturn '+'\r\n\t}\r\n\t// Allow digits.\r\n\treturn parseDigit(character)\r\n}","import Metadata from './metadata'\r\nimport { matchesEntirely, mergeArrays } from './util'\r\n\r\nconst NON_FIXED_LINE_PHONE_TYPES =\r\n[\r\n\t'MOBILE',\r\n\t'PREMIUM_RATE',\r\n\t'TOLL_FREE',\r\n\t'SHARED_COST',\r\n\t'VOIP',\r\n\t'PERSONAL_NUMBER',\r\n\t'PAGER',\r\n\t'UAN',\r\n\t'VOICEMAIL'\r\n]\r\n\r\n// Finds out national phone number type (fixed line, mobile, etc)\r\nexport default function getNumberType(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\t// When `parse()` returned `{}`\r\n\t// meaning that the phone number is not a valid one.\r\n\tif (!input.country) {\r\n\t\treturn\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// The following is copy-pasted from the original function:\r\n\t// https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835\r\n\r\n\t// Is this national number even valid for this country\r\n\tif (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()))\r\n\t{\r\n\t\treturn\r\n\t}\r\n\r\n\t// Is it fixed line number\r\n\tif (is_of_type(nationalNumber, 'FIXED_LINE', metadata))\r\n\t{\r\n\t\t// Because duplicate regular expressions are removed\r\n\t\t// to reduce metadata size, if \"mobile\" pattern is \"\"\r\n\t\t// then it means it was removed due to being a duplicate of the fixed-line pattern.\r\n\t\t//\r\n\t\tif (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '')\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// v1 metadata.\r\n\t\t// Legacy.\r\n\t\t// Deprecated.\r\n\t\tif (!metadata.type('MOBILE'))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\t// Check if the number happens to qualify as both fixed line and mobile.\r\n\t\t// (no such country in the minimal metadata set)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (is_of_type(nationalNumber, 'MOBILE', metadata))\r\n\t\t{\r\n\t\t\treturn 'FIXED_LINE_OR_MOBILE'\r\n\t\t}\r\n\r\n\t\treturn 'FIXED_LINE'\r\n\t}\r\n\r\n\tfor (const _type of NON_FIXED_LINE_PHONE_TYPES)\r\n\t{\r\n\t\tif (is_of_type(nationalNumber, _type, metadata))\r\n\t\t{\r\n\t\t\treturn _type\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function is_of_type(nationalNumber, type, metadata)\r\n{\r\n\ttype = metadata.type(type)\r\n\r\n\tif (!type || !type.pattern())\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Check if any possible number lengths are present;\r\n\t// if so, we use them to avoid checking\r\n\t// the validation pattern if they don't match.\r\n\t// If they are absent, this means they match\r\n\t// the general description, which we have\r\n\t// already checked before a specific number type.\r\n\tif (type.possibleLengths() &&\r\n\t\ttype.possibleLengths().indexOf(nationalNumber.length) < 0)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn matchesEntirely(nationalNumber, type.pattern())\r\n}\r\n\r\n// Should only be called for the \"new\" metadata which has \"possible lengths\".\r\nexport function checkNumberLengthForType(nationalNumber, type, metadata)\r\n{\r\n\tconst type_info = metadata.type(type)\r\n\r\n\t// There should always be \"<possiblePengths/>\" set for every type element.\r\n\t// This is declared in the XML schema.\r\n\t// For size efficiency, where a sub-description (e.g. fixed-line)\r\n\t// has the same \"<possiblePengths/>\" as the \"general description\", this is missing,\r\n\t// so we fall back to the \"general description\". Where no numbers of the type\r\n\t// exist at all, there is one possible length (-1) which is guaranteed\r\n\t// not to match the length of any real phone number.\r\n\tlet possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths()\r\n\t// let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()\r\n\r\n\tif (type === 'FIXED_LINE_OR_MOBILE')\r\n\t{\r\n\t\t// No such country in metadata.\r\n\t\t/* istanbul ignore next */\r\n\t\tif (!metadata.type('FIXED_LINE'))\r\n\t\t{\r\n\t\t\t// The rare case has been encountered where no fixedLine data is available\r\n\t\t\t// (true for some non-geographic entities), so we just check mobile.\r\n\t\t\treturn checkNumberLengthForType(nationalNumber, 'MOBILE', metadata)\r\n\t\t}\r\n\r\n\t\tconst mobile_type = metadata.type('MOBILE')\r\n\r\n\t\tif (mobile_type)\r\n\t\t{\r\n\t\t\t// Merge the mobile data in if there was any. \"Concat\" creates a new\r\n\t\t\t// array, it doesn't edit possible_lengths in place, so we don't need a copy.\r\n\t\t\t// Note that when adding the possible lengths from mobile, we have\r\n\t\t\t// to again check they aren't empty since if they are this indicates\r\n\t\t\t// they are the same as the general desc and should be obtained from there.\r\n\t\t\tpossible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths())\r\n\t\t\t// The current list is sorted; we need to merge in the new list and\r\n\t\t\t// re-sort (duplicates are okay). Sorting isn't so expensive because\r\n\t\t\t// the lists are very small.\r\n\r\n\t\t\t// if (local_lengths)\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())\r\n\t\t\t// }\r\n\t\t\t// else\r\n\t\t\t// {\r\n\t\t\t// \tlocal_lengths = mobile_type.possibleLengthsLocal()\r\n\t\t\t// }\r\n\t\t}\r\n\t}\r\n\t// If the type doesn't exist then return 'INVALID_LENGTH'.\r\n\telse if (type && !type_info)\r\n\t{\r\n\t\treturn 'INVALID_LENGTH'\r\n\t}\r\n\r\n\tconst actual_length = nationalNumber.length\r\n\r\n\t// In `libphonenumber-js` all \"local-only\" formats are dropped for simplicity.\r\n\t// // This is safe because there is never an overlap beween the possible lengths\r\n\t// // and the local-only lengths; this is checked at build time.\r\n\t// if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)\r\n\t// {\r\n\t// \treturn 'IS_POSSIBLE_LOCAL_ONLY'\r\n\t// }\r\n\r\n\tconst minimum_length = possible_lengths[0]\r\n\r\n\tif (minimum_length === actual_length)\r\n\t{\r\n\t\treturn 'IS_POSSIBLE'\r\n\t}\r\n\r\n\tif (minimum_length > actual_length)\r\n\t{\r\n\t\treturn 'TOO_SHORT'\r\n\t}\r\n\r\n\tif (possible_lengths[possible_lengths.length - 1] < actual_length)\r\n\t{\r\n\t\treturn 'TOO_LONG'\r\n\t}\r\n\r\n\t// We skip the first element since we've already checked it.\r\n\treturn possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH'\r\n}","import Metadata from './metadata'\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nexport default function isPossiblePhoneNumber(input, options, metadata)\r\n{\r\n\t/* istanbul ignore if */\r\n\tif (options === undefined) {\r\n\t\toptions = {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (options.v2) {\r\n\t\tif (!input.countryCallingCode) {\r\n\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t}\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t} else {\r\n\t\tif (!input.phone) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\tif (input.country) {\r\n\t\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t\t}\r\n\t\t\tmetadata.country(input.country)\r\n\t\t} else {\r\n\t\t\tif (!input.countryCallingCode) {\r\n\t\t\t\tthrow new Error('Invalid phone number object passed')\r\n\t\t\t}\r\n\t\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t\t}\r\n\t}\r\n\r\n\tif (metadata.possibleLengths()) {\r\n\t\treturn isPossibleNumber(input.phone || input.nationalNumber, undefined, metadata)\r\n\t} else {\r\n\t\t// There was a bug between `1.7.35` and `1.7.37` where \"possible_lengths\"\r\n\t\t// were missing for \"non-geographical\" numbering plans.\r\n\t\t// Just assume the number is possible in such cases:\r\n\t\t// it's unlikely that anyone generated their custom metadata\r\n\t\t// in that short period of time (one day).\r\n\t\t// This code can be removed in some future major version update.\r\n\t\tif (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {\r\n\t\t\t// \"Non-geographic entities\" did't have `possibleLengths`\r\n\t\t\t// due to a bug in metadata generation process.\r\n\t\t\treturn true\r\n\t\t} else {\r\n\t\t\tthrow new Error('Missing \"possibleLengths\" in metadata. Perhaps the metadata has been generated before v1.0.18.');\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport function isPossibleNumber(nationalNumber, isInternational, metadata) {\r\n\tswitch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {\r\n\t\tcase 'IS_POSSIBLE':\r\n\t\t\treturn true\r\n\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t// \treturn !isInternational\r\n\t\tdefault:\r\n\t\t\treturn false\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport { VALID_DIGITS } from './constants'\r\n\r\nconst CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])')\r\n\r\n/**\r\n * Pattern that makes it easy to distinguish whether a region has a single\r\n * international dialing prefix or not. If a region has a single international\r\n * prefix (e.g. 011 in USA), it will be represented as a string that contains\r\n * a sequence of ASCII digits, and possibly a tilde, which signals waiting for\r\n * the tone. If there are multiple available international prefixes in a\r\n * region, they will be represented as a regex string that always contains one\r\n * or more characters that are not ASCII digits or a tilde.\r\n */\r\nconst SINGLE_IDD_PREFIX = /^[\\d]+(?:[~\\u2053\\u223C\\uFF5E][\\d]+)?$/\r\n\r\n// For regions that have multiple IDD prefixes\r\n// a preferred IDD prefix is returned.\r\nexport function getIDDPrefix(country, metadata)\r\n{\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tif (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix()))\r\n\t{\r\n\t\treturn countryMetadata.IDDPrefix()\r\n\t}\r\n\r\n\treturn countryMetadata.defaultIDDPrefix()\r\n}\r\n\r\nexport function stripIDDPrefix(number, country, metadata)\r\n{\r\n\tif (!country) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Check if the number is IDD-prefixed.\r\n\r\n\tconst countryMetadata = new Metadata(metadata)\r\n\tcountryMetadata.country(country)\r\n\r\n\tconst IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix())\r\n\r\n\tif (number.search(IDDPrefixPattern) !== 0) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// Strip IDD prefix.\r\n\tnumber = number.slice(number.match(IDDPrefixPattern)[0].length)\r\n\r\n\t// Some kind of a weird edge case.\r\n\t// No explanation from Google given.\r\n\tconst matchedGroups = number.match(CAPTURING_DIGIT_PATTERN)\r\n\t/* istanbul ignore next */\r\n\tif (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0)\r\n\t{\r\n\t\tif (matchedGroups[1] === '0')\r\n\t\t{\r\n\t\t\treturn\r\n\t\t}\r\n\t}\r\n\r\n\treturn number\r\n}","import isViablePhoneNumber from './isViablePhoneNumber'\r\n\r\n// https://www.ietf.org/rfc/rfc3966.txt\r\n\r\n/**\r\n * @param  {string} text - Phone URI (RFC 3966).\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nexport function parseRFC3966(text)\r\n{\r\n\tlet number\r\n\tlet ext\r\n\r\n\t// Replace \"tel:\" with \"tel=\" for parsing convenience.\r\n\ttext = text.replace(/^tel:/, 'tel=')\r\n\r\n\tfor (const part of text.split(';'))\r\n\t{\r\n\t\tconst [name, value] = part.split('=')\r\n\t\tswitch (name)\r\n\t\t{\r\n\t\t\tcase 'tel':\r\n\t\t\t\tnumber = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'ext':\r\n\t\t\t\text = value\r\n\t\t\t\tbreak\r\n\t\t\tcase 'phone-context':\r\n\t\t\t\t// Only \"country contexts\" are supported.\r\n\t\t\t\t// \"Domain contexts\" are ignored.\r\n\t\t\t\tif (value[0] === '+') {\r\n\t\t\t\t\tnumber = value + number\r\n\t\t\t\t}\r\n\t\t\t\tbreak\r\n\t\t}\r\n\t}\r\n\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!isViablePhoneNumber(number))\r\n\t{\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst result = { number }\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * @param  {object} - `{ ?number, ?extension }`.\r\n * @return {string} Phone URI (RFC 3966).\r\n */\r\nexport function formatRFC3966({ number, ext })\r\n{\r\n\tif (!number)\r\n\t{\r\n\t\treturn ''\r\n\t}\r\n\r\n\tif (number[0] !== '+')\r\n\t{\r\n\t\tthrow new Error(`\"formatRFC3966()\" expects \"number\" to be in E.164 format.`)\r\n\t}\r\n\r\n\treturn `tel:${number}${ext ? ';ext=' + ext : ''}`\r\n}","import Metadata from './metadata'\r\nimport { matchesEntirely } from './util'\r\nimport getNumberType from './getNumberType_'\r\n\r\n/**\r\n * Checks if a given phone number is valid.\r\n *\r\n * If the `number` is a string, it will be parsed to an object,\r\n * but only if it contains only valid phone number characters (including punctuation).\r\n * If the `number` is an object, it is used as is.\r\n *\r\n * The optional `defaultCountry` argument is the default country.\r\n * I.e. it does not restrict to just that country,\r\n * e.g. in those cases where several countries share\r\n * the same phone numbering rules (NANPA, Britain, etc).\r\n * For example, even though the number `07624 369230`\r\n * belongs to the Isle of Man (\"IM\" country code)\r\n * calling `isValidNumber('07624369230', 'GB', metadata)`\r\n * still returns `true` because the country is not restricted to `GB`,\r\n * it's just that `GB` is the default one for the phone numbering rules.\r\n * For restricting the country see `isValidNumberForRegion()`\r\n * though restricting a country might not be a good idea.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n *\r\n * Examples:\r\n *\r\n * ```js\r\n * isValidNumber('+78005553535', metadata)\r\n * isValidNumber('8005553535', 'RU', metadata)\r\n * isValidNumber('88005553535', 'RU', metadata)\r\n * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)\r\n * ```\r\n */\r\nexport default function isValidNumber(input, options, metadata)\r\n{\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// This is just to support `isValidNumber({})`\r\n\t// for cases when `parseNumber()` returns `{}`.\r\n\tif (!input.country)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\tmetadata.selectNumberingPlan(input.country, input.countryCallingCode)\r\n\r\n\t// By default, countries only have type regexps when it's required for\r\n\t// distinguishing different countries having the same `countryCallingCode`.\r\n\tif (metadata.hasTypes())\r\n\t{\r\n\t\treturn getNumberType(input, options, metadata.metadata) !== undefined\r\n\t}\r\n\r\n\t// If there are no type regexps for this country in metadata then use\r\n\t// `nationalNumberPattern` as a \"better than nothing\" replacement.\r\n\tconst national_number = options.v2 ? input.nationalNumber : input.phone\r\n\treturn matchesEntirely(national_number, metadata.nationalNumberPattern())\r\n}","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport { VALID_PUNCTUATION } from './constants'\r\nimport { matchesEntirely } from './util'\r\nimport Metadata from './metadata'\r\nimport { getIDDPrefix } from './IDD'\r\nimport { formatRFC3966 } from './RFC3966'\r\n\r\nconst DEFAULT_OPTIONS = {\r\n\tformatExtension: (formattedNumber, extension, metadata) => `${formattedNumber}${metadata.ext()}${extension}`\r\n}\r\n\r\n// Formats a phone number\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL')\r\n// formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')\r\n// formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)\r\n// formatNumber('+78005553535', 'NATIONAL')\r\n// formatNumber('+78005553535', 'NATIONAL', metadata)\r\n// ```\r\n//\r\nexport default function formatNumber(input, format, options, metadata) {\r\n\t// Apply default options.\r\n\tif (options) {\r\n\t\toptions = { ...DEFAULT_OPTIONS, ...options }\r\n\t} else {\r\n\t\toptions = DEFAULT_OPTIONS\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\tif (input.country && input.country !== '001') {\r\n\t\t// Validate `input.country`.\r\n\t\tif (!metadata.hasCountry(input.country)) {\r\n\t\t\tthrow new Error(`Unknown country: ${input.country}`)\r\n\t\t}\r\n\t\tmetadata.country(input.country)\r\n\t}\r\n\telse if (input.countryCallingCode) {\r\n\t\tmetadata.chooseCountryByCountryCallingCode(input.countryCallingCode)\r\n\t}\r\n\telse return input.phone || ''\r\n\r\n\tconst countryCallingCode = metadata.countryCallingCode()\r\n\r\n\tconst nationalNumber = options.v2 ? input.nationalNumber : input.phone\r\n\r\n\t// This variable should have been declared inside `case`s\r\n\t// but Babel has a bug and it says \"duplicate variable declaration\".\r\n\tlet number\r\n\r\n\tswitch (format) {\r\n\t\tcase 'NATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn ''\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options)\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'INTERNATIONAL':\r\n\t\t\t// Legacy argument support.\r\n\t\t\t// (`{ country: ..., phone: '' }`)\r\n\t\t\tif (!nationalNumber) {\r\n\t\t\t\treturn `+${countryCallingCode}`\r\n\t\t\t}\r\n\t\t\tnumber = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options)\r\n\t\t\tnumber = `+${countryCallingCode} ${number}`\r\n\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\r\n\t\tcase 'E.164':\r\n\t\t\t// `E.164` doesn't define \"phone number extensions\".\r\n\t\t\treturn `+${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tcase 'RFC3966':\r\n\t\t\treturn formatRFC3966({\r\n\t\t\t\tnumber: `+${countryCallingCode}${nationalNumber}`,\r\n\t\t\t\text: input.ext\r\n\t\t\t})\r\n\r\n\t\tcase 'IDD':\r\n\t\t\tif (!options.fromCountry) {\r\n\t\t\t\treturn\r\n\t\t\t\t// throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')\r\n\t\t\t}\r\n\t\t\tconst IDDPrefix = getIDDPrefix(options.fromCountry, metadata.metadata)\r\n\t\t\tif (!IDDPrefix) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t\tif (options.humanReadable) {\r\n\t\t\t\tconst formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(\r\n\t\t\t\t\tnationalNumber,\r\n\t\t\t\t\tmetadata.countryCallingCode(),\r\n\t\t\t\t\toptions.fromCountry,\r\n\t\t\t\t\tmetadata,\r\n\t\t\t\t\toptions\r\n\t\t\t\t)\r\n\t\t\t\tif (formattedForSameCountryCallingCode) {\r\n\t\t\t\t\tnumber = formattedForSameCountryCallingCode\r\n\t\t\t\t} else {\r\n\t\t\t\t\tnumber = `${IDDPrefix} ${countryCallingCode} ${formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options)}`\r\n\t\t\t\t}\r\n\t\t\t\treturn addExtension(number, input.ext, metadata, options.formatExtension)\r\n\t\t\t}\r\n\t\t\treturn `${IDDPrefix}${countryCallingCode}${nationalNumber}`\r\n\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unknown \"format\" argument passed to \"formatNumber()\": \"${format}\"`)\r\n\t}\r\n}\r\n\r\n// This was originally set to $1 but there are some countries for which the\r\n// first group is not used in the national pattern (e.g. Argentina) so the $1\r\n// group does not match correctly.  Therefore, we use \\d, so that the first\r\n// group actually used in the pattern will be matched.\r\nexport const FIRST_GROUP_PATTERN = /(\\$\\d)/\r\n\r\nexport function formatNationalNumberUsingFormat(\r\n\tnumber,\r\n\tformat,\r\n\tuseInternationalSeparator,\r\n\tuseNationalPrefixFormattingRule,\r\n\tmetadata\r\n) {\r\n\tconst formattedNumber = number.replace(\r\n\t\tnew RegExp(format.pattern()),\r\n\t\tuseInternationalSeparator ?\r\n\t\t\tformat.internationalFormat() :\r\n\t\t\tuseNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ?\r\n\t\t\t\tformat.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) :\r\n\t\t\t\tformat.format()\r\n\t)\r\n\tif (useInternationalSeparator) {\r\n\t\treturn applyInternationalSeparatorStyle(formattedNumber)\r\n\t}\r\n\treturn formattedNumber\r\n}\r\n\r\nfunction formatNationalNumber(number, formatAs, metadata, options) {\r\n\tconst format = chooseFormatForNumber(metadata.formats(), number)\r\n\tif (!format) {\r\n\t\treturn number\r\n\t}\r\n\treturn formatNationalNumberUsingFormat(\r\n\t\tnumber,\r\n\t\tformat,\r\n\t\tformatAs === 'INTERNATIONAL',\r\n\t\tformat.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true,\r\n\t\tmetadata\r\n\t)\r\n}\r\n\r\nfunction chooseFormatForNumber(availableFormats, nationalNnumber) {\r\n\tfor (const format of availableFormats) {\r\n\t\t// Validate leading digits\r\n\t\tif (format.leadingDigitsPatterns().length > 0) {\r\n\t\t\t// The last leading_digits_pattern is used here, as it is the most detailed\r\n\t\t\tconst lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]\r\n\t\t\t// If leading digits don't match then move on to the next phone number format\r\n\t\t\tif (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Check that the national number matches the phone number format regular expression\r\n\t\tif (matchesEntirely(nationalNnumber, format.pattern())) {\r\n\t\t\treturn format\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Removes brackets and replaces dashes with spaces.\r\n//\r\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\r\n//\r\n// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.\r\n// Meanwhile, there's no single opinion about using punctuation in international phone numbers.\r\n//\r\n// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.\r\n// And here's a quote from WikiPedia's \"North American Numbering Plan\" page:\r\n// https://en.wikipedia.org/wiki/North_American_Numbering_Plan\r\n//\r\n// \"The country calling code for all countries participating in the NANP is 1.\r\n// In international format, an NANP number should be listed as +1 301 555 01 00,\r\n// where 301 is an area code (Maryland).\"\r\n//\r\n// I personally prefer the international format without any punctuation.\r\n// For example, brackets are remnants of the old age, meaning that the\r\n// phone number part in brackets (so called \"area code\") can be omitted\r\n// if dialing within the same \"area\".\r\n// And hyphens were clearly introduced for splitting local numbers into memorizable groups.\r\n// For example, remembering \"5553535\" is difficult but \"555-35-35\" is much simpler.\r\n// Imagine a man taking a bus from home to work and seeing an ad with a phone number.\r\n// He has a couple of seconds to memorize that number until it passes by.\r\n// If it were spaces instead of hyphens the man wouldn't necessarily get it,\r\n// but with hyphens instead of spaces the grouping is more explicit.\r\n// I personally think that hyphens introduce visual clutter,\r\n// so I prefer replacing them with spaces in international numbers.\r\n// In the modern age all output is done on displays where spaces are clearly distinguishable\r\n// so hyphens can be safely replaced with spaces without losing any legibility.\r\n//\r\nexport function applyInternationalSeparatorStyle(local) {\r\n\treturn local.replace(new RegExp(`[${VALID_PUNCTUATION}]+`, 'g'), ' ').trim()\r\n}\r\n\r\nfunction addExtension(formattedNumber, ext, metadata, formatExtension) {\r\n\treturn ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber\r\n}\r\n\r\nfunction formatIDDSameCountryCallingCodeNumber(\r\n\tnumber,\r\n\ttoCountryCallingCode,\r\n\tfromCountry,\r\n\ttoCountryMetadata,\r\n\toptions\r\n) {\r\n\tconst fromCountryMetadata = new Metadata(toCountryMetadata.metadata)\r\n\tfromCountryMetadata.country(fromCountry)\r\n\t// If calling within the same country calling code.\r\n\tif (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {\r\n\t\t// For NANPA regions, return the national format for these regions\r\n\t\t// but prefix it with the country calling code.\r\n\t\tif (toCountryCallingCode === '1') {\r\n\t\t\treturn toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options)\r\n\t\t}\r\n\t\t// If regions share a country calling code, the country calling code need\r\n\t\t// not be dialled. This also applies when dialling within a region, so this\r\n\t\t// if clause covers both these cases. Technically this is the case for\r\n\t\t// dialling from La Reunion to other overseas departments of France (French\r\n\t\t// Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover\r\n\t\t// this edge case for now and for those cases return the version including\r\n\t\t// country calling code. Details here:\r\n\t\t// http://www.petitfute.com/voyage/225-info-pratiques-reunion\r\n\t\t//\r\n\t\treturn formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options)\r\n\t}\r\n}","import Metadata from './metadata'\r\nimport isPossibleNumber from './isPossibleNumber_'\r\nimport isValidNumber from './validate_'\r\nimport isValidNumberForRegion from './isValidNumberForRegion_'\r\nimport getNumberType from './getNumberType_'\r\nimport formatNumber from './format_'\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class PhoneNumber {\r\n\tconstructor(countryCallingCode, nationalNumber, metadata) {\r\n\t\tif (!countryCallingCode) {\r\n\t\t\tthrow new TypeError('`country` or `countryCallingCode` not passed')\r\n\t\t}\r\n\t\tif (!nationalNumber) {\r\n\t\t\tthrow new TypeError('`nationalNumber` not passed')\r\n\t\t}\r\n\t\tconst _metadata = new Metadata(metadata)\r\n\t\t// If country code is passed then derive `countryCallingCode` from it.\r\n\t\t// Also store the country code as `.country`.\r\n\t\tif (isCountryCode(countryCallingCode)) {\r\n\t\t\tthis.country = countryCallingCode\r\n\t\t\t_metadata.country(countryCallingCode)\r\n\t\t\tcountryCallingCode = _metadata.countryCallingCode()\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (_metadata.isNonGeographicCallingCode(countryCallingCode)) {\r\n\t\t\t\t\tthis.country = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.nationalNumber = nationalNumber\r\n\t\tthis.number = '+' + this.countryCallingCode + this.nationalNumber\r\n\t\tthis.metadata = metadata\r\n\t}\r\n\r\n\tisPossible() {\r\n\t\treturn isPossibleNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisValid() {\r\n\t\treturn isValidNumber(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tisNonGeographic() {\r\n\t\tconst metadata = new Metadata(this.metadata)\r\n\t\treturn metadata.isNonGeographicCallingCode(this.countryCallingCode)\r\n\t}\r\n\r\n\tisEqual(phoneNumber) {\r\n\t\treturn this.number === phoneNumber.number && this.ext === phoneNumber.ext\r\n\t}\r\n\r\n\t// // Is just an alias for `this.isValid() && this.country === country`.\r\n\t// // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion\r\n\t// isValidForRegion(country) {\r\n\t// \treturn isValidNumberForRegion(this, country, { v2: true }, this.metadata)\r\n\t// }\r\n\r\n\tgetType() {\r\n\t\treturn getNumberType(this, { v2: true }, this.metadata)\r\n\t}\r\n\r\n\tformat(format, options) {\r\n\t\treturn formatNumber(\r\n\t\t\tthis,\r\n\t\t\tformat,\r\n\t\t\toptions ? { ...options, v2: true } : { v2: true },\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\tformatNational(options) {\r\n\t\treturn this.format('NATIONAL', options)\r\n\t}\r\n\r\n\tformatInternational(options) {\r\n\t\treturn this.format('INTERNATIONAL', options)\r\n\t}\r\n\r\n\tgetURI(options) {\r\n\t\treturn this.format('RFC3966', options)\r\n\t}\r\n}\r\n\r\nconst isCountryCode = (value) => /^[A-Z]{2}$/.test(value)","// This is a port of Google Android `libphonenumber`'s\r\n// `phonenumberutil.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/commits/master/javascript/i18n/phonenumbers/phonenumberutil.js\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS,\r\n\tMIN_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_FOR_NSN,\r\n\tMAX_LENGTH_COUNTRY_CODE\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\nimport ParseError from './ParseError'\r\nimport Metadata from './metadata'\r\nimport isViablePhoneNumber from './isViablePhoneNumber'\r\nimport { extractExtension } from './extension'\r\nimport parseIncompletePhoneNumber from './parseIncompletePhoneNumber'\r\nimport getCountryCallingCode from './getCountryCallingCode'\r\nimport getNumberType, { checkNumberLengthForType } from './getNumberType_'\r\nimport { isPossibleNumber } from './isPossibleNumber_'\r\nimport { stripIDDPrefix } from './IDD'\r\nimport { parseRFC3966 } from './RFC3966'\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\n// We don't allow input strings for parsing to be longer than 250 chars.\r\n// This prevents malicious input from consuming CPU.\r\nconst MAX_INPUT_STRING_LENGTH = 250\r\n\r\n// This consists of the plus symbol, digits, and arabic-indic digits.\r\nconst PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']')\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\nconst AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\n// `options`:\r\n//  {\r\n//    country:\r\n//    {\r\n//      restrict - (a two-letter country code)\r\n//                 the phone number must be in this country\r\n//\r\n//      default - (a two-letter country code)\r\n//                default country to use for phone number parsing and validation\r\n//                (if no country code could be derived from the phone number)\r\n//    }\r\n//  }\r\n//\r\n// Returns `{ country, number }`\r\n//\r\n// Example use cases:\r\n//\r\n// ```js\r\n// parse('8 (800) 555-35-35', 'RU')\r\n// parse('8 (800) 555-35-35', 'RU', metadata)\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } })\r\n// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)\r\n// parse('+7 800 555 35 35')\r\n// parse('+7 800 555 35 35', metadata)\r\n// ```\r\n//\r\nexport default function parse(text, options, metadata) {\r\n\t// If assigning the `{}` default value is moved to the arguments above,\r\n\t// code coverage would decrease for some weird reason.\r\n\toptions = options || {}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// Validate `defaultCountry`.\r\n\tif (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\tthrow new Error(`Unknown country: ${options.defaultCountry}`)\r\n\t}\r\n\r\n\t// Parse the phone number.\r\n\tconst { number: formattedPhoneNumber, ext } = parseInput(text, options.v2)\r\n\r\n\t// If the phone number is not viable then return nothing.\r\n\tif (!formattedPhoneNumber) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('NOT_A_NUMBER')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\tconst {\r\n\t\tcountry,\r\n\t\tnationalNumber,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode\r\n\t} = parsePhoneNumber(\r\n\t\tformattedPhoneNumber,\r\n\t\toptions.defaultCountry,\r\n\t\toptions.defaultCallingCode,\r\n\t\tmetadata\r\n\t)\r\n\r\n\tif (!metadata.hasSelectedNumberingPlan()) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('INVALID_COUNTRY')\r\n\t\t}\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\tif (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {\r\n\t\t// Won't throw here because the regexp already demands length > 1.\r\n\t\t/* istanbul ignore if */\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_SHORT')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// Validate national (significant) number length.\r\n\t//\r\n\t// A sidenote:\r\n\t//\r\n\t// They say that sometimes national (significant) numbers\r\n\t// can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).\r\n\t// https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36\r\n\t// Such numbers will just be discarded.\r\n\t//\r\n\tif (nationalNumber.length > MAX_LENGTH_FOR_NSN) {\r\n\t\tif (options.v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\t// Google's demo just throws an error in this case.\r\n\t\treturn {}\r\n\t}\r\n\r\n\tif (options.v2) {\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnationalNumber,\r\n\t\t\tmetadata.metadata\r\n\t\t)\r\n\t\tif (country) {\r\n\t\t\tphoneNumber.country = country\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = carrierCode\r\n\t\t}\r\n\t\tif (ext) {\r\n\t\t\tphoneNumber.ext = ext\r\n\t\t}\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t// Check if national phone number pattern matches the number.\r\n\t// National number pattern is different for each country,\r\n\t// even for those ones which are part of the \"NANPA\" group.\r\n\tconst valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ?\r\n\t\tmatchesEntirely(nationalNumber, metadata.nationalNumberPattern()) :\r\n\t\tfalse\r\n\r\n\tif (!options.extended) {\r\n\t\treturn valid ? result(country, nationalNumber, ext) : {}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tcarrierCode,\r\n\t\tvalid,\r\n\t\tpossible: valid ? true : (\r\n\t\t\toptions.extended === true &&\r\n\t\t\tmetadata.possibleLengths() &&\r\n\t\t\tisPossibleNumber(nationalNumber, countryCallingCode !== undefined, metadata) ? true : false\r\n\t\t),\r\n\t\tphone: nationalNumber,\r\n\t\text\r\n\t}\r\n}\r\n\r\n/**\r\n * Extracts a formatted phone number from text.\r\n * Doesn't guarantee that the extracted phone number\r\n * is a valid phone number (for example, doesn't validate its length).\r\n * @param  {string} text\r\n * @return {string}\r\n * @example\r\n * // Returns \"(213) 373-4253\".\r\n * extractFormattedPhoneNumber(\"Call (213) 373-4253 for assistance.\")\r\n */\r\nexport function extractFormattedPhoneNumber(text, v2) {\r\n\tif (!text) {\r\n\t\treturn\r\n\t}\r\n\tif (text.length > MAX_INPUT_STRING_LENGTH) {\r\n\t\tif (v2) {\r\n\t\t\tthrow new ParseError('TOO_LONG')\r\n\t\t}\r\n\t\treturn\r\n\t}\r\n\t// Attempt to extract a possible number from the string passed in\r\n\tconst startsAt = text.search(PHONE_NUMBER_START_PATTERN)\r\n\tif (startsAt < 0) {\r\n\t\treturn\r\n\t}\r\n\treturn text\r\n\t\t// Trim everything to the left of the phone number\r\n\t\t.slice(startsAt)\r\n\t\t// Remove trailing non-numerical characters\r\n\t\t.replace(AFTER_PHONE_NUMBER_END_PATTERN, '')\r\n}\r\n\r\n/**\r\n * Strips any national prefix (such as 0, 1) present in the number provided.\r\n * \"Carrier codes\" are only used  in Colombia and Brazil,\r\n * and only when dialing within those countries from a mobile phone to a fixed line number.\r\n * Sometimes it won't actually strip national prefix\r\n * and will instead prepend some digits to the `number`:\r\n * for example, when number `2345678` is passed with `VI` country selected,\r\n * it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n * @param {string} number — National number digits.\r\n * @param {object} metadata — Metadata with country selected.\r\n * @return {object} `{ nationalNumber: string?, carrierCode: string? }`.\r\n */\r\nexport function stripNationalPrefixAndCarrierCode(number, metadata) {\r\n\tif (number && metadata.nationalPrefixForParsing()) {\r\n\t\t// See METADATA.md for the description of\r\n\t\t// `national_prefix_for_parsing` and `national_prefix_transform_rule`.\r\n\t\t// Attempt to parse the first digits as a national prefix.\r\n\t\tconst prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')')\r\n\t\tconst prefixMatch = prefixPattern.exec(number)\r\n\t\tif (prefixMatch) {\r\n\t\t\tlet nationalNumber\r\n\t\t\tlet carrierCode\r\n\t\t\t// If a \"capturing group\" didn't match\r\n\t\t\t// then its element in `prefixMatch[]` array will be `undefined`.\r\n\t\t\tconst capturedGroupsCount = prefixMatch.length - 1\r\n\t\t\tif (metadata.nationalPrefixTransformRule() &&\r\n\t\t\t\tcapturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {\r\n\t\t\t\tnationalNumber = number.replace(\r\n\t\t\t\t\tprefixPattern,\r\n\t\t\t\t\tmetadata.nationalPrefixTransformRule()\r\n\t\t\t\t)\r\n\t\t\t\t// Carrier code is the last captured group,\r\n\t\t\t\t// but only when there's more than one captured group.\r\n\t\t\t\tif (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// If it's a simple-enough case then just\r\n\t\t\t// strip the national prefix from the number.\r\n\t\t\telse {\r\n\t\t\t\t// National prefix is the whole substring matched by\r\n\t\t\t\t// the `national_prefix_for_parsing` regexp.\r\n\t\t\t\tconst nationalPrefix = prefixMatch[0]\r\n\t\t\t\tnationalNumber = number.slice(nationalPrefix.length)\r\n\t\t\t\t// Carrier code is the last captured group.\r\n\t\t\t\tif (capturedGroupsCount > 0) {\r\n\t\t\t\t\tcarrierCode = prefixMatch[1]\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// We require that the national (significant) number remaining after\r\n\t\t\t// stripping the national prefix and carrier code be long enough\r\n\t\t\t// to be a possible length for the region. Otherwise, we don't do\r\n\t\t\t// the stripping, since the original number could be a valid number.\r\n\t\t\t// For example, in some countries (Russia, Belarus) the same digit\r\n\t\t\t// could be both a national prefix and a leading digit of a valid\r\n\t\t\t// national phone number, like `8` is the national prefix for Russia\r\n\t\t\t// and `800 555 35 35` is a valid national (significant) number.\r\n\r\n\t\t\tif (matchesEntirely(number, metadata.nationalNumberPattern()) &&\r\n\t\t\t\t!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {\r\n\t\t\t\t// Don't strip national prefix or carrier code.\r\n\t\t\t} else {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tnationalNumber,\r\n\t\t\t\t\tcarrierCode\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n   return {\r\n   \tnationalNumber: number\r\n   }\r\n}\r\n\r\nexport function findCountryCode(callingCode, nationalPhoneNumber, metadata) {\r\n\t/* istanbul ignore if */\r\n\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\tif (metadata.isNonGeographicCallingCode(callingCode)) {\r\n\t\t\treturn '001'\r\n\t\t}\r\n\t}\r\n\t// Is always non-empty, because `callingCode` is always valid\r\n\tconst possibleCountries = metadata.getCountryCodesForCallingCode(callingCode)\r\n\tif (!possibleCountries) {\r\n\t\treturn\r\n\t}\r\n\t// If there's just one country corresponding to the country code,\r\n\t// then just return it, without further phone number digits validation.\r\n\tif (possibleCountries.length === 1) {\r\n\t\treturn possibleCountries[0]\r\n\t}\r\n\treturn _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata)\r\n}\r\n\r\n// Changes `metadata` `country`.\r\nfunction _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {\r\n\tmetadata = new Metadata(metadata)\r\n\tfor (const country of possibleCountries) {\r\n\t\tmetadata.country(country)\r\n\t\t// Leading digits check would be the simplest one\r\n\t\tif (metadata.leadingDigits()) {\r\n\t\t\tif (nationalPhoneNumber &&\r\n\t\t\t\tnationalPhoneNumber.search(metadata.leadingDigits()) === 0) {\r\n\t\t\t\treturn country\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Else perform full validation with all of those\r\n\t\t// fixed-line/mobile/etc regular expressions.\r\n\t\telse if (getNumberType({ phone: nationalPhoneNumber, country }, undefined, metadata.metadata)) {\r\n\t\t\treturn country\r\n\t\t}\r\n\t}\r\n}\r\n\r\n/**\r\n * @param  {string} text - Input.\r\n * @return {object} `{ ?number, ?ext }`.\r\n */\r\nfunction parseInput(text, v2) {\r\n\t// Parse RFC 3966 phone number URI.\r\n\tif (text && text.indexOf('tel:') === 0) {\r\n\t\treturn parseRFC3966(text)\r\n\t}\r\n\tlet number = extractFormattedPhoneNumber(text, v2)\r\n\t// If the phone number is not viable, then abort.\r\n\tif (!number || !isViablePhoneNumber(number)) {\r\n\t\treturn {}\r\n\t}\r\n\t// Attempt to parse extension first, since it doesn't require region-specific\r\n\t// data and we want to have the non-normalised number here.\r\n\tconst with_extension_stripped = extractExtension(number)\r\n\tif (with_extension_stripped.ext) {\r\n\t\treturn with_extension_stripped\r\n\t}\r\n\treturn { number }\r\n}\r\n\r\n/**\r\n * Creates `parse()` result object.\r\n */\r\nfunction result(country, national_number, ext) {\r\n\tconst result = {\r\n\t\tcountry,\r\n\t\tphone : national_number\r\n\t}\r\n\tif (ext) {\r\n\t\tresult.ext = ext\r\n\t}\r\n\treturn result\r\n}\r\n\r\n/**\r\n * Parses a viable phone number.\r\n * @param {string} formattedPhoneNumber\r\n * @param {string} [defaultCountry]\r\n * @param {string} [defaultCallingCode]\r\n * @param {Metadata} metadata\r\n * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.\r\n */\r\nfunction parsePhoneNumber(\r\n\tformattedPhoneNumber,\r\n\tdefaultCountry,\r\n\tdefaultCallingCode,\r\n\tmetadata\r\n) {\r\n\tlet { countryCallingCode, number } = extractCountryCallingCode(\r\n\t\tformattedPhoneNumber,\r\n\t\tdefaultCountry,\r\n\t\tmetadata.metadata\r\n\t)\r\n\r\n\t// Choose a country by `countryCallingCode`.\r\n\tlet country\r\n\tif (countryCallingCode) {\r\n\t\tmetadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t}\r\n\t// If `formattedPhoneNumber` is in \"national\" format\r\n\t// then `number` is defined and `countryCallingCode` isn't.\r\n\telse if (number && (defaultCountry || defaultCallingCode)) {\r\n\t\tmetadata.selectNumberingPlan(defaultCountry, defaultCallingCode)\r\n\t\tif (defaultCountry) {\r\n\t\t\tcountry = defaultCountry\r\n\t\t} else {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tcountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcountryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata)\r\n\t}\r\n\telse return {}\r\n\r\n\tif (!number) {\r\n\t\treturn { countryCallingCode }\r\n\t}\r\n\r\n\tconst { nationalNumber, carrierCode } = parseNationalPhoneNumber(number, metadata)\r\n\r\n\t// Sometimes there are several countries\r\n\t// corresponding to the same country phone code\r\n\t// (e.g. NANPA countries all having `1` country phone code).\r\n\t// Therefore, to reliably determine the exact country,\r\n\t// national (significant) number should have been parsed first.\r\n\t//\r\n\t// When `metadata.json` is generated, all \"ambiguous\" country phone codes\r\n\t// get their countries populated with the full set of\r\n\t// \"phone number type\" regular expressions.\r\n\t//\r\n\tconst exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata)\r\n\tif (exactCountry) {\r\n\t\tcountry = exactCountry\r\n\t\t/* istanbul ignore if */\r\n\t\tif (exactCountry === '001') {\r\n\t\t\t// Can't happen with `USE_NON_GEOGRAPHIC_COUNTRY_CODE` being `false`.\r\n\t\t\t// If `USE_NON_GEOGRAPHIC_COUNTRY_CODE` is set to `true` for some reason,\r\n\t\t\t// then remove the \"istanbul ignore if\".\r\n\t\t} else {\r\n\t\t\tmetadata.country(country)\r\n\t\t}\r\n\t}\r\n\r\n\treturn {\r\n\t\tcountry,\r\n\t\tcountryCallingCode,\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}\r\n\r\nfunction parseNationalPhoneNumber(number, metadata) {\r\n\t// Parsing national prefixes and carrier codes\r\n\t// is only required for local phone numbers\r\n\t// but some people don't understand that\r\n\t// and sometimes write international phone numbers\r\n\t// with national prefixes (or maybe even carrier codes).\r\n\t// http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html\r\n\t// Google's original library forgives such mistakes\r\n\t// and so does this library, because it has been requested:\r\n\t// https://github.com/catamphetamine/libphonenumber-js/issues/127\r\n\tconst {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t} = stripNationalPrefixAndCarrierCode(\r\n\t\tparseIncompletePhoneNumber(number),\r\n\t\tmetadata\r\n\t)\r\n\t// If not using legacy generated metadata (before version `1.0.18`)\r\n\t// then it has \"possible lengths\", so use those to validate the number length.\r\n\tif (metadata.possibleLengths()) {\r\n\t\t// We require that the NSN remaining after stripping the national prefix and\r\n\t\t// carrier code be long enough to be a possible length for the region.\r\n\t\t// Otherwise, we don't do the stripping, since the original number could be\r\n\t\t// a valid short number.\r\n\t\tswitch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {\r\n\t\t\tcase 'TOO_SHORT':\r\n\t\t\tcase 'INVALID_LENGTH':\r\n\t\t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t\t\t\treturn { nationalNumber: number }\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\tnationalNumber,\r\n\t\tcarrierCode\r\n\t}\r\n}\r\n\r\n// Parses a formatted phone number\r\n// and returns `{ countryCallingCode, number }`\r\n// where `number` is just the \"number\" part\r\n// which is left after extracting `countryCallingCode`\r\n// and is not necessarily a \"national (significant) number\"\r\n// and might as well contain national prefix.\r\n//\r\nexport function extractCountryCallingCode(number, country, metadata) {\r\n\tnumber = parseIncompletePhoneNumber(number)\r\n\r\n\tif (!number) {\r\n\t\treturn {}\r\n\t}\r\n\r\n\t// If this is not an international phone number,\r\n\t// then don't extract country phone code.\r\n\tif (number[0] !== '+') {\r\n\t\t// Convert an \"out-of-country\" dialing phone number\r\n\t\t// to a proper international phone number.\r\n\t\tconst numberWithoutIDD = stripIDDPrefix(number, country, metadata)\r\n\r\n\t\t// If an IDD prefix was stripped then\r\n\t\t// convert the number to international one\r\n\t\t// for subsequent parsing.\r\n\t\tif (numberWithoutIDD && numberWithoutIDD !== number) {\r\n\t\t\tnumber = '+' + numberWithoutIDD\r\n\t\t} else {\r\n\t\t\treturn { number }\r\n\t\t}\r\n\t}\r\n\r\n\t// Fast abortion: country codes do not begin with a '0'\r\n\tif (number[1] === '0') {\r\n\t\treturn {}\r\n\t}\r\n\r\n\tmetadata = new Metadata(metadata)\r\n\r\n\t// The thing with country phone codes\r\n\t// is that they are orthogonal to each other\r\n\t// i.e. there's no such country phone code A\r\n\t// for which country phone code B exists\r\n\t// where B starts with A.\r\n\t// Therefore, while scanning digits,\r\n\t// if a valid country code is found,\r\n\t// that means that it is the country code.\r\n\t//\r\n\tlet i = 2\r\n\twhile (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {\r\n\t\tconst countryCallingCode = number.slice(1, i)\r\n\t\tif (metadata.hasCallingCode(countryCallingCode)) {\r\n\t\t\treturn {\r\n\t\t\t\tcountryCallingCode,\r\n\t\t\t\tnumber: number.slice(i)\r\n\t\t\t}\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\r\n\treturn {}\r\n}\r\n","import parseNumber from './parse_'\r\n\r\nexport default function parsePhoneNumber(text, options, metadata) {\r\n\treturn parseNumber(text, { ...options, v2: true }, metadata)\r\n}","import parsePhoneNumber_ from './parsePhoneNumber_'\r\n\r\nexport default function parsePhoneNumber() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumber_(text, options, metadata)\r\n}\r\n\r\nexport function normalizeArguments(args)\r\n{\r\n\tconst [arg_1, arg_2, arg_3, arg_4] = Array.prototype.slice.call(args)\r\n\r\n\tlet text\r\n\tlet options\r\n\tlet metadata\r\n\r\n\t// If the phone number is passed as a string.\r\n\t// `parsePhoneNumber('88005553535', ...)`.\r\n\tif (typeof arg_1 === 'string') {\r\n\t\ttext = arg_1\r\n\t}\r\n\telse throw new TypeError('A text for parsing must be a string.')\r\n\r\n\t// If \"default country\" argument is being passed then move it to `options`.\r\n\t// `parsePhoneNumber('88005553535', 'RU', [options], metadata)`.\r\n\tif (!arg_2 || typeof arg_2 === 'string')\r\n\t{\r\n\t\tif (arg_4) {\r\n\t\t\toptions = arg_3\r\n\t\t\tmetadata = arg_4\r\n\t\t} else {\r\n\t\t\toptions = undefined\r\n\t\t\tmetadata = arg_3\r\n\t\t}\r\n\r\n\t\tif (arg_2) {\r\n\t\t\toptions = { defaultCountry: arg_2, ...options }\r\n\t\t}\r\n\t}\r\n\t// `defaultCountry` is not passed.\r\n\t// Example: `parsePhoneNumber('+78005553535', [options], metadata)`.\r\n\telse if (isObject(arg_2))\r\n\t{\r\n\t\tif (arg_3) {\r\n\t\t\toptions  = arg_2\r\n\t\t\tmetadata = arg_3\r\n\t\t} else {\r\n\t\t\tmetadata = arg_2\r\n\t\t}\r\n\t}\r\n\telse throw new Error(`Invalid second argument: ${arg_2}`)\r\n\r\n\treturn {\r\n\t\ttext,\r\n\t\toptions,\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Otherwise istanbul would show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst isObject = _ => typeof _ === 'object'","import parsePhoneNumber from './parsePhoneNumber_'\r\nimport ParseError from './ParseError'\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nexport default function parsePhoneNumberFromString(text, options, metadata) {\r\n\t// Validate `defaultCountry`.\r\n\tif (options && options.defaultCountry && !isSupportedCountry(options.defaultCountry, metadata)) {\r\n\t\toptions = {\r\n\t\t\t...options,\r\n\t\t\tdefaultCountry: undefined\r\n\t\t}\r\n\t}\r\n\t// Parse phone number.\r\n\ttry {\r\n\t\treturn parsePhoneNumber(text, options, metadata)\r\n\t} catch (error) {\r\n\t\t/* istanbul ignore else */\r\n\t\tif (error instanceof ParseError) {\r\n\t\t\t//\r\n\t\t} else {\r\n\t\t\tthrow error\r\n\t\t}\r\n\t}\r\n}\r\n","import { normalizeArguments } from './parsePhoneNumber'\r\nimport parsePhoneNumberFromString_ from './parsePhoneNumberFromString_'\r\n\r\nexport default function parsePhoneNumberFromString() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn parsePhoneNumberFromString_(text, options, metadata)\r\n}\r\n","// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9\r\n\r\nclass Node {\r\n  constructor(key, value, next = null, prev = null) {\r\n    this.key = key;\r\n    this.value = value;\r\n    this.next = next;\r\n    this.prev = prev;\r\n  }\r\n}\r\n\r\nexport default class LRUCache {\r\n  //set default limit of 10 if limit is not passed.\r\n  constructor(limit = 10) {\r\n    this.size = 0;\r\n    this.limit = limit;\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.cache = {};\r\n  }\r\n\r\n  // Write Node to head of LinkedList\r\n  // update cache with Node key and Node reference\r\n  put(key, value){\r\n    this.ensureLimit();\r\n\r\n    if(!this.head){\r\n      this.head = this.tail = new Node(key, value);\r\n    }else{\r\n      const node = new Node(key, value, this.head);\r\n      this.head.prev = node;\r\n      this.head = node;\r\n    }\r\n\r\n    //Update the cache map\r\n    this.cache[key] = this.head;\r\n    this.size++;\r\n  }\r\n\r\n  // Read from cache map and make that node as new Head of LinkedList\r\n  get(key){\r\n    if(this.cache[key]){\r\n      const value = this.cache[key].value;\r\n\r\n      // node removed from it's position and cache\r\n      this.remove(key)\r\n      // write node again to the head of LinkedList to make it most recently used\r\n      this.put(key, value);\r\n\r\n      return value;\r\n    }\r\n\r\n    console.log(`Item not available in cache for key ${key}`);\r\n  }\r\n\r\n  ensureLimit(){\r\n    if(this.size === this.limit){\r\n      this.remove(this.tail.key)\r\n    }\r\n  }\r\n\r\n  remove(key){\r\n    const node = this.cache[key];\r\n\r\n    if(node.prev !== null){\r\n      node.prev.next = node.next;\r\n    }else{\r\n      this.head = node.next;\r\n    }\r\n\r\n    if(node.next !== null){\r\n      node.next.prev = node.prev;\r\n    }else{\r\n      this.tail = node.prev\r\n    }\r\n\r\n    delete this.cache[key];\r\n    this.size--;\r\n  }\r\n\r\n  clear() {\r\n    this.head = null;\r\n    this.tail = null;\r\n    this.size = 0;\r\n    this.cache = {};\r\n  }\r\n\r\n  // // Invokes the callback function with every node of the chain and the index of the node.\r\n  // forEach(fn) {\r\n  //   let node = this.head;\r\n  //   let counter = 0;\r\n  //   while (node) {\r\n  //     fn(node, counter);\r\n  //     node = node.next;\r\n  //     counter++;\r\n  //   }\r\n  // }\r\n\r\n  // // To iterate over LRU with a 'for...of' loop\r\n  // *[Symbol.iterator]() {\r\n  //   let node = this.head;\r\n  //   while (node) {\r\n  //     yield node;\r\n  //     node = node.next;\r\n  //   }\r\n  // }\r\n}","import LRUCache from './LRUCache'\r\n\r\n// A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n// countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n// a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n// that use-case won't have a lot of benefit.\r\nexport default class RegExpCache {\r\n\tconstructor(size) {\r\n\t\tthis.cache = new LRUCache(size)\r\n\t}\r\n\r\n\tgetPatternForRegExp(pattern) {\r\n\t\tlet regExp = this.cache.get(pattern)\r\n\t\tif (!regExp) {\r\n\t\t\tregExp = new RegExp('^' + pattern)\r\n\t\t\tthis.cache.put(pattern, regExp)\r\n\t\t}\r\n\t\treturn regExp\r\n\t}\r\n}","/** Returns a regular expression quantifier with an upper and lower limit. */\r\nexport function limit(lower, upper)\r\n{\r\n\tif ((lower < 0) || (upper <= 0) || (upper < lower)) {\r\n\t\tthrow new TypeError()\r\n\t}\r\n\treturn `{${lower},${upper}}`\r\n}\r\n\r\n/**\r\n * Trims away any characters after the first match of {@code pattern} in {@code candidate},\r\n * returning the trimmed version.\r\n */\r\nexport function trimAfterFirstMatch(regexp, string)\r\n{\r\n\tconst index = string.search(regexp)\r\n\r\n\tif (index >= 0) {\r\n\t\treturn string.slice(0, index)\r\n\t}\r\n\r\n\treturn string\r\n}\r\n\r\nexport function startsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring) === 0\r\n}\r\n\r\nexport function endsWith(string, substring)\r\n{\r\n\treturn string.indexOf(substring, string.length - substring.length) === string.length - substring.length\r\n}\r\n","// Javascript doesn't support UTF-8 regular expressions.\r\n// So mimicking them here.\r\n\r\n// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\n/**\r\n * \"\\p{Z}\" is any kind of whitespace or invisible separator (\"Separator\").\r\n * http://www.regular-expressions.info/unicode.html\r\n * \"\\P{Z}\" is the reverse of \"\\p{Z}\".\r\n * \"\\p{N}\" is any kind of numeric character in any script (\"Number\").\r\n * \"\\p{Nd}\" is a digit zero through nine in any script except \"ideographic scripts\" (\"Decimal_Digit_Number\").\r\n * \"\\p{Sc}\" is a currency symbol (\"Currency_Symbol\").\r\n * \"\\p{L}\" is any kind of letter from any language (\"Letter\").\r\n * \"\\p{Mn}\" is \"non-spacing mark\".\r\n *\r\n * Javascript doesn't support Unicode Regular Expressions\r\n * so substituting it with this explicit set of characters.\r\n *\r\n * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl\r\n * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js\r\n */\r\n\r\nconst _pZ = '\\u0020\\u00A0\\u1680\\u180E\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000'\r\nexport const pZ = `[${_pZ}]`\r\nexport const PZ = `[^${_pZ}]`\r\n\r\nexport const _pN = '\\u0030-\\u0039\\u00B2\\u00B3\\u00B9\\u00BC-\\u00BE\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u09F4-\\u09F9\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0B72-\\u0B77\\u0BE6-\\u0BF2\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0CE6-\\u0CEF\\u0D66-\\u0D75\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F33\\u1040-\\u1049\\u1090-\\u1099\\u1369-\\u137C\\u16EE-\\u16F0\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19DA\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u2182\\u2185-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2CFD\\u3007\\u3021-\\u3029\\u3038-\\u303A\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\uA620-\\uA629\\uA6E6-\\uA6EF\\uA830-\\uA835\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\n// const pN = `[${_pN}]`\r\n\r\nconst _pNd = '\\u0030-\\u0039\\u0660-\\u0669\\u06F0-\\u06F9\\u07C0-\\u07C9\\u0966-\\u096F\\u09E6-\\u09EF\\u0A66-\\u0A6F\\u0AE6-\\u0AEF\\u0B66-\\u0B6F\\u0BE6-\\u0BEF\\u0C66-\\u0C6F\\u0CE6-\\u0CEF\\u0D66-\\u0D6F\\u0E50-\\u0E59\\u0ED0-\\u0ED9\\u0F20-\\u0F29\\u1040-\\u1049\\u1090-\\u1099\\u17E0-\\u17E9\\u1810-\\u1819\\u1946-\\u194F\\u19D0-\\u19D9\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1B50-\\u1B59\\u1BB0-\\u1BB9\\u1C40-\\u1C49\\u1C50-\\u1C59\\uA620-\\uA629\\uA8D0-\\uA8D9\\uA900-\\uA909\\uA9D0-\\uA9D9\\uAA50-\\uAA59\\uABF0-\\uABF9\\uFF10-\\uFF19'\r\nexport const pNd = `[${_pNd}]`\r\n\r\nexport const _pL = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC'\r\nconst pL = `[${_pL}]`\r\nconst pL_regexp = new RegExp(pL)\r\n\r\nconst _pSc = '\\u0024\\u00A2-\\u00A5\\u058F\\u060B\\u09F2\\u09F3\\u09FB\\u0AF1\\u0BF9\\u0E3F\\u17DB\\u20A0-\\u20B9\\uA838\\uFDFC\\uFE69\\uFF04\\uFFE0\\uFFE1\\uFFE5\\uFFE6'\r\nconst pSc = `[${_pSc}]`\r\nconst pSc_regexp = new RegExp(pSc)\r\n\r\nconst _pMn = '\\u0300-\\u036F\\u0483-\\u0487\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u0610-\\u061A\\u064B-\\u065F\\u0670\\u06D6-\\u06DC\\u06DF-\\u06E4\\u06E7\\u06E8\\u06EA-\\u06ED\\u0711\\u0730-\\u074A\\u07A6-\\u07B0\\u07EB-\\u07F3\\u0816-\\u0819\\u081B-\\u0823\\u0825-\\u0827\\u0829-\\u082D\\u0859-\\u085B\\u08E4-\\u08FE\\u0900-\\u0902\\u093A\\u093C\\u0941-\\u0948\\u094D\\u0951-\\u0957\\u0962\\u0963\\u0981\\u09BC\\u09C1-\\u09C4\\u09CD\\u09E2\\u09E3\\u0A01\\u0A02\\u0A3C\\u0A41\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A70\\u0A71\\u0A75\\u0A81\\u0A82\\u0ABC\\u0AC1-\\u0AC5\\u0AC7\\u0AC8\\u0ACD\\u0AE2\\u0AE3\\u0B01\\u0B3C\\u0B3F\\u0B41-\\u0B44\\u0B4D\\u0B56\\u0B62\\u0B63\\u0B82\\u0BC0\\u0BCD\\u0C3E-\\u0C40\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C62\\u0C63\\u0CBC\\u0CBF\\u0CC6\\u0CCC\\u0CCD\\u0CE2\\u0CE3\\u0D41-\\u0D44\\u0D4D\\u0D62\\u0D63\\u0DCA\\u0DD2-\\u0DD4\\u0DD6\\u0E31\\u0E34-\\u0E3A\\u0E47-\\u0E4E\\u0EB1\\u0EB4-\\u0EB9\\u0EBB\\u0EBC\\u0EC8-\\u0ECD\\u0F18\\u0F19\\u0F35\\u0F37\\u0F39\\u0F71-\\u0F7E\\u0F80-\\u0F84\\u0F86\\u0F87\\u0F8D-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u102D-\\u1030\\u1032-\\u1037\\u1039\\u103A\\u103D\\u103E\\u1058\\u1059\\u105E-\\u1060\\u1071-\\u1074\\u1082\\u1085\\u1086\\u108D\\u109D\\u135D-\\u135F\\u1712-\\u1714\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17B4\\u17B5\\u17B7-\\u17BD\\u17C6\\u17C9-\\u17D3\\u17DD\\u180B-\\u180D\\u18A9\\u1920-\\u1922\\u1927\\u1928\\u1932\\u1939-\\u193B\\u1A17\\u1A18\\u1A56\\u1A58-\\u1A5E\\u1A60\\u1A62\\u1A65-\\u1A6C\\u1A73-\\u1A7C\\u1A7F\\u1B00-\\u1B03\\u1B34\\u1B36-\\u1B3A\\u1B3C\\u1B42\\u1B6B-\\u1B73\\u1B80\\u1B81\\u1BA2-\\u1BA5\\u1BA8\\u1BA9\\u1BAB\\u1BE6\\u1BE8\\u1BE9\\u1BED\\u1BEF-\\u1BF1\\u1C2C-\\u1C33\\u1C36\\u1C37\\u1CD0-\\u1CD2\\u1CD4-\\u1CE0\\u1CE2-\\u1CE8\\u1CED\\u1CF4\\u1DC0-\\u1DE6\\u1DFC-\\u1DFF\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2CEF-\\u2CF1\\u2D7F\\u2DE0-\\u2DFF\\u302A-\\u302D\\u3099\\u309A\\uA66F\\uA674-\\uA67D\\uA69F\\uA6F0\\uA6F1\\uA802\\uA806\\uA80B\\uA825\\uA826\\uA8C4\\uA8E0-\\uA8F1\\uA926-\\uA92D\\uA947-\\uA951\\uA980-\\uA982\\uA9B3\\uA9B6-\\uA9B9\\uA9BC\\uAA29-\\uAA2E\\uAA31\\uAA32\\uAA35\\uAA36\\uAA43\\uAA4C\\uAAB0\\uAAB2-\\uAAB4\\uAAB7\\uAAB8\\uAABE\\uAABF\\uAAC1\\uAAEC\\uAAED\\uAAF6\\uABE5\\uABE8\\uABED\\uFB1E\\uFE00-\\uFE0F\\uFE20-\\uFE26'\r\nconst pMn = `[${_pMn}]`\r\nconst pMn_regexp = new RegExp(pMn)\r\n\r\nconst _InBasic_Latin = '\\u0000-\\u007F'\r\nconst _InLatin_1_Supplement = '\\u0080-\\u00FF'\r\nconst _InLatin_Extended_A = '\\u0100-\\u017F'\r\nconst _InLatin_Extended_Additional = '\\u1E00-\\u1EFF'\r\nconst _InLatin_Extended_B = '\\u0180-\\u024F'\r\nconst _InCombining_Diacritical_Marks = '\\u0300-\\u036F'\r\n\r\nconst latinLetterRegexp = new RegExp\r\n(\r\n\t'[' +\r\n\t_InBasic_Latin +\r\n\t_InLatin_1_Supplement +\r\n\t_InLatin_Extended_A +\r\n\t_InLatin_Extended_Additional +\r\n\t_InLatin_Extended_B +\r\n\t_InCombining_Diacritical_Marks +\r\n\t']'\r\n)\r\n\r\n/**\r\n * Helper method to determine if a character is a Latin-script letter or not.\r\n * For our purposes, combining marks should also return true since we assume\r\n * they have been added to a preceding Latin character.\r\n */\r\nexport function isLatinLetter(letter)\r\n{\r\n\t// Combining marks are a subset of non-spacing-mark.\r\n\tif (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\treturn latinLetterRegexp.test(letter)\r\n}\r\n\r\nexport function isInvalidPunctuationSymbol(character)\r\n{\r\n\treturn character === '%' || pSc_regexp.test(character)\r\n}","import isValidNumber from '../validate_'\r\nimport parseDigits from '../parseDigits'\r\n\r\nimport {\r\n\tstartsWith,\r\n\tendsWith\r\n} from './util'\r\n\r\n/**\r\n * Leniency when finding potential phone numbers in text segments\r\n * The levels here are ordered in increasing strictness.\r\n */\r\nexport default\r\n{\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\", but not necessarily \"valid\".\r\n\t */\r\n\tPOSSIBLE(number, candidate, metadata)\r\n\t{\r\n\t\treturn true\r\n\t},\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"possible\" and \"valid\".\r\n\t * Numbers written in national format must have their national-prefix\r\n\t * present if it is usually written for a number of this type.\r\n\t */\r\n\tVALID(number, candidate, metadata)\r\n\t{\r\n\t\tif (!isValidNumber(number, undefined, metadata) ||\r\n\t\t\t!containsOnlyValidXChars(number, candidate.toString(), metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n    // Skipped for simplicity.\r\n\t\t// return isNationalPrefixPresentIfRequired(number, metadata)\r\n    return true\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are \"valid\" and\r\n\t * are grouped in a possible way for this locale. For example, a US number written as\r\n\t * \"65 02 53 00 00\" and \"650253 0000\" are not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\", \"650 2530000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol in the national significant number\r\n\t * are also dropped at this level.\r\n\t *\r\n\t * Warning: This level might result in lower coverage especially for regions outside of\r\n\t * country code \"+1\". If you are not sure about which level to use,\r\n\t * email the discussion group libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tSTRICT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsRemainGrouped,\r\n\t\t\tregExpCache\r\n\t\t)\r\n  },\r\n\r\n\t/**\r\n\t * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and\r\n\t * are grouped in the same way that we would have formatted it, or as a single block. For\r\n\t * example, a US number written as \"650 2530000\" is not accepted at this leniency level, whereas\r\n\t * \"650 253 0000\" or \"6502530000\" are.\r\n\t * Numbers with more than one '/' symbol are also dropped at this level.\r\n\t * <p>\r\n\t * Warning: This level might result in lower coverage especially for regions outside of country\r\n\t * code \"+1\". If you are not sure about which level to use, email the discussion group\r\n\t * libphonenumber-discuss@googlegroups.com.\r\n\t */\r\n\tEXACT_GROUPING(number, candidate, metadata, regExpCache)\r\n\t{\r\n\t\tconst candidateString = candidate.toString()\r\n\r\n\t\tif (!isValidNumber(number, undefined, metadata)\r\n\t\t\t|| !containsOnlyValidXChars(number, candidateString, metadata)\r\n\t\t\t|| containsMoreThanOneSlashInNationalNumber(number, candidateString)\r\n\t\t\t|| !isNationalPrefixPresentIfRequired(number, metadata))\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\r\n\t\treturn checkNumberGroupingIsValid\r\n\t\t(\r\n\t\t\tnumber,\r\n\t\t\tcandidate,\r\n\t\t\tmetadata,\r\n\t\t\tallNumberGroupsAreExactlyPresent,\r\n\t\t\tregExpCache\r\n\t\t)\r\n\t}\r\n}\r\n\r\nfunction containsOnlyValidXChars(number, candidate, metadata)\r\n{\r\n  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the\r\n  // national significant number or (2) an extension sign, in which case they always precede the\r\n  // extension number. We assume a carrier code is more than 1 digit, so the first case has to\r\n  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'\r\n  // or 'X'. We ignore the character if it appears as the last character of the string.\r\n  for (let index = 0; index < candidate.length - 1; index++)\r\n  {\r\n    const charAtIndex = candidate.charAt(index)\r\n\r\n    if (charAtIndex === 'x' || charAtIndex === 'X')\r\n    {\r\n      const charAtNextIndex = candidate.charAt(index + 1)\r\n\r\n      if (charAtNextIndex === 'x' || charAtNextIndex === 'X')\r\n      {\r\n        // This is the carrier code case, in which the 'X's always precede the national\r\n        // significant number.\r\n        index++\r\n        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH)\r\n        {\r\n          return false\r\n        }\r\n\t      // This is the extension sign case, in which the 'x' or 'X' should always precede the\r\n\t      // extension number.\r\n      }\r\n      else if (parseDigits(candidate.substring(index)) !== number.ext)\r\n      {\r\n        return false\r\n      }\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction isNationalPrefixPresentIfRequired(number, _metadata)\r\n{\r\n  // First, check how we deduced the country code. If it was written in international format, then\r\n  // the national prefix is not required.\r\n  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY')\r\n  {\r\n    return true\r\n  }\r\n\r\n  const phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n\r\n  const metadata = util.getMetadataForRegion(phoneNumberRegion)\r\n  if (metadata == null)\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Check if a national prefix should be present when formatting this number.\r\n  const nationalNumber = util.getNationalSignificantNumber(number)\r\n  const formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber)\r\n\r\n  // To do this, we check that a national prefix formatting rule was present\r\n  // and that it wasn't just the first-group symbol ($1) with punctuation.\r\n  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0)\r\n  {\r\n    if (formatRule.getNationalPrefixOptionalWhenFormatting())\r\n    {\r\n      // The national-prefix is optional in these cases, so we don't need to check if it was\r\n      // present.\r\n      return true\r\n    }\r\n\r\n    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(\r\n        formatRule.getNationalPrefixFormattingRule()))\r\n    {\r\n      // National Prefix not needed for this number.\r\n      return true\r\n    }\r\n\r\n    // Normalize the remainder.\r\n    const rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput())\r\n\r\n    // Check if we found a national prefix and/or carrier code at the start of the raw input, and\r\n    // return the result.\r\n    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null)\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nexport function containsMoreThanOneSlashInNationalNumber(number, candidate)\r\n{\r\n  const firstSlashInBodyIndex = candidate.indexOf('/')\r\n  if (firstSlashInBodyIndex < 0)\r\n  {\r\n    // No slashes, this is okay.\r\n    return false\r\n  }\r\n\r\n  // Now look for a second one.\r\n  const secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1)\r\n  if (secondSlashInBodyIndex < 0)\r\n  {\r\n    // Only one slash, this is okay.\r\n    return false\r\n  }\r\n\r\n  // If the first slash is after the country calling code, this is permitted.\r\n  const candidateHasCountryCode =\r\n      (number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN\r\n       || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN)\r\n\r\n  if (candidateHasCountryCode\r\n      && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex))\r\n          === String(number.getCountryCode()))\r\n  {\r\n    // Any more slashes and this is illegal.\r\n    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0\r\n  }\r\n\r\n  return true\r\n}\r\n\r\nfunction checkNumberGroupingIsValid(\r\n  number,\r\n  candidate,\r\n  metadata,\r\n  checkGroups,\r\n  regExpCache\r\n) {\r\n  const normalizedCandidate = normalizeDigits(candidate, true /* keep non-digits */)\r\n  let formattedNumberGroups = getNationalNumberGroups(metadata, number, null)\r\n  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n    return true\r\n  }\r\n\r\n  // If this didn't pass, see if there are any alternate formats that match, and try them instead.\r\n  const alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode())\r\n  const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n\r\n  if (alternateFormats) {\r\n    for (const alternateFormat of alternateFormats.numberFormats()) {\r\n      if (alternateFormat.leadingDigitsPatterns().length > 0) {\r\n        // There is only one leading digits pattern for alternate formats.\r\n        const leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0])\r\n        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {\r\n          // Leading digits don't match; try another one.\r\n          continue\r\n        }\r\n      }\r\n      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat)\r\n      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {\r\n        return true\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Helper method to get the national-number part of a number, formatted without any national\r\n * prefix, and return it as a set of digit blocks that would be formatted together following\r\n * standard formatting rules.\r\n */\r\nfunction getNationalNumberGroups(\r\n\tmetadata,\r\n\tnumber,\r\n\tformattingPattern\r\n) {\r\n  if (formattingPattern) {\r\n    // We format the NSN only, and split that according to the separator.\r\n    const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n    return util.formatNsnUsingPattern(nationalSignificantNumber,\r\n                                      formattingPattern, 'RFC3966', metadata).split('-')\r\n\t}\r\n\r\n  // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.\r\n  const rfc3966Format = formatNumber(number, 'RFC3966', metadata)\r\n\r\n  // We remove the extension part from the formatted string before splitting it into different\r\n  // groups.\r\n  let endIndex = rfc3966Format.indexOf(';')\r\n  if (endIndex < 0) {\r\n    endIndex = rfc3966Format.length\r\n  }\r\n\r\n  // The country-code will have a '-' following it.\r\n  const startIndex = rfc3966Format.indexOf('-') + 1\r\n  return rfc3966Format.slice(startIndex, endIndex).split('-')\r\n}\r\n\r\nfunction allNumberGroupsAreExactlyPresent\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  const candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN)\r\n\r\n  // Set this to the last group, skipping it if the number has an extension.\r\n  let candidateNumberGroupIndex =\r\n      number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1\r\n\r\n  // First we check if the national significant number is formatted as a block.\r\n  // We use contains and not equals, since the national significant number may be present with\r\n  // a prefix such as a national number prefix, or the country code itself.\r\n  if (candidateGroups.length == 1\r\n      || candidateGroups[candidateNumberGroupIndex].contains(\r\n          util.getNationalSignificantNumber(number)))\r\n  {\r\n    return true\r\n  }\r\n\r\n  // Starting from the end, go through in reverse, excluding the first group, and check the\r\n  // candidate and number groups are the same.\r\n  let formattedNumberGroupIndex = (formattedNumberGroups.length - 1)\r\n  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0)\r\n  {\r\n    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex])\r\n    {\r\n      return false\r\n    }\r\n    formattedNumberGroupIndex--\r\n    candidateNumberGroupIndex--\r\n  }\r\n\r\n  // Now check the first group. There may be a national prefix at the start, so we only check\r\n  // that the candidate group ends with the formatted number group.\r\n  return (candidateNumberGroupIndex >= 0\r\n      && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]))\r\n}\r\n\r\n\r\nfunction allNumberGroupsRemainGrouped\r\n(\r\n\tmetadata,\r\n\tnumber,\r\n\tnormalizedCandidate,\r\n\tformattedNumberGroups\r\n)\r\n{\r\n  let fromIndex = 0\r\n  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY)\r\n  {\r\n    // First skip the country code if the normalized candidate contained it.\r\n    const countryCode = String(number.getCountryCode())\r\n    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length()\r\n  }\r\n\r\n  // Check each group of consecutive digits are not broken into separate groupings in the\r\n  // {@code normalizedCandidate} string.\r\n  for (let i = 0; i < formattedNumberGroups.length; i++)\r\n  {\r\n    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}\r\n    // doesn't contain the consecutive digits in formattedNumberGroups[i].\r\n    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex)\r\n    if (fromIndex < 0) {\r\n      return false\r\n    }\r\n    // Moves {@code fromIndex} forward.\r\n    fromIndex += formattedNumberGroups[i].length()\r\n    if (i == 0 && fromIndex < normalizedCandidate.length())\r\n    {\r\n      // We are at the position right after the NDC. We get the region used for formatting\r\n      // information based on the country code in the phone number, rather than the number itself,\r\n      // as we do not need to distinguish between different countries with the same country\r\n      // calling code and this is faster.\r\n      const region = util.getRegionCodeForCountryCode(number.getCountryCode())\r\n      if (util.getNddPrefixForRegion(region, true) != null\r\n          && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {\r\n        // This means there is no formatting symbol after the NDC. In this case, we only\r\n        // accept the number if there is no formatting symbol at all in the number, except\r\n        // for extensions. This is only important for countries with national prefixes.\r\n        const nationalSignificantNumber = util.getNationalSignificantNumber(number)\r\n        return startsWith\r\n        (\r\n      \t  normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length),\r\n           nationalSignificantNumber\r\n        )\r\n      }\r\n    }\r\n  }\r\n\r\n  // The check here makes sure that we haven't mistakenly already used the extension to\r\n  // match the last group of the subscriber number. Note the extension cannot have\r\n  // formatting in-between digits.\r\n  return normalizedCandidate.slice(fromIndex).contains(number.getExtension())\r\n}","import { trimAfterFirstMatch } from './util'\r\n\r\n// Regular expression of characters typically used to start a second phone number for the purposes\r\n// of parsing. This allows us to strip off parts of the number that are actually the start of\r\n// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this\r\n// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second\r\n// extension so that the first number is parsed correctly.\r\n//\r\n// Matches a slash (\\ or /) followed by a space followed by an `x`.\r\n//\r\nconst SECOND_NUMBER_START_PATTERN = /[\\\\/] *x/\r\n\r\nexport default function parsePreCandidate(candidate)\r\n{\r\n\t// Check for extra numbers at the end.\r\n\t// TODO: This is the place to start when trying to support extraction of multiple phone number\r\n\t// from split notations (+41 79 123 45 67 / 68).\r\n\treturn trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate)\r\n}","// Matches strings that look like dates using \"/\" as a separator.\r\n// Examples: 3/10/2011, 31/10/96 or 08/31/95.\r\nconst SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\\d\\/[01]?\\d)|(?:[01]?\\d\\/[0-3]?\\d))\\/(?:[12]\\d)?\\d{2}/\r\n\r\n// Matches timestamps.\r\n// Examples: \"2012-01-02 08:00\".\r\n// Note that the reg-ex does not include the\r\n// trailing \":\\d\\d\" -- that is covered by TIME_STAMPS_SUFFIX.\r\nconst TIME_STAMPS = /[12]\\d{3}[-/]?[01]\\d[-/]?[0-3]\\d +[0-2]\\d$/\r\nconst TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\\d/\r\n\r\nexport default function isValidPreCandidate(candidate, offset, text)\r\n{\r\n\t// Skip a match that is more likely to be a date.\r\n\tif (SLASH_SEPARATED_DATES.test(candidate)) {\r\n\t\treturn false\r\n\t}\r\n\r\n\t// Skip potential time-stamps.\r\n\tif (TIME_STAMPS.test(candidate))\r\n\t{\r\n\t\tconst followingText = text.slice(offset + candidate.length)\r\n\t\tif (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","// Copy-pasted from `PhoneNumberMatcher.js`.\r\n\r\nimport { PLUS_CHARS } from '../constants'\r\nimport { limit } from './util'\r\n\r\nimport {\r\n\tisLatinLetter,\r\n\tisInvalidPunctuationSymbol\r\n} from './utf-8'\r\n\r\nconst OPENING_PARENS = '(\\\\[\\uFF08\\uFF3B'\r\nconst CLOSING_PARENS = ')\\\\]\\uFF09\\uFF3D'\r\nconst NON_PARENS = `[^${OPENING_PARENS}${CLOSING_PARENS}]`\r\n\r\nexport const LEAD_CLASS = `[${OPENING_PARENS}${PLUS_CHARS}]`\r\n\r\n// Punctuation that may be at the start of a phone number - brackets and plus signs.\r\nconst LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS)\r\n\r\n// Limit on the number of pairs of brackets in a phone number.\r\nconst BRACKET_PAIR_LIMIT = limit(0, 3)\r\n\r\n/**\r\n * Pattern to check that brackets match. Opening brackets should be closed within a phone number.\r\n * This also checks that there is something inside the brackets. Having no brackets at all is also\r\n * fine.\r\n *\r\n * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's\r\n * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a\r\n * closing bracket first. We limit the sets of brackets in a phone number to four.\r\n */\r\nconst MATCHING_BRACKETS_ENTIRE = new RegExp\r\n(\r\n\t'^'\r\n\t+ \"(?:[\" + OPENING_PARENS + \"])?\" + \"(?:\" + NON_PARENS + \"+\" + \"[\" + CLOSING_PARENS + \"])?\"\r\n\t+ NON_PARENS + \"+\"\r\n\t+ \"(?:[\" + OPENING_PARENS + \"]\" + NON_PARENS + \"+[\" + CLOSING_PARENS + \"])\" + BRACKET_PAIR_LIMIT\r\n\t+ NON_PARENS + \"*\"\r\n\t+ '$'\r\n)\r\n\r\n/**\r\n * Matches strings that look like publication pages. Example:\r\n * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.\r\n * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>\r\n *\r\n * The string \"211-227 (2003)\" is not a telephone number.\r\n */\r\nconst PUB_PAGES = /\\d{1,5}-+\\d{1,5}\\s{0,4}\\(\\d{1,4}/\r\n\r\nexport default function isValidCandidate(candidate, offset, text, leniency)\r\n{\r\n\t// Check the candidate doesn't contain any formatting\r\n\t// which would indicate that it really isn't a phone number.\r\n\tif (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {\r\n\t\treturn\r\n\t}\r\n\r\n\t// If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded\r\n\t// by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.\r\n\tif (leniency !== 'POSSIBLE')\r\n\t{\r\n\t\t// If the candidate is not at the start of the text,\r\n\t\t// and does not start with phone-number punctuation,\r\n\t\t// check the previous character.\r\n\t\tif (offset > 0 && !LEAD_CLASS_LEADING.test(candidate))\r\n\t\t{\r\n\t\t\tconst previousChar = text[offset - 1]\r\n\t\t\t// We return null if it is a latin letter or an invalid punctuation symbol.\r\n\t\t\tif (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tconst lastCharIndex = offset + candidate.length\r\n\t\tif (lastCharIndex < text.length)\r\n\t\t{\r\n\t\t\tconst nextChar = text[lastCharIndex]\r\n\t\t\tif (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}","/**\r\n * A port of Google's `PhoneNumberMatcher.java`.\r\n * https://github.com/googlei18n/libphonenumber/blob/master/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberMatcher.java\r\n * Date: 08.03.2018.\r\n */\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n  MAX_LENGTH_FOR_NSN,\r\n  MAX_LENGTH_COUNTRY_CODE,\r\n  VALID_PUNCTUATION\r\n} from './constants'\r\n\r\nimport { EXTN_PATTERNS_FOR_MATCHING } from './extension'\r\n\r\nimport RegExpCache from './findNumbers/RegExpCache'\r\n\r\nimport {\r\n\tlimit,\r\n\ttrimAfterFirstMatch\r\n} from './findNumbers/util'\r\n\r\nimport {\r\n\t_pL,\r\n\t_pN,\r\n\tpZ,\r\n\tPZ,\r\n\tpNd\r\n} from './findNumbers/utf-8'\r\n\r\nimport Leniency from './findNumbers/Leniency'\r\nimport parsePreCandidate from './findNumbers/parsePreCandidate'\r\nimport isValidPreCandidate from './findNumbers/isValidPreCandidate'\r\nimport isValidCandidate, { LEAD_CLASS } from './findNumbers/isValidCandidate'\r\n\r\nimport { isSupportedCountry } from './metadata'\r\n\r\nimport parseNumber from './parse_'\r\n\r\n/**\r\n * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are\r\n * ordered according to specificity. For example, white-space is last since that is frequently\r\n * used in numbers, not just to separate two numbers. We have separate patterns since we don't\r\n * want to break up the phone-number-like text on more than one different kind of symbol at one\r\n * time, although symbols of the same type (e.g. space) can be safely grouped together.\r\n *\r\n * Note that if there is a match, we will always check any text found up to the first match as\r\n * well.\r\n */\r\nconst INNER_MATCHES =\r\n[\r\n\t// Breaks on the slash - e.g. \"651-234-2345/332-445-1234\"\r\n\t'\\\\/+(.*)/',\r\n\r\n\t// Note that the bracket here is inside the capturing group, since we consider it part of the\r\n\t// phone number. Will match a pattern like \"(650) 223 3345 (754) 223 3321\".\r\n\t'(\\\\([^(]*)',\r\n\r\n\t// Breaks on a hyphen - e.g. \"12345 - 332-445-1234 is my number.\"\r\n\t// We require a space on either side of the hyphen for it to be considered a separator.\r\n\t`(?:${pZ}-|-${pZ})${pZ}*(.+)`,\r\n\r\n\t// Various types of wide hyphens. Note we have decided not to enforce a space here, since it's\r\n\t// possible that it's supposed to be used to break two numbers without spaces, and we haven't\r\n\t// seen many instances of it used within a number.\r\n\t`[\\u2012-\\u2015\\uFF0D]${pZ}*(.+)`,\r\n\r\n\t// Breaks on a full stop - e.g. \"12345. 332-445-1234 is my number.\"\r\n\t`\\\\.+${pZ}*([^.]+)`,\r\n\r\n\t// Breaks on space - e.g. \"3324451234 8002341234\"\r\n\t`${pZ}+(${PZ}+)`\r\n]\r\n\r\n// Limit on the number of leading (plus) characters.\r\nconst leadLimit = limit(0, 2)\r\n\r\n// Limit on the number of consecutive punctuation characters.\r\nconst punctuationLimit = limit(0, 4)\r\n\r\n/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a\r\n * single block, set high enough to accommodate the entire national number and the international\r\n * country code. */\r\nconst digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE\r\n\r\n// Limit on the number of blocks separated by punctuation.\r\n// Uses digitBlockLimit since some formats use spaces to separate each digit.\r\nconst blockLimit = limit(0, digitBlockLimit)\r\n\r\n/* A punctuation sequence allowing white space. */\r\nconst punctuation = `[${VALID_PUNCTUATION}]` + punctuationLimit\r\n\r\n// A digits block without punctuation.\r\nconst digitSequence = pNd + limit(1, digitBlockLimit)\r\n\r\n/**\r\n * Phone number pattern allowing optional punctuation.\r\n * The phone number pattern used by `find()`, similar to\r\n * VALID_PHONE_NUMBER, but with the following differences:\r\n * <ul>\r\n *   <li>All captures are limited in order to place an upper bound to the text matched by the\r\n *       pattern.\r\n * <ul>\r\n *   <li>Leading punctuation / plus signs are limited.\r\n *   <li>Consecutive occurrences of punctuation are limited.\r\n *   <li>Number of digits is limited.\r\n * </ul>\r\n *   <li>No whitespace is allowed at the start or end.\r\n *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.\r\n * </ul>\r\n */\r\nconst PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit\r\n\t+ digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit\r\n\t+ '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'\r\n\r\n// Regular expression of trailing characters that we want to remove.\r\n// We remove all characters that are not alpha or numerical characters.\r\n// The hash character is retained here, as it may signify\r\n// the previous block was an extension.\r\n//\r\n// // Don't know what does '&&' mean here.\r\n// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\\\P{N}&&\\\\P{L}]&&[^#]]+$`)\r\n//\r\nconst UNWANTED_END_CHAR_PATTERN = new RegExp(`[^${_pN}${_pL}#]+$`)\r\n\r\nconst NON_DIGITS_PATTERN = /(\\D+)/\r\n\r\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1\r\n\r\n/**\r\n * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.\r\n * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in\r\n * {@link PhoneNumberUtil}.\r\n *\r\n * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are\r\n * not found.\r\n *\r\n * <p>This class is not thread-safe.\r\n */\r\nexport default class PhoneNumberMatcher\r\n{\r\n  /** The iteration tristate. */\r\n  state = 'NOT_READY'\r\n\r\n  /** The next index to start searching at. Undefined in {@link State#DONE}. */\r\n  searchIndex = 0\r\n\r\n  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3\r\n  // countries being used for the same doc with ~10 patterns for each country. Some pages will have\r\n  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for\r\n  // that use-case won't have a lot of benefit.\r\n  regExpCache = new RegExpCache(32)\r\n\r\n  /**\r\n   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a\r\n   * new instance.\r\n   *\r\n   * @param util  the phone number util to use\r\n   * @param text  the character sequence that we will search, null for no text\r\n   * @param country  the country to assume for phone numbers not written in international format\r\n   *     (with a leading plus, or with the international dialing prefix of the specified region).\r\n   *     May be null or \"ZZ\" if only numbers with a leading plus should be\r\n   *     considered.\r\n   * @param leniency  the leniency to use when evaluating candidate phone numbers\r\n   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.\r\n   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must\r\n   *     be {@code >= 0}.\r\n   */\r\n  constructor(text = '', options = {}, metadata)\r\n  {\r\n    options = {\r\n      ...options,\r\n      defaultCallingCode: options.defaultCallingCode,\r\n      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,\r\n      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',\r\n      maxTries: options.maxTries || MAX_SAFE_INTEGER\r\n    }\r\n\r\n\t\tif (!options.leniency) {\r\n\t\t\tthrow new TypeError('`Leniency` not supplied')\r\n\t\t}\r\n\r\n\t\tif (options.maxTries < 0) {\r\n\t\t\tthrow new TypeError('`maxTries` not supplied')\r\n\t\t}\r\n\r\n\t\tthis.text = text\r\n\t\tthis.options = options\r\n    this.metadata = metadata\r\n\r\n\t\t/** The degree of validation requested. */\r\n\t\tthis.leniency = Leniency[options.leniency]\r\n\r\n\t\tif (!this.leniency) {\r\n\t\t\tthrow new TypeError(`Unknown leniency: ${options.leniency}.`)\r\n\t\t}\r\n\r\n\t\t/** The maximum number of retries after matching an invalid number. */\r\n\t\tthis.maxTries = options.maxTries\r\n\r\n\t\tthis.PATTERN = new RegExp(PATTERN, 'ig')\r\n  }\r\n\r\n  /**\r\n   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}\r\n   * that represents a phone number. Returns the next match, null if none was found.\r\n   *\r\n   * @param index  the search index to start searching at\r\n   * @return  the phone number match found, null if none can be found\r\n   */\r\n\tfind() // (index)\r\n\t{\r\n\t\t// // Reset the regular expression.\r\n\t\t// this.PATTERN.lastIndex = index\r\n\r\n\t\tlet matches\r\n\t\twhile ((this.maxTries > 0) && (matches = this.PATTERN.exec(this.text)) !== null)\r\n\t\t{\r\n\t\t\tlet candidate = matches[0]\r\n\t\t\tconst offset = matches.index\r\n\r\n\t\t\tcandidate = parsePreCandidate(candidate)\r\n\r\n\t\t\tif (isValidPreCandidate(candidate, offset, this.text))\r\n\t\t\t{\r\n\t\t\t\tconst match =\r\n\t\t\t\t\t// Try to come up with a valid match given the entire candidate.\r\n\t\t\t\t\tthis.parseAndVerify(candidate, offset, this.text)\r\n\t\t\t\t\t// If that failed, try to find an \"inner match\" -\r\n\t\t\t\t\t// there might be a phone number within this candidate.\r\n\t\t\t\t\t|| this.extractInnerMatch(candidate, offset, this.text)\r\n\r\n\t\t\t\tif (match) {\r\n\t\t\t\t\tif (this.options.v2) {\r\n\t\t\t\t\t\tconst phoneNumber = new PhoneNumber(\r\n              match.country || match.countryCallingCode,\r\n              match.phone,\r\n              this.metadata\r\n            )\r\n\t\t\t\t\t\tif (match.ext) {\r\n\t\t\t\t\t\t\tphoneNumber.ext = match.ext\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tstartsAt: match.startsAt,\r\n\t\t\t\t\t\t\tendsAt: match.endsAt,\r\n\t\t\t\t\t\t\tnumber: phoneNumber\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn match\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.maxTries--\r\n\t\t}\r\n\t}\r\n\r\n  /**\r\n   * Attempts to extract a match from `candidate`\r\n   * if the whole candidate does not qualify as a match.\r\n   */\r\n  extractInnerMatch(candidate, offset, text)\r\n  {\r\n    for (const innerMatchPattern of INNER_MATCHES)\r\n    {\r\n      let isFirstMatch = true\r\n      let matches\r\n      const possibleInnerMatch = new RegExp(innerMatchPattern, 'g')\r\n      while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0)\r\n      {\r\n        if (isFirstMatch)\r\n        {\r\n          // We should handle any group before this one too.\r\n          const group = trimAfterFirstMatch\r\n          (\r\n            UNWANTED_END_CHAR_PATTERN,\r\n            candidate.slice(0, matches.index)\r\n          )\r\n\r\n          const match = this.parseAndVerify(group, offset, text)\r\n          if (match) {\r\n            return match\r\n          }\r\n\r\n          this.maxTries--\r\n          isFirstMatch = false\r\n        }\r\n\r\n        const group = trimAfterFirstMatch\r\n        (\r\n        \tUNWANTED_END_CHAR_PATTERN,\r\n        \tmatches[1]\r\n        )\r\n\r\n        // Java code does `groupMatcher.start(1)` here,\r\n        // but there's no way in javascript to get a group match start index,\r\n        // therefore using the overall match start index `matches.index`.\r\n        const match = this.parseAndVerify(group, offset + matches.index, text)\r\n        if (match) {\r\n          return match\r\n        }\r\n\r\n        this.maxTries--\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parses a phone number from the `candidate` using `parseNumber` and\r\n   * verifies it matches the requested `leniency`. If parsing and verification succeed,\r\n   * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.\r\n   *\r\n   * @param candidate  the candidate match\r\n   * @param offset  the offset of {@code candidate} within {@link #text}\r\n   * @return  the parsed and validated phone number match, or null\r\n   */\r\n  parseAndVerify(candidate, offset, text)\r\n  {\r\n    if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {\r\n      return\r\n  \t}\r\n\r\n    const number = parseNumber(\r\n      candidate, {\r\n        extended: true,\r\n        defaultCountry: this.options.defaultCountry,\r\n        defaultCallingCode: this.options.defaultCallingCode\r\n      },\r\n      this.metadata\r\n    )\r\n\r\n    if (!number.possible) {\r\n      return\r\n    }\r\n\r\n    if (this.leniency(number, candidate, this.metadata, this.regExpCache))\r\n    {\r\n      // // We used parseAndKeepRawInput to create this number,\r\n      // // but for now we don't return the extra values parsed.\r\n      // // TODO: stop clearing all values here and switch all users over\r\n      // // to using rawInput() rather than the rawString() of PhoneNumberMatch.\r\n      // number.clearCountryCodeSource()\r\n      // number.clearRawInput()\r\n      // number.clearPreferredDomesticCarrierCode()\r\n\r\n      const result = {\r\n        startsAt: offset,\r\n        endsAt: offset + candidate.length,\r\n        phone: number.phone\r\n      }\r\n\r\n      if (number.country && number.country !== '001') {\r\n        result.country = number.country\r\n      } else {\r\n        result.countryCallingCode = number.countryCallingCode\r\n      }\r\n\r\n      if (number.ext) {\r\n        result.ext = number.ext\r\n      }\r\n\r\n      return result\r\n    }\r\n  }\r\n\r\n  hasNext()\r\n  {\r\n    if (this.state === 'NOT_READY')\r\n    {\r\n      this.lastMatch = this.find() // (this.searchIndex)\r\n\r\n      if (this.lastMatch)\r\n      {\r\n        // this.searchIndex = this.lastMatch.endsAt\r\n        this.state = 'READY'\r\n      }\r\n      else\r\n      {\r\n        this.state = 'DONE'\r\n      }\r\n    }\r\n\r\n    return this.state === 'READY'\r\n  }\r\n\r\n  next()\r\n  {\r\n    // Check the state and find the next match as a side-effect if necessary.\r\n    if (!this.hasNext())\r\n    {\r\n      throw new Error('No next element')\r\n    }\r\n\r\n    // Don't retain that memory any longer than necessary.\r\n    const result = this.lastMatch\r\n    this.lastMatch = null\r\n    this.state = 'NOT_READY'\r\n    return result\r\n  }\r\n}","import _findNumbers from './findNumbers_'\r\nimport { normalizeArguments } from './parsePhoneNumber'\r\n\r\nexport default function findNumbers() {\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\treturn _findNumbers(text, options, metadata)\r\n}","import PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\nexport default function findNumbers(text, options, metadata) {\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\tconst results = []\r\n\twhile (matcher.hasNext()) {\r\n\t\tresults.push(matcher.next())\r\n\t}\r\n\treturn results\r\n}","import { normalizeArguments } from './parsePhoneNumber'\r\nimport PhoneNumberMatcher from './PhoneNumberMatcher'\r\n\r\n/**\r\n * @return ES6 `for ... of` iterator.\r\n */\r\nexport default function searchNumbers()\r\n{\r\n\tconst { text, options, metadata } = normalizeArguments(arguments)\r\n\r\n\tconst matcher = new PhoneNumberMatcher(text, options, metadata)\r\n\r\n\treturn  {\r\n\t\t[Symbol.iterator]() {\r\n\t\t\treturn {\r\n\t    \t\tnext: () => {\r\n\t    \t\t\tif (matcher.hasNext()) {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tdone: false,\r\n\t\t\t\t\t\t\tvalue: matcher.next()\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tdone: true\r\n\t\t\t\t\t}\r\n\t    \t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import findNumbers from './findNumbers'\r\n\r\nexport default function findPhoneNumbersInText(text, defaultCountry, options, metadata) {\r\n\tconst args = getArguments(defaultCountry, options, metadata)\r\n\treturn findNumbers(text, args.options, args.metadata)\r\n}\r\n\r\nexport function getArguments(defaultCountry, options, metadata) {\r\n\tif (metadata) {\r\n\t\tif (defaultCountry) {\r\n\t\t\toptions = {\r\n\t\t\t\t...options,\r\n\t\t\t\tdefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t} else {\r\n\t\tif (options) {\r\n\t\t\tmetadata = options\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (is_object(defaultCountry)) {\r\n\t\t\t\t\toptions = defaultCountry\r\n\t\t\t\t} else {\r\n\t\t\t\t\toptions = { defaultCountry }\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\toptions = undefined\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tmetadata = defaultCountry\r\n\t\t\toptions = undefined\r\n\t\t}\r\n\t}\r\n\treturn {\r\n\t\toptions: {\r\n\t\t\t...options,\r\n\t\t\tv2: true\r\n\t\t},\r\n\t\tmetadata\r\n\t}\r\n}\r\n\r\n// Babel transforms `typeof` into some \"branches\"\r\n// so istanbul will show this as \"branch not covered\".\r\n/* istanbul ignore next */\r\nconst is_object = _ => typeof _ === 'object'","import searchNumbers from './searchNumbers'\r\nimport { getArguments } from './findPhoneNumbersInText'\r\n\r\nexport default function searchPhoneNumbersInText(text, defaultCountry, options, metadata) {\r\n\tconst args = getArguments(defaultCountry, options, metadata)\r\n\treturn searchNumbers(text, args.options, args.metadata)\r\n}","// This is an enhanced port of Google Android `libphonenumber`'s\r\n// `asyoutypeformatter.js` of December 31th, 2018.\r\n//\r\n// https://github.com/googlei18n/libphonenumber/blob/8d21a365061de2ba0675c878a710a7b24f74d2ae/javascript/i18n/phonenumbers/asyoutypeformatter.js\r\n//\r\n// Simplified: does not differentiate between \"local-only\" numbers\r\n// and \"internationally dialable\" numbers.\r\n// For example, doesn't include changes like this:\r\n// https://github.com/googlei18n/libphonenumber/commit/865da605da12b01053c4f053310bac7c5fbb7935\r\n\r\nimport Metadata from './metadata'\r\n\r\nimport PhoneNumber from './PhoneNumber'\r\n\r\nimport {\r\n\tVALID_DIGITS,\r\n\tVALID_PUNCTUATION,\r\n\tPLUS_CHARS\r\n} from './constants'\r\n\r\nimport { matchesEntirely } from './util'\r\n\r\nimport {\r\n\textractCountryCallingCode,\r\n\textractFormattedPhoneNumber,\r\n\tfindCountryCode,\r\n\tstripNationalPrefixAndCarrierCode\r\n} from './parse_'\r\n\r\nimport {\r\n\tFIRST_GROUP_PATTERN,\r\n\tformatNationalNumberUsingFormat,\r\n\tapplyInternationalSeparatorStyle\r\n} from './format_'\r\n\r\nimport { checkNumberLengthForType } from './getNumberType_'\r\n\r\nimport parseDigits from './parseDigits'\r\n\r\n// Used in phone number format template creation.\r\n// Could be any digit, I guess.\r\nconst DUMMY_DIGIT = '9'\r\n// I don't know why is it exactly `15`\r\nconst LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15\r\n// Create a phone number consisting only of the digit 9 that matches the\r\n// `number_pattern` by applying the pattern to the \"longest phone number\" string.\r\nconst LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH)\r\n\r\n// The digits that have not been entered yet will be represented by a \\u2008,\r\n// the punctuation space.\r\nexport const DIGIT_PLACEHOLDER = 'x' // '\\u2008' (punctuation space)\r\nconst DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER)\r\n\r\n// A set of characters that, if found in a national prefix formatting rules, are an indicator to\r\n// us that we should separate the national prefix from the number when formatting.\r\nconst NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/\r\n\r\n// Deprecated: Google has removed some formatting pattern related code from their repo.\r\n// https://github.com/googlei18n/libphonenumber/commit/a395b4fef3caf57c4bc5f082e1152a4d2bd0ba4c\r\n// \"We no longer have numbers in formatting matching patterns, only \\d.\"\r\n// Because this library supports generating custom metadata\r\n// some users may still be using old metadata so the relevant\r\n// code seems to stay until some next major version update.\r\nconst SUPPORT_LEGACY_FORMATTING_PATTERNS = true\r\n\r\n// A pattern that is used to match character classes in regular expressions.\r\n// An example of a character class is \"[1-4]\".\r\nconst CREATE_CHARACTER_CLASS_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\[([^\\[\\]])*\\]/g)\r\n\r\n// Any digit in a regular expression that actually denotes a digit. For\r\n// example, in the regular expression \"80[0-2]\\d{6,10}\", the first 2 digits\r\n// (8 and 0) are standalone digits, but the rest are not.\r\n// Two look-aheads are needed because the number following \\\\d could be a\r\n// two-digit number, since the phone number can be as long as 15 digits.\r\nconst CREATE_STANDALONE_DIGIT_PATTERN = SUPPORT_LEGACY_FORMATTING_PATTERNS && (() => /\\d(?=[^,}][^,}])/g)\r\n\r\n// A pattern that is used to determine if a `format` is eligible\r\n// to be used by the \"as you type formatter\".\r\n// It is eligible when the `format` contains groups of the dollar sign\r\n// followed by a single digit, separated by valid phone number punctuation.\r\n// This prevents invalid punctuation (such as the star sign in Israeli star numbers)\r\n// getting into the output of the \"as you type formatter\".\r\nconst ELIGIBLE_FORMAT_PATTERN = new RegExp(\r\n\t'^' +\r\n\t'[' + VALID_PUNCTUATION + ']*' +\r\n\t'(\\\\$\\\\d[' + VALID_PUNCTUATION + ']*)+' +\r\n\t'$'\r\n)\r\n\r\n// This is the minimum length of the leading digits of a phone number\r\n// to guarantee the first \"leading digits pattern\" for a phone number format\r\n// to be preemptive.\r\nconst MIN_LEADING_DIGITS_LENGTH = 3\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART =\r\n\t'[' + PLUS_CHARS + ']{0,1}' +\r\n\t'[' +\r\n\t\tVALID_PUNCTUATION +\r\n\t\tVALID_DIGITS +\r\n\t']*'\r\n\r\nconst VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i')\r\n\r\nconst USE_NON_GEOGRAPHIC_COUNTRY_CODE = false\r\n\r\nexport default class AsYouType {\r\n\t// Not setting `options` to a constructor argument\r\n\t// not to break backwards compatibility\r\n\t// for older versions of the library.\r\n\toptions = {}\r\n\r\n\t/**\r\n\t * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.\r\n\t * @param {Object} metadata\r\n\t */\r\n\tconstructor(optionsOrDefaultCountry, metadata) {\r\n\t\tthis.metadata = new Metadata(metadata)\r\n\t\t// Set `defaultCountry` and `defaultCallingCode` options.\r\n\t\tlet defaultCountry\r\n\t\tlet defaultCallingCode\r\n\t\t// Turns out `null` also has type \"object\". Weird.\r\n\t\tif (optionsOrDefaultCountry) {\r\n\t\t\tif (typeof optionsOrDefaultCountry === 'object') {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry.defaultCountry\r\n\t\t\t\tdefaultCallingCode = optionsOrDefaultCountry.defaultCallingCode\r\n\t\t\t} else {\r\n\t\t\t\tdefaultCountry = optionsOrDefaultCountry\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (defaultCountry && this.metadata.hasCountry(defaultCountry)) {\r\n\t\t\tthis.defaultCountry = defaultCountry\r\n\t\t}\r\n\t\tif (defaultCallingCode) {\r\n\t\t\t/* istanbul ignore if */\r\n\t\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\t\tif (this.metadata.isNonGeographicCallingCode(defaultCallingCode)) {\r\n\t\t\t\t\tthis.defaultCountry = '001'\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.defaultCallingCode = defaultCallingCode\r\n\t\t}\r\n\t\t// Reset.\r\n\t\tthis.reset()\r\n\t}\r\n\r\n\treset() {\r\n\t\tthis.formattedOutput = ''\r\n\t\tthis.international = undefined\r\n\t\tthis.countryCallingCode = undefined\r\n\t\tthis.digits = ''\r\n\t\tthis.nationalNumberDigits = ''\r\n\t\tthis.nationalPrefix = ''\r\n\t\tthis.carrierCode = ''\r\n\t\tthis.setCountry(this.defaultCountry, this.defaultCallingCode)\r\n\t\tthis.resetFormat()\r\n\t\treturn this\r\n\t}\r\n\r\n\tsetCountry(country, callingCode) {\r\n\t\tthis.country = country\r\n\t\tthis.metadata.selectNumberingPlan(country, callingCode)\r\n\t\tif (this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\tthis.initializePhoneNumberFormatsForCountry()\r\n\t\t} else {\r\n\t\t\tthis.matchingFormats = []\r\n\t\t}\r\n\t}\r\n\r\n\tresetFormat() {\r\n\t\tthis.chosenFormat = undefined\r\n\t\tthis.template = undefined\r\n\t\tthis.populatedNationalNumberTemplate = undefined\r\n\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number characters.\r\n\t * @param  {string} text\r\n\t * @return {string} Formatted phone number characters that have been input so far.\r\n\t */\r\n\tinput(text) {\r\n\t\tconst formattedDigits = this.extractFormattedDigits(text)\r\n\t\t// If the extracted phone number part\r\n\t\t// can possibly be a part of some valid phone number\r\n\t\t// then parse phone number characters from a formatted phone number.\r\n\t\tif (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {\r\n\t\t\tthis.formattedOutput = this.getFullNumber(\r\n\t\t\t\tthis.inputDigits(parseDigits(formattedDigits)) ||\r\n\t\t\t\tthis.getNonFormattedNationalNumber()\r\n\t\t\t)\r\n\t\t}\r\n\t\treturn this.formattedOutput\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts formatted phone number digits from text (if there're any).\r\n\t * @param  {string} text\r\n\t * @return {string}\r\n\t */\r\n\textractFormattedDigits(text) {\r\n\t\t// Extract a formatted phone number part from text.\r\n\t\tlet extractedNumber = extractFormattedPhoneNumber(text) || ''\r\n\t\t// Special case for a lone '+' sign\r\n\t\t// because it's not extracted in such cases.\r\n\t\tif (!extractedNumber) {\r\n\t\t\tif (text && text.indexOf('+') >= 0) {\r\n\t\t\t\textractedNumber = '+'\r\n\t\t\t}\r\n\t\t}\r\n\t\t// Trim a `+`.\r\n\t\tif (extractedNumber[0] === '+') {\r\n\t\t\t// Trim the `+`.\r\n\t\t\textractedNumber = extractedNumber.slice('+'.length)\r\n\t\t\tif (this.digits) {\r\n\t\t\t\t// If an out of position `+` is detected\r\n\t\t\t\t// (or a second `+`) then just ignore it.\r\n\t\t\t} else {\r\n\t\t\t\tthis.startInternationalNumber()\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn extractedNumber\r\n\t}\r\n\r\n\tstartInternationalNumber() {\r\n\t\t// Prepend the `+` to parsed input.\r\n\t\tthis.international = true\r\n\t\t// If a default country was set then reset it\r\n\t\t// because an explicitly international phone\r\n\t\t// number is being entered.\r\n\t\tthis.setCountry()\r\n\t}\r\n\r\n\t/**\r\n\t * Inputs \"next\" phone number digits.\r\n\t * @param  {string} digits\r\n\t * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means \"don't format the national phone number at this stage\".\r\n\t */\r\n\tinputDigits(nextDigits) {\r\n\t\t// Append phone number digits.\r\n\t\tthis.digits += nextDigits\r\n\t\t// Try to format the parsed input\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (this.countryCallingCode) {\r\n\t\t\t\tthis.nationalNumberDigits += nextDigits\r\n\t\t\t\t// `this.country` could be `undefined`, for example, when there is\r\n\t\t\t\t// ambiguity in a form of several different countries,\r\n\t\t\t\t// each corresponding to the same country phone code\r\n\t\t\t\t// (e.g. NANPA: USA, Canada, etc), and there's not enough digits\r\n\t\t\t\t// to reliably determine the country the phone number belongs to.\r\n\t\t\t\t// Therefore, in cases of such ambiguity, each time something is input,\r\n\t\t\t\t// try to determine the country (if it hasn't been determined yet).\r\n\t\t\t\tif (!this.country || this.isCountryCallingCodeAmbiguous()) {\r\n\t\t\t\t\tthis.determineTheCountry()\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// Extract country calling code from the digits entered so far.\r\n\t\t\t\t// There must be some digits in order to extract anything from them.\r\n\t\t\t\tif (!this.digits) {\r\n\t\t\t\t\t// Don't format the phone number.\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t// If one looks at country phone codes\r\n\t\t\t\t// then they can notice that no one country phone code\r\n\t\t\t\t// is ever a (leftmost) substring of another country phone code.\r\n\t\t\t\t// So if a valid country code is extracted so far\r\n\t\t\t\t// then it means that this is the country code.\r\n\t\t\t\t//\r\n\t\t\t\t// If no country phone code could be extracted so far,\r\n\t\t\t\t// then don't format the phone number.\r\n\t\t\t\t//\r\n\t\t\t\tif (!this.extractCountryCallingCode()) {\r\n\t\t\t\t\t// Don't format the phone number.\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t\t// Possibly extract a national prefix.\r\n\t\t\t\t// Some people incorrectly input national prefix\r\n\t\t\t\t// in an international phone number.\r\n\t\t\t\t// For example, some people write British phone numbers as `+44(0)...`.\r\n\t\t\t\t// Also, mobile phone numbers in Mexico are supposed to be dialled\r\n\t\t\t\t// internationally using a `15` national prefix.\r\n\t\t\t\t//\r\n\t\t\t\t// https://www.mexperience.com/dialing-cell-phones-in-mexico/\r\n\t\t\t\t//\r\n\t\t\t\t// \"Dialing a Mexican cell phone from abroad\r\n\t\t\t\t// When you are calling a cell phone number in Mexico from outside Mexico,\r\n\t\t\t\t// it’s necessary to dial an additional “1” after Mexico’s country code\r\n\t\t\t\t// (which is “52”) and before the area code.\r\n\t\t\t\t// You also ignore the 045, and simply dial the area code and the\r\n\t\t\t\t// cell phone’s number.\r\n\t\t\t\t//\r\n\t\t\t\t// If you don’t add the “1”, you’ll receive a recorded announcement\r\n\t\t\t\t// asking you to redial using it.\r\n\t\t\t\t//\r\n\t\t\t\t// For example, if you are calling from the USA to a cell phone\r\n\t\t\t\t// in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.\r\n\t\t\t\t// (Note that this is different to calling a land line in Mexico City\r\n\t\t\t\t// from abroad, where the number dialed would be +52 – 55 – 1234 5678)\".\r\n\t\t\t\t//\r\n\t\t\t\tthis.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length)\r\n\t\t\t\t// this.extractNationalPrefix()\r\n\t\t\t\t//\r\n\t\t\t\t// Determine the country from country calling code and national number.\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.nationalNumberDigits += nextDigits\r\n\t\t\t// If `defaultCallingCode` is set,\r\n\t\t\t// see if the `country` could be derived.\r\n\t\t\tif (!this.country) {\r\n\t\t\t\tthis.determineTheCountry()\r\n\t\t\t}\r\n\t\t\t// Some national prefixes are substrings of other national prefixes\r\n\t\t\t// (for the same country), therefore try to extract national prefix each time\r\n\t\t\t// because a longer national prefix might be available at some point in time.\r\n\t\t\tconst previousNationalPrefix = this.nationalPrefix\r\n\t\t\tthis.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits\r\n\t\t\t// Re-extract national prefix.\r\n\t\t\tthis.extractNationalPrefix()\r\n\t\t\t// If another national prefix has been extracted.\r\n\t\t\tif (this.nationalPrefix !== previousNationalPrefix) {\r\n\t\t\t\t// National number has changed\r\n\t\t\t\t// (due to another national prefix been extracted)\r\n\t\t\t\t// therefore national number has changed\r\n\t\t\t\t// therefore reset all previous formatting data.\r\n\t\t\t\t// (and leading digits matching state)\r\n\t\t\t\tthis.initializePhoneNumberFormatsForCountry()\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (this.nationalNumberDigits) {\r\n\t\t\t// Match the available formats by the currently available leading digits.\r\n\t\t\tthis.matchFormats(this.nationalNumberDigits)\r\n\t\t}\r\n\r\n\t\t// Format the phone number (given the next digits)\r\n\t\treturn this.formatNationalNumberWithNextDigits(nextDigits)\r\n\t}\r\n\r\n\tformatNationalNumberWithNextDigits(nextDigits) {\r\n\t\t// See if the phone number digits can be formatted as a complete phone number.\r\n\t\t// If not, use the results from `formatNextNationalNumberDigits()`,\r\n\t\t// which formats based on the chosen formatting pattern.\r\n\t\t// Attempting to format complete phone number first is how it's done\r\n\t\t// in Google's `libphonenumber`.\r\n\t\tconst formattedNumber = this.attemptToFormatCompletePhoneNumber()\r\n\r\n\t\t// Just because a phone number doesn't have a suitable format\r\n\t\t// that doesn't mean that the phone number is invalid,\r\n\t\t// because phone number formats only format phone numbers,\r\n\t\t// they don't validate them and some (rare) phone numbers\r\n\t\t// are meant to stay non-formatted.\r\n\t\tif (formattedNumber) {\r\n\t\t\treturn formattedNumber\r\n\t\t}\r\n\r\n\t\t// Format the next phone number digits\r\n\t\t// using the previously chosen phone number format.\r\n\t\t//\r\n\t\t// This is done here because if `attemptToFormatCompletePhoneNumber`\r\n\t\t// was placed before this call then the `template`\r\n\t\t// wouldn't reflect the situation correctly (and would therefore be inconsistent)\r\n\t\t//\r\n\t\tconst previouslyChosenFormat = this.chosenFormat\r\n\t\t// Choose a format from the list of matching ones.\r\n\t\tconst newlyChosenFormat = this.chooseFormat()\r\n\t\tif (newlyChosenFormat) {\r\n\t\t\tif (newlyChosenFormat === previouslyChosenFormat) {\r\n\t\t\t\t// If could format the next (current) digit\r\n\t\t\t\t// using the previously chosen phone number format\r\n\t\t\t\t// then return the formatted number so far.\r\n\t\t\t\t//\r\n\t\t\t\t// If no new phone number format could be chosen,\r\n\t\t\t\t// and couldn't format the supplied national number\r\n\t\t\t\t// using the previously chosen phone number pattern,\r\n\t\t\t\t// then return `undefined`.\r\n\t\t\t\t//\r\n\t\t\t\treturn this.formatNextNationalNumberDigits(nextDigits)\r\n\t\t\t} else {\r\n\t\t\t\t// If a more appropriate phone number format\r\n\t\t\t\t// has been chosen for these \"leading digits\",\r\n\t\t\t\t// then format the national phone number (so far)\r\n\t\t\t\t// using the newly selected format.\r\n\t\t\t\t//\r\n\t\t\t\t// Will return `undefined` if it couldn't format\r\n\t\t\t\t// the supplied national number\r\n\t\t\t\t// using the selected phone number pattern.\r\n\t\t\t\t//\r\n\t\t\t\treturn this.reformatNationalNumber()\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tchooseFormat() {\r\n\t\t// When there are multiple available formats, the formatter uses the first\r\n\t\t// format where a formatting template could be created.\r\n\t\tfor (const format of this.matchingFormats) {\r\n\t\t\t// If this format is currently being used\r\n\t\t\t// and is still possible, then stick to it.\r\n\t\t\tif (this.chosenFormat === format) {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t\tif (!this.createFormattingTemplate(format)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\t// With a new formatting template, the matched position\r\n\t\t\t// using the old template needs to be reset.\r\n\t\t\tthis.populatedNationalNumberTemplatePosition = -1\r\n\t\t\tbreak\r\n\t\t}\r\n\t\tif (!this.chosenFormat) {\r\n\t\t\t// No format matches the national phone number entered.\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t\treturn this.chosenFormat\r\n\t}\r\n\r\n\t// Formats each digit of the national phone number (so far)\r\n\t// using the selected format.\r\n\treformatNationalNumber() {\r\n\t\treturn this.formatNextNationalNumberDigits(\r\n\t\t\tthis.nationalPrefix + this.nationalNumberDigits\r\n\t\t)\r\n\t}\r\n\r\n\tinitializePhoneNumberFormatsForCountry() {\r\n\t\t// Get all \"eligible\" phone number formats for this country\r\n\t\tthis.matchingFormats = this.metadata.formats().filter((format) => {\r\n\t\t\t// Compared to `libphonenumber`'s code, the two \"Discard a few formats\r\n\t\t\t// that we know are not relevant based on the presence of the national prefix\"\r\n\t\t\t// checks have changed: the first one has been moved to `.matchFormats()`,\r\n\t\t\t// and the second one doesn't apply to this library because it doesn't deal with\r\n\t\t\t// \"incomplete\" phone numbers (for example, phone numbers, entered without \"area code\").\r\n\t\t\treturn ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat())\r\n\t\t})\r\n\t}\r\n\r\n\tmatchFormats(leadingDigits) {\r\n\t\t// \"leading digits\" pattern list starts with a\r\n\t\t// \"leading digits\" pattern fitting a maximum of 3 leading digits.\r\n\t\t// So, after a user inputs 3 digits of a national (significant) phone number\r\n\t\t// this national (significant) number can already be formatted.\r\n\t\t// The next \"leading digits\" pattern is for 4 leading digits max,\r\n\t\t// and the \"leading digits\" pattern after it is for 5 leading digits max, etc.\r\n\r\n\t\t// This implementation is different from Google's\r\n\t\t// in that it searches for a fitting format\r\n\t\t// even if the user has entered less than\r\n\t\t// `MIN_LEADING_DIGITS_LENGTH` digits of a national number.\r\n\t\t// Because some leading digit patterns already match for a single first digit.\r\n\t\tlet leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH\r\n\t\tif (leadingDigitsPatternIndex < 0) {\r\n\t\t\tleadingDigitsPatternIndex = 0\r\n\t\t}\r\n\r\n\t\tthis.matchingFormats = this.matchingFormats.filter((format) => {\r\n\t\t\t// If national prefix is mandatory for this phone number format\r\n\t\t\t// and the user didn't input the national prefix\r\n\t\t\t// then this phone number format isn't suitable.\r\n\t\t\tif (!this.isInternational() && !this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\tconst leadingDigitsPatternsCount = format.leadingDigitsPatterns().length\r\n\t\t\t// If this format is not restricted to a certain\r\n\t\t\t// leading digits pattern then it fits.\r\n\t\t\tif (leadingDigitsPatternsCount === 0) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\t// Start excluding any non-matching formats only when the\r\n\t\t\t// national number entered so far is at least 3 digits long,\r\n\t\t\t// otherwise format matching would give false negatives.\r\n\t\t\t// For example, when the digits entered so far are `2`\r\n\t\t\t// and the leading digits pattern is `21` –\r\n\t\t\t// it's quite obvious in this case that the format could be the one\r\n\t\t\t// but due to the absence of further digits it would give false negative.\r\n\t\t\tif (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {\r\n\t\t\t\treturn true\r\n\t\t\t}\r\n\t\t\t// If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available\r\n\t\t\t// then format matching starts narrowing down the list of possible formats\r\n\t\t\t// (only previously matched formats are considered for next digits).\r\n\t\t\tleadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1)\r\n\t\t\tconst leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]\r\n\t\t\t// Brackets are required for `^` to be applied to\r\n\t\t\t// all or-ed (`|`) parts, not just the first one.\r\n\t\t\treturn new RegExp(`^(${leadingDigitsPattern})`).test(leadingDigits)\r\n\t\t})\r\n\r\n\t\t// If there was a phone number format chosen\r\n\t\t// and it no longer holds given the new leading digits then reset it.\r\n\t\t// The test for this `if` condition is marked as:\r\n\t\t// \"Reset a chosen format when it no longer holds given the new leading digits\".\r\n\t\t// To construct a valid test case for this one can find a country\r\n\t\t// in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`\r\n\t\t// and yielding another format for 4 `<leadingDigits>` (Australia in this case).\r\n\t\tif (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {\r\n\t\t\tthis.resetFormat()\r\n\t\t}\r\n\t}\r\n\r\n\tgetSeparatorAfterNationalPrefix(format) {\r\n\t\tif (this.metadata.countryCallingCode() === '1') {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\tif (format &&\r\n\t\t\tformat.nationalPrefixFormattingRule() &&\r\n\t\t\tNATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {\r\n\t\t\treturn ' '\r\n\t\t}\r\n\t\treturn ''\r\n\t}\r\n\r\n\t// This is in accordance to how Google's `libphonenumber` does it.\r\n\t// \"Check to see if there is an exact pattern match for these digits.\r\n\t// If so, we should use this instead of any other formatting template\r\n\t// whose `leadingDigitsPattern` also matches the input.\"\r\n\tattemptToFormatCompletePhoneNumber() {\r\n\t\tfor (const format of this.matchingFormats) {\r\n\t\t\tconst matcher = new RegExp(`^(?:${format.pattern()})$`)\r\n\t\t\tif (!matcher.test(this.nationalNumberDigits)) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\t// Here, national number is formatted without \"national prefix\r\n\t\t\t// formatting rule\", because otherwise there'd be a bug\r\n\t\t\t// when \"area code\" is \"duplicated\" during input:\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n\t\t\tlet formattedNationalNumber = formatNationalNumberUsingFormat(\r\n\t\t\t\tthis.nationalNumberDigits,\r\n\t\t\t\tformat,\r\n\t\t\t\tthis.isInternational(),\r\n\t\t\t\tfalse, // Don't prepend national prefix (it will be prepended manually).\r\n\t\t\t\tthis.metadata\r\n\t\t\t)\r\n\t\t\t// Check if this `format` preserves all digits.\r\n\t\t\t// This is how it's done in Google's `libphonenumber`.\r\n\t\t\t// Also, it fixes the bug when \"area code\" is \"duplicated\" during input:\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n\t\t\t//\r\n\t\t\t// \"Check that we didn't remove nor add any extra digits when we matched\r\n\t\t\t// this formatting pattern. This usually happens after we entered the last\r\n\t\t\t// digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when\r\n\t\t\t// formatted but AYTF should retain all the number entered and not change\r\n\t\t\t// in order to match a format (of same leading digits and length) display\r\n\t\t\t// in that way.\"\r\n\t\t\t// \"If it's the same (i.e entered number and format is same), then it's\r\n\t\t\t// safe to return this in formatted number as nothing is lost / added.\"\r\n\t\t\t// Otherwise, don't use this format.\r\n\t\t\t// https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5\r\n\t\t\t// https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b\r\n\t\t\t//\r\n\t\t\tif (parseDigits(formattedNationalNumber) !== this.nationalNumberDigits) {\r\n\t\t\t\tcontinue\r\n\t\t\t}\r\n\t\t\t// Prepend national prefix (if any).\r\n\t\t\tif (this.nationalPrefix) {\r\n\t\t\t\t// Here, national number is formatted with \"national prefix\r\n\t\t\t\t// formatting rule\". The reason is that \"national prefix\r\n\t\t\t\t// formatting rule\" often adds parentheses, and while Google's\r\n\t\t\t\t// `libphonenumber` dismisses those preferring simply prepending\r\n\t\t\t\t// national prefix followed by a \" \" character, this library\r\n\t\t\t\t// looks if the national prefix could be formatted better.\r\n\t\t\t\tconst formattedNationalNumberWithNationalPrefix = formatNationalNumberUsingFormat(\r\n\t\t\t\t\tthis.nationalNumberDigits,\r\n\t\t\t\t\tformat,\r\n\t\t\t\t\tthis.isInternational(),\r\n\t\t\t\t\ttrue, // Prepend national prefix.\r\n\t\t\t\t\tthis.metadata\r\n\t\t\t\t)\r\n\t\t\t\tif (parseDigits(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {\r\n\t\t\t\t\tformattedNationalNumber = formattedNationalNumberWithNationalPrefix\r\n\t\t\t\t} else {\r\n\t\t\t\t\tformattedNationalNumber = this.nationalPrefix +\r\n\t\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\t\tformattedNationalNumber\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// formats national number (probably) without national prefix.\r\n\t\t\t// Formatting a national number with national prefix could result in\r\n\t\t\t// bugs when \"area code\" is \"duplicated\" during input:\r\n\t\t\t// https://github.com/catamphetamine/libphonenumber-js/issues/318\r\n\t\t\t// The \"are all digits preserved\" check fixes that type of bug.\r\n\r\n\t\t\t// To leave the formatter in a consistent state\r\n\t\t\tthis.resetFormat()\r\n\t\t\tthis.chosenFormat = format\r\n\t\t\t// Set `this.template` and `this.populatedNationalNumberTemplate`.\r\n\t\t\t/* istanbul ignore else */\r\n\t\t\tif (this.createFormattingTemplate(format)) {\r\n\t\t\t\t// Populate `this.populatedNationalNumberTemplate` with phone number digits.\r\n\t\t\t\tthis.reformatNationalNumber()\r\n\t\t\t} else {\r\n\t\t\t\t// If the formatting template couldn't be created for a format,\r\n\t\t\t\t// create it manually from the formatted phone number.\r\n\t\t\t\t// This case doesn't ever happen with the current metadata.\r\n\t\t\t\tthis.template = this.getFullNumber(formattedNationalNumber).replace(/[\\d\\+]/g, DIGIT_PLACEHOLDER)\r\n\t\t\t\tthis.populatedNationalNumberTemplate = formattedNationalNumber\r\n\t\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1\r\n\t\t\t}\r\n\t\t\treturn formattedNationalNumber\r\n\t\t}\r\n\t}\r\n\r\n\t// Prepends `+CountryCode ` in case of an international phone number\r\n\tgetFullNumber(formattedNationalNumber) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (!this.countryCallingCode) {\r\n\t\t\t\treturn `+${this.digits}`\r\n\t\t\t}\r\n\t\t\tif (!formattedNationalNumber) {\r\n\t\t\t\treturn `+${this.countryCallingCode}`\r\n\t\t\t}\r\n\t\t\treturn `+${this.countryCallingCode} ${formattedNationalNumber}`\r\n\t\t}\r\n\t\treturn formattedNationalNumber\r\n\t}\r\n\r\n\tgetNonFormattedNationalNumber() {\r\n\t\treturn this.nationalPrefix +\r\n\t\t\t(this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) +\r\n\t\t\tthis.nationalNumberDigits\r\n\t}\r\n\r\n\t// Extracts the country calling code from the beginning\r\n\t// of the entered `national_number` (so far),\r\n\t// and places the remaining input into the `national_number`.\r\n\textractCountryCallingCode() {\r\n\t\tconst {\r\n\t\t\tcountryCallingCode,\r\n\t\t\tnumber\r\n\t\t} = extractCountryCallingCode(\r\n\t\t\t'+' + this.digits,\r\n\t\t\tthis.defaultCountry,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (!countryCallingCode) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.nationalNumberDigits = number\r\n\t\tthis.countryCallingCode = countryCallingCode\r\n\t\tthis.metadata.chooseCountryByCountryCallingCode(countryCallingCode)\r\n\t\tthis.initializePhoneNumberFormatsForCountry()\r\n\t\tthis.resetFormat()\r\n\t\treturn this.metadata.hasSelectedNumberingPlan()\r\n\t}\r\n\r\n\textractNationalPrefix() {\r\n\t\tthis.nationalPrefix = ''\r\n\t\tif (!this.metadata.hasSelectedNumberingPlan()) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Only strip national prefixes for non-international phone numbers\r\n\t\t// because national prefixes can't be present in international phone numbers.\r\n\t\t// While `parseNumber()` is forgiving is such cases, `AsYouType` is not.\r\n\t\tconst {\r\n\t\t\tnationalNumber,\r\n\t\t\tcarrierCode\r\n\t\t} = stripNationalPrefixAndCarrierCode(\r\n\t\t\tthis.nationalNumberDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\r\n\t\t// Sometimes `stripNationalPrefixAndCarrierCode()` won't actually\r\n\t\t// strip national prefix and will instead prepend some digits to the `number`:\r\n\t\t// for example, when number `2345678` is passed with `VI` country selected,\r\n\t\t// it will return `{ number: \"3402345678\" }`, because `340` area code is prepended.\r\n\t\t// So check if the `nationalNumber` is actually at the end of `this.nationalNumberDigits`.\r\n\t\tif (nationalNumber) {\r\n\t\t\tconst index = this.nationalNumberDigits.indexOf(nationalNumber)\r\n\t\t\tif (index < 0 || index !== this.nationalNumberDigits.length - nationalNumber.length) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (carrierCode) {\r\n\t\t\tthis.carrierCode = carrierCode\r\n\t\t}\r\n\t\tthis.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - nationalNumber.length)\r\n\t\tthis.nationalNumberDigits = nationalNumber\r\n\t\treturn this.nationalPrefix\r\n\t}\r\n\r\n\t// isPossibleNumber(number) {\r\n\t// \tswitch (checkNumberLengthForType(number, undefined, this.metadata)) {\r\n\t// \t\tcase 'IS_POSSIBLE':\r\n\t// \t\t\treturn true\r\n\t// \t\t// case 'IS_POSSIBLE_LOCAL_ONLY':\r\n\t// \t\t// \treturn !this.isInternational()\r\n\t// \t\tdefault:\r\n\t// \t\t\treturn false\r\n\t// \t}\r\n\t// }\r\n\r\n\tisCountryCallingCodeAmbiguous() {\r\n\t\tconst countryCodes = this.metadata.getCountryCodesForCallingCode(this.countryCallingCode)\r\n\t\treturn countryCodes && countryCodes.length > 1\r\n\t}\r\n\r\n\tcreateFormattingTemplate(format) {\r\n\t\t// The formatter doesn't format numbers when numberPattern contains '|', e.g.\r\n\t\t// (20|3)\\d{4}. In those cases we quickly return.\r\n\t\t// (Though there's no such format in current metadata)\r\n\t\t/* istanbul ignore if */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS && format.pattern().indexOf('|') >= 0) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\t// Get formatting template for this phone number format\r\n\t\tlet template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix)\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (!template) {\r\n\t\t\treturn\r\n\t\t}\r\n\t\tthis.template = template\r\n\t\tthis.populatedNationalNumberTemplate = template\r\n\t\t// For convenience, the public `.template` property\r\n\t\t// contains the whole international number\r\n\t\t// if the phone number being input is international:\r\n\t\t// 'x' for the '+' sign, 'x'es for the country phone code,\r\n\t\t// a spacebar and then the template for the formatted national number.\r\n\t\tif (this.isInternational()) {\r\n\t\t\tthis.template = DIGIT_PLACEHOLDER +\r\n\t\t\t\trepeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) +\r\n\t\t\t\t' ' +\r\n\t\t\t\ttemplate\r\n\t\t}\r\n\t\treturn this.template\r\n\t}\r\n\r\n\t/**\r\n\t * Generates formatting template for a national phone number,\r\n\t * optionally containing a national prefix, for a format.\r\n\t * @param  {Format} format\r\n\t * @param  {string} nationalPrefix\r\n\t * @return {string}\r\n\t */\r\n\tgetTemplateForNumberFormatPattern(format, nationalPrefix) {\r\n\t\tlet pattern = format.pattern()\r\n\r\n\t\t/* istanbul ignore else */\r\n\t\tif (SUPPORT_LEGACY_FORMATTING_PATTERNS) {\r\n\t\t\tpattern = pattern\r\n\t\t\t\t// Replace anything in the form of [..] with \\d\r\n\t\t\t\t.replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\\\d')\r\n\t\t\t\t// Replace any standalone digit (not the one in `{}`) with \\d\r\n\t\t\t\t.replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\\\d')\r\n\t\t}\r\n\r\n\t\t// Generate a dummy national number (consisting of `9`s)\r\n\t\t// that fits this format's `pattern`.\r\n\t\t//\r\n\t\t// This match will always succeed,\r\n\t\t// because the \"longest dummy phone number\"\r\n\t\t// has enough length to accomodate any possible\r\n\t\t// national phone number format pattern.\r\n\t\t//\r\n\t\tlet digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]\r\n\r\n\t\t// If the national number entered is too long\r\n\t\t// for any phone number format, then abort.\r\n\t\tif (this.nationalNumberDigits.length > digits.length) {\r\n\t\t\treturn\r\n\t\t}\r\n\r\n\t\t// Get a formatting template which can be used to efficiently format\r\n\t\t// a partial number where digits are added one by one.\r\n\r\n\t\t// Below `strictPattern` is used for the\r\n\t\t// regular expression (with `^` and `$`).\r\n\t\t// This wasn't originally in Google's `libphonenumber`\r\n\t\t// and I guess they don't really need it\r\n\t\t// because they're not using \"templates\" to format phone numbers\r\n\t\t// but I added `strictPattern` after encountering\r\n\t\t// South Korean phone number formatting bug.\r\n\t\t//\r\n\t\t// Non-strict regular expression bug demonstration:\r\n\t\t//\r\n\t\t// this.nationalNumberDigits : `111111111` (9 digits)\r\n\t\t//\r\n\t\t// pattern : (\\d{2})(\\d{3,4})(\\d{4})\r\n\t\t// format : `$1 $2 $3`\r\n\t\t// digits : `9999999999` (10 digits)\r\n\t\t//\r\n\t\t// '9999999999'.replace(new RegExp(/(\\d{2})(\\d{3,4})(\\d{4})/g), '$1 $2 $3') = \"99 9999 9999\"\r\n\t\t//\r\n\t\t// template : xx xxxx xxxx\r\n\t\t//\r\n\t\t// But the correct template in this case is `xx xxx xxxx`.\r\n\t\t// The template was generated incorrectly because of the\r\n\t\t// `{3,4}` variability in the `pattern`.\r\n\t\t//\r\n\t\t// The fix is, if `this.nationalNumberDigits` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then `this.nationalNumberDigits`\r\n\t\t// is used instead of `digits`.\r\n\r\n\t\tconst strictPattern = new RegExp('^' + pattern + '$')\r\n\t\tconst nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\\d/g, DUMMY_DIGIT)\r\n\r\n\t\t// If `this.nationalNumberDigits` has already sufficient length\r\n\t\t// to satisfy the `pattern` completely then use it\r\n\t\t// instead of `digits`.\r\n\t\tif (strictPattern.test(nationalNumberDummyDigits)) {\r\n\t\t\tdigits = nationalNumberDummyDigits\r\n\t\t}\r\n\r\n\t\tlet numberFormat = this.getFormatFormat(format)\r\n\t\tlet includesNationalPrefix\r\n\r\n\t\tif (nationalPrefix) {\r\n\t\t\tif (format.nationalPrefixFormattingRule()) {\r\n\t\t\t\tconst numberFormatWithNationalPrefix = numberFormat.replace(\r\n\t\t\t\t\tFIRST_GROUP_PATTERN,\r\n\t\t\t\t\tformat.nationalPrefixFormattingRule()\r\n\t\t\t\t)\r\n\t\t\t\tif (parseDigits(numberFormatWithNationalPrefix) === nationalPrefix + parseDigits(numberFormat)) {\r\n\t\t\t\t\tnumberFormat = numberFormatWithNationalPrefix\r\n\t\t\t\t\tincludesNationalPrefix = true\r\n\t\t\t\t\tlet i = nationalPrefix.length\r\n\t\t\t\t\twhile (i > 0) {\r\n\t\t\t\t\t\tnumberFormat = numberFormat.replace(/\\d/, DIGIT_PLACEHOLDER)\r\n\t\t\t\t\t\ti--\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Generate formatting template for this phone number format.\r\n\t\tlet template = digits\r\n\t\t\t// Format the dummy phone number according to the format.\r\n\t\t\t.replace(new RegExp(pattern), numberFormat)\r\n\t\t\t// Replace each dummy digit with a DIGIT_PLACEHOLDER.\r\n\t\t\t.replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER)\r\n\r\n\t\tif (nationalPrefix) {\r\n\t\t\tif (!includesNationalPrefix) {\r\n\t\t\t\t// Prepend national prefix to the template manually.\r\n\t\t\t\ttemplate = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) +\r\n\t\t\t\t\tthis.getSeparatorAfterNationalPrefix(format) +\r\n\t\t\t\t\ttemplate\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn template\r\n\t}\r\n\r\n\tformatNextNationalNumberDigits(digits) {\r\n\t\t// Using `.split('')` to iterate through a string here\r\n\t\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t\t// `.split('')` is generally not safe for Unicode,\r\n\t\t// but in this particular case for `digits` it is safe.\r\n\t\t// for (const digit of digits)\r\n\t\tfor (const digit of digits.split('')) {\r\n\t\t\t// If there is room for more digits in current `template`,\r\n\t\t\t// then set the next digit in the `template`,\r\n\t\t\t// and return the formatted digits so far.\r\n\t\t\t// If more digits are entered than the current format could handle.\r\n\t\t\tif (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {\r\n\t\t\t\t// Reset the format.\r\n\t\t\t\tthis.resetFormat()\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\r\n\t\t\tthis.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER)\r\n\t\t\tthis.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit)\r\n\t\t}\r\n\r\n\t\t// Return the formatted phone number so far.\r\n\t\treturn cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\r\n\t\t// The old way which was good for `input-format` but is not so good\r\n\t\t// for `react-phone-number-input`'s default input (`InputBasic`).\r\n\t\t// return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)\r\n\t\t// \t.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')\r\n\t}\r\n\r\n\tisInternational() {\r\n\t\treturn this.international\r\n\t}\r\n\r\n\tgetFormatFormat(format) {\r\n\t\tif (this.isInternational()) {\r\n\t\t\treturn applyInternationalSeparatorStyle(format.internationalFormat())\r\n\t\t}\r\n\t\treturn format.format()\r\n\t}\r\n\r\n\t// Determines the country of the phone number\r\n\t// entered so far based on the country phone code\r\n\t// and the national phone number.\r\n\tdetermineTheCountry() {\r\n\t\tthis.country = findCountryCode(\r\n\t\t\tthis.isInternational() ? this.countryCallingCode : this.defaultCallingCode,\r\n\t\t\tthis.nationalNumberDigits,\r\n\t\t\tthis.metadata\r\n\t\t)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an instance of `PhoneNumber` class.\r\n\t * Will return `undefined` if no national (significant) number\r\n\t * digits have been entered so far, or if no `defaultCountry` has been\r\n\t * set and the user enters a phone number not in international format.\r\n\t */\r\n\tgetNumber() {\r\n\t\tif (this.isInternational()) {\r\n\t\t\tif (!this.countryCallingCode) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (!this.country && !this.defaultCallingCode) {\r\n\t\t\t\treturn\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (!this.nationalNumberDigits) {\r\n\t\t\treturn undefined\r\n\t\t}\r\n\t\tlet countryCode = this.country\r\n\t\t/* istanbul ignore if */\r\n\t\tif (USE_NON_GEOGRAPHIC_COUNTRY_CODE) {\r\n\t\t\tif (this.country === '001') {\r\n\t\t\t\tcountryCode = undefined\r\n\t\t\t}\r\n\t\t}\r\n\t\tconst callingCode = this.countryCallingCode || this.defaultCallingCode\r\n\t\tconst phoneNumber = new PhoneNumber(\r\n\t\t\tcountryCode || callingCode,\r\n\t\t\tthis.nationalNumberDigits,\r\n\t\t\tthis.metadata.metadata\r\n\t\t)\r\n\t\tif (this.carrierCode) {\r\n\t\t\tphoneNumber.carrierCode = this.carrierCode\r\n\t\t}\r\n\t\t// Phone number extensions are not supported by \"As You Type\" formatter.\r\n\t\treturn phoneNumber\r\n\t}\r\n\r\n\t/**\r\n\t * @deprecated\r\n\t * This method is used in `react-phone-number-input/source/input-control.js`\r\n\t * in versions before `3.0.16`.\r\n\t */\r\n\tgetNationalNumber() {\r\n\t\treturn this.nationalNumberDigits\r\n\t}\r\n\r\n\tgetNonFormattedTemplate() {\r\n\t\treturn this.getFullNumber(this.getNonFormattedNationalNumber())\r\n\t\t\t.replace(/[\\+\\d]/g, DIGIT_PLACEHOLDER)\r\n\t}\r\n\r\n\t/**\r\n\t * Returns formatted phone number template.\r\n\t * @return {string} [template]\r\n\t */\r\n\tgetTemplate() {\r\n\t\tif (!this.template) {\r\n\t\t\treturn this.getNonFormattedTemplate()\r\n\t\t}\r\n\t\tlet index = -1\r\n\t\tlet i = 0\r\n\t\twhile (i < (this.international ? 1 : 0) + this.digits.length) {\r\n\t\t\tindex = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1)\r\n\t\t\ti++\r\n\t\t}\r\n\t\treturn cutAndStripNonPairedParens(this.template, index + 1)\r\n\t}\r\n}\r\n\r\nexport function stripNonPairedParens(string) {\r\n\tconst dangling_braces =[]\r\n\tlet i = 0\r\n\twhile (i < string.length) {\r\n\t\tif (string[i] === '(') {\r\n\t\t\tdangling_braces.push(i)\r\n\t\t}\r\n\t\telse if (string[i] === ')') {\r\n\t\t\tdangling_braces.pop()\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\tlet start = 0\r\n\tlet cleared_string = ''\r\n\tdangling_braces.push(string.length)\r\n\tfor (const index of dangling_braces) {\r\n\t\tcleared_string += string.slice(start, index)\r\n\t\tstart = index + 1\r\n\t}\r\n\treturn cleared_string\r\n}\r\n\r\nexport function cutAndStripNonPairedParens(string, cutBeforeIndex) {\r\n\tif (string[cutBeforeIndex] === ')') {\r\n\t\tcutBeforeIndex++\r\n\t}\r\n\treturn stripNonPairedParens(string.slice(0, cutBeforeIndex))\r\n}\r\n\r\nexport function closeNonPairedParens(template, cut_before) {\r\n\tconst retained_template = template.slice(0, cut_before)\r\n\tconst opening_braces = countOccurences('(', retained_template)\r\n\tconst closing_braces = countOccurences(')', retained_template)\r\n\tlet dangling_braces = opening_braces - closing_braces\r\n\twhile (dangling_braces > 0 && cut_before < template.length) {\r\n\t\tif (template[cut_before] === ')') {\r\n\t\t\tdangling_braces--\r\n\t\t}\r\n\t\tcut_before++\r\n\t}\r\n\treturn template.slice(0, cut_before)\r\n}\r\n\r\n// Counts all occurences of a symbol in a string.\r\n// Unicode-unsafe (because using `.split()`).\r\nexport function countOccurences(symbol, string) {\r\n\tlet count = 0\r\n\t// Using `.split('')` to iterate through a string here\r\n\t// to avoid requiring `Symbol.iterator` polyfill.\r\n\t// `.split('')` is generally not safe for Unicode,\r\n\t// but in this particular case for counting brackets it is safe.\r\n\t// for (const character of string)\r\n\tfor (const character of string.split('')) {\r\n\t\tif (character === symbol) {\r\n\t\t\tcount++\r\n\t\t}\r\n\t}\r\n\treturn count\r\n}\r\n\r\n// Repeats a string (or a symbol) N times.\r\n// http://stackoverflow.com/questions/202605/repeat-string-javascript\r\nexport function repeat(string, times) {\r\n\tif (times < 1) {\r\n\t\treturn ''\r\n\t}\r\n\tlet result = ''\r\n\twhile (times > 1) {\r\n\t\tif (times & 1) {\r\n\t\t\tresult += string\r\n\t\t}\r\n\t\ttimes >>= 1\r\n\t\tstring += string\r\n\t}\r\n\treturn result + string\r\n}","import Metadata from './metadata'\r\n\r\nexport default function getCountries(metadata) {\r\n\treturn new Metadata(metadata).getCountries()\r\n}","import PhoneNumber from './PhoneNumber'\r\n\r\nexport default function getExampleNumber(country, examples, metadata) {\r\n\tif (examples[country]) {\r\n\t\treturn new PhoneNumber(country, examples[country], metadata)\r\n\t}\r\n}","import AsYouType from './AsYouType'\r\n\r\n/**\r\n * Formats a (possibly incomplete) phone number.\r\n * The phone number can be either in E.164 format\r\n * or in a form of national number digits.\r\n * @param {string} value - A possibly incomplete phone number. Either in E.164 format or in a form of national number digits.\r\n * @param {string?} country - Two-letter (\"ISO 3166-1 alpha-2\") country code.\r\n * @return {string} Formatted (possibly incomplete) phone number.\r\n */\r\nexport default function formatIncompletePhoneNumber(value, country, metadata) {\r\n\tif (!metadata) {\r\n\t\tmetadata = country\r\n\t\tcountry = undefined\r\n\t}\r\n\treturn new AsYouType(country, metadata).input(value)\r\n}","// Importing from `.json.js` a workaround for a bug in web browsers' \"native\"\r\n// ES6 importing system which is uncapable of importing \"*.json\" files.\r\n// https://github.com/catamphetamine/libphonenumber-js/issues/239\r\nimport metadata from '../metadata.full.json.js'\r\n\r\nimport {\r\n\tparsePhoneNumber as _parsePhoneNumber,\r\n\tparsePhoneNumberFromString as _parsePhoneNumberFromString,\r\n\r\n\tfindNumbers as _findNumbers,\r\n\tsearchNumbers as _searchNumbers,\r\n\tfindPhoneNumbersInText as _findPhoneNumbersInText,\r\n\tsearchPhoneNumbersInText as _searchPhoneNumbersInText,\r\n\tPhoneNumberMatcher as _PhoneNumberMatcher,\r\n\r\n\tAsYouType as _AsYouType,\r\n\r\n\tisSupportedCountry as _isSupportedCountry,\r\n\tgetCountries as _getCountries,\r\n\tgetCountryCallingCode as _getCountryCallingCode,\r\n\tgetExtPrefix as _getExtPrefix,\r\n\r\n\tgetExampleNumber as _getExampleNumber,\r\n\r\n\tformatIncompletePhoneNumber as _formatIncompletePhoneNumber,\r\n\tparseIncompletePhoneNumber,\r\n\tparsePhoneNumberCharacter,\r\n\tparseDigits,\r\n\r\n\tparseRFC3966,\r\n\tformatRFC3966\r\n} from '../core/index'\r\n\r\nexport {\r\n\tParseError,\r\n\r\n\tparseIncompletePhoneNumber,\r\n\tparsePhoneNumberCharacter,\r\n\tparseDigits,\r\n\r\n\tparseRFC3966,\r\n\tformatRFC3966\r\n} from '../core/index'\r\n\r\nfunction call(func, _arguments) {\r\n\tvar args = Array.prototype.slice.call(_arguments)\r\n\targs.push(metadata)\r\n\treturn func.apply(this, args)\r\n}\r\n\r\nexport function parsePhoneNumber() {\r\n\treturn call(_parsePhoneNumber, arguments)\r\n}\r\n\r\nexport function parsePhoneNumberFromString() {\r\n\treturn call(_parsePhoneNumberFromString, arguments)\r\n}\r\n\r\nexport function findNumbers() {\r\n\treturn call(_findNumbers, arguments)\r\n}\r\n\r\nexport function searchNumbers() {\r\n\treturn call(_searchNumbers, arguments)\r\n}\r\n\r\nexport function findPhoneNumbersInText() {\r\n\treturn call(_findPhoneNumbersInText, arguments)\r\n}\r\n\r\nexport function searchPhoneNumbersInText() {\r\n\treturn call(_searchPhoneNumbersInText, arguments)\r\n}\r\n\r\nexport function PhoneNumberMatcher(text, options) {\r\n\treturn _PhoneNumberMatcher.call(this, text, options, metadata)\r\n}\r\nPhoneNumberMatcher.prototype = Object.create(_PhoneNumberMatcher.prototype, {})\r\nPhoneNumberMatcher.prototype.constructor = PhoneNumberMatcher\r\n\r\nexport function AsYouType(country) {\r\n\treturn _AsYouType.call(this, country, metadata)\r\n}\r\nAsYouType.prototype = Object.create(_AsYouType.prototype, {})\r\nAsYouType.prototype.constructor = AsYouType\r\n\r\nexport function isSupportedCountry() {\r\n\treturn call(_isSupportedCountry, arguments)\r\n}\r\n\r\nexport function getCountries() {\r\n\treturn call(_getCountries, arguments)\r\n}\r\n\r\nexport function getCountryCallingCode() {\r\n\treturn call(_getCountryCallingCode, arguments)\r\n}\r\n\r\nexport function getExtPrefix(country) {\r\n\treturn call(_getExtPrefix, arguments)\r\n}\r\n\r\nexport function getExampleNumber() {\r\n\treturn call(_getExampleNumber, arguments)\r\n}\r\n\r\nexport function formatIncompletePhoneNumber() {\r\n\treturn call(_formatIncompletePhoneNumber, arguments)\r\n}"],"sourceRoot":""}